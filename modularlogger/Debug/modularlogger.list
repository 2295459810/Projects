
modularlogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004de4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005088  08005088  00015088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005090  08005090  00015090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005094  08005094  00015094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  20000000  08005098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000045d8  2000006c  08005104  0002006c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004644  08005104  00024644  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028afb  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005187  00000000  00000000  00048b97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c097  00000000  00000000  0004dd1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001350  00000000  00000000  00059db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001630  00000000  00000000  0005b108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a37c  00000000  00000000  0005c738  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000752e  00000000  00000000  00066ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006dfe2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038c0  00000000  00000000  0006e060  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f5c 	.word	0x08004f5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08004f5c 	.word	0x08004f5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <InitQueue>:
 8000590:	2300      	movs	r3, #0
 8000592:	f8c0 37d4 	str.w	r3, [r0, #2004]	; 0x7d4
 8000596:	f8c0 37d0 	str.w	r3, [r0, #2000]	; 0x7d0
 800059a:	f8c0 37d8 	str.w	r3, [r0, #2008]	; 0x7d8
 800059e:	2001      	movs	r0, #1
 80005a0:	4770      	bx	lr

080005a2 <IsQueueFull>:
}  
  
/*************************************************/  
bool IsQueueFull( Circlequeue *pQueue)  
{  
	if(((pQueue->u32Rear +1) % MAX_QUEUE_SIZE ) == pQueue->u32Front)//(pQueue->u32Count == MAX_QUEUE_SIZE)
 80005a2:	f8d0 37d4 	ldr.w	r3, [r0, #2004]	; 0x7d4
 80005a6:	f8d0 07d0 	ldr.w	r0, [r0, #2000]	; 0x7d0
 80005aa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80005ae:	3301      	adds	r3, #1
 80005b0:	fbb3 f2f1 	udiv	r2, r3, r1
 80005b4:	fb01 3312 	mls	r3, r1, r2, r3
		return true;  
	else  
		return false;  
  
  
}   
 80005b8:	1a1b      	subs	r3, r3, r0
 80005ba:	4258      	negs	r0, r3
 80005bc:	4158      	adcs	r0, r3
 80005be:	4770      	bx	lr

080005c0 <EnQueue>:
/*************************************************/  
bool EnQueue( Circlequeue *pQueue, char e)  
{  
 80005c0:	b538      	push	{r3, r4, r5, lr}
 80005c2:	4604      	mov	r4, r0
 80005c4:	460d      	mov	r5, r1
	//
	if(IsQueueFull(pQueue))//if(pQueue->u32Count == MAX_QUEUE_SIZE)
 80005c6:	f7ff ffec 	bl	80005a2 <IsQueueFull>
 80005ca:	b9a0      	cbnz	r0, 80005f6 <EnQueue+0x36>
	{  
		//Console_dbgPrintf("The pQueue is full\r\n");
		return false;  
	}  
	//
	pQueue->data[pQueue->u32Rear] = (uint8_t)e;
 80005cc:	f8d4 37d4 	ldr.w	r3, [r4, #2004]	; 0x7d4
 80005d0:	54e5      	strb	r5, [r4, r3]
	//
	pQueue->u32Rear = (pQueue->u32Rear + 1) % MAX_QUEUE_SIZE;  
 80005d2:	f8d4 37d4 	ldr.w	r3, [r4, #2004]	; 0x7d4
 80005d6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80005da:	3301      	adds	r3, #1
 80005dc:	fbb3 f2f1 	udiv	r2, r3, r1
 80005e0:	fb01 3312 	mls	r3, r1, r2, r3
 80005e4:	f8c4 37d4 	str.w	r3, [r4, #2004]	; 0x7d4
	//
	pQueue->u32Count++;  
 80005e8:	f8d4 37d8 	ldr.w	r3, [r4, #2008]	; 0x7d8
 80005ec:	3301      	adds	r3, #1
 80005ee:	f8c4 37d8 	str.w	r3, [r4, #2008]	; 0x7d8
	return true;  
 80005f2:	2001      	movs	r0, #1
 80005f4:	bd38      	pop	{r3, r4, r5, pc}
		return false;  
 80005f6:	2000      	movs	r0, #0
  
}  
 80005f8:	bd38      	pop	{r3, r4, r5, pc}

080005fa <DeQueue>:
  
/*************************************************/ 
char DeQueue( Circlequeue *pQueue)  
{  
 80005fa:	b510      	push	{r4, lr}
	if(pQueue->u32Front == pQueue->u32Rear)//(pQueue->u32Count == 0)
 80005fc:	f8d0 27d0 	ldr.w	r2, [r0, #2000]	; 0x7d0
 8000600:	f8d0 27d4 	ldr.w	r2, [r0, #2004]	; 0x7d4
		//Console_dbgPrintf("The pQueue is empty!\r\n");
		//exit(EXIT_FAILURE);  
	}  
  
	//
	char e = (char)pQueue->data[pQueue->u32Front];
 8000604:	f8d0 27d0 	ldr.w	r2, [r0, #2000]	; 0x7d0
{  
 8000608:	4603      	mov	r3, r0
	char e = (char)pQueue->data[pQueue->u32Front];
 800060a:	5c80      	ldrb	r0, [r0, r2]
	//
	pQueue->u32Front = (pQueue->u32Front + 1) % MAX_QUEUE_SIZE;  
 800060c:	f8d3 27d0 	ldr.w	r2, [r3, #2000]	; 0x7d0
 8000610:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 8000614:	3201      	adds	r2, #1
 8000616:	fbb2 f1f4 	udiv	r1, r2, r4
 800061a:	fb04 2211 	mls	r2, r4, r1, r2
 800061e:	f8c3 27d0 	str.w	r2, [r3, #2000]	; 0x7d0
	//
	pQueue->u32Count--;  
 8000622:	f8d3 27d8 	ldr.w	r2, [r3, #2008]	; 0x7d8
 8000626:	3a01      	subs	r2, #1
 8000628:	f8c3 27d8 	str.w	r2, [r3, #2008]	; 0x7d8
  
	return e;  
  
}  
 800062c:	bd10      	pop	{r4, pc}

0800062e <ClearQueue>:
  

/*************************************************/ 
bool ClearQueue( Circlequeue *pQueue )  
{  
	pQueue->u32Front = pQueue->u32Rear = 0;  
 800062e:	2300      	movs	r3, #0
 8000630:	f8c0 37d4 	str.w	r3, [r0, #2004]	; 0x7d4
 8000634:	f8c0 37d0 	str.w	r3, [r0, #2000]	; 0x7d0
	pQueue->u32Count = 0;  
 8000638:	f8c0 37d8 	str.w	r3, [r0, #2008]	; 0x7d8
	return true;    
}  
 800063c:	2001      	movs	r0, #1
 800063e:	4770      	bx	lr

08000640 <GetLength>:
  
/*************************************************/  
unsigned int GetLength(Circlequeue *pQueue)  
{  
	return pQueue->u32Count;    
 8000640:	f8d0 07d8 	ldr.w	r0, [r0, #2008]	; 0x7d8
}  
 8000644:	4770      	bx	lr

08000646 <writeString>:
/***************************************************************************
* FUNCTION IMPLEMENTATIONS
***************************************************************************/

bool writeString(const char* szText)
{
 8000646:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000648:	4605      	mov	r5, r0
	bool bSuccess = false;

	if(UART_IF_ERR_OK == tszUART_Write(CONSOLE_UART, (const uint8_t*)szText, strlen(szText), 500,UART_IF_SEND_WAY_REG))
 800064a:	f7ff fdc1 	bl	80001d0 <strlen>
 800064e:	2400      	movs	r4, #0
 8000650:	4602      	mov	r2, r0
 8000652:	9400      	str	r4, [sp, #0]
 8000654:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000658:	4629      	mov	r1, r5
 800065a:	4620      	mov	r0, r4
 800065c:	f000 fb1c 	bl	8000c98 <tszUART_Write>
	{
		bSuccess = true;
	}
	return bSuccess;
}
 8000660:	fab0 f080 	clz	r0, r0
 8000664:	0940      	lsrs	r0, r0, #5
 8000666:	b003      	add	sp, #12
 8000668:	bd30      	pop	{r4, r5, pc}
	...

0800066c <Console_dbgPrintf>:

void Console_dbgPrintf(uint8_t uint8LogMode, const char* szText, ...)
{
 800066c:	b40e      	push	{r1, r2, r3}
 800066e:	b503      	push	{r0, r1, lr}
 8000670:	ab03      	add	r3, sp, #12
//	default:
//		return;
//	}

	va_start(argl, szText);
	if (PRINTF_BUFFERSIZE <= vsnprintf(mg_szBuff, PRINTF_BUFFERSIZE, szText, argl))
 8000672:	f44f 7180 	mov.w	r1, #256	; 0x100
{
 8000676:	f853 2b04 	ldr.w	r2, [r3], #4
	if (PRINTF_BUFFERSIZE <= vsnprintf(mg_szBuff, PRINTF_BUFFERSIZE, szText, argl))
 800067a:	4807      	ldr	r0, [pc, #28]	; (8000698 <Console_dbgPrintf+0x2c>)
	va_start(argl, szText);
 800067c:	9301      	str	r3, [sp, #4]
	if (PRINTF_BUFFERSIZE <= vsnprintf(mg_szBuff, PRINTF_BUFFERSIZE, szText, argl))
 800067e:	f004 f863 	bl	8004748 <vsniprintf>
 8000682:	28ff      	cmp	r0, #255	; 0xff
	{
	  writeString("ERROR @dbgprintf: Buffer too small!\n\r");
 8000684:	bfcc      	ite	gt
 8000686:	4805      	ldrgt	r0, [pc, #20]	; (800069c <Console_dbgPrintf+0x30>)
	  va_end(argl);
	  return;
	}
	va_end(argl);

	writeString(mg_szBuff);
 8000688:	4803      	ldrle	r0, [pc, #12]	; (8000698 <Console_dbgPrintf+0x2c>)
 800068a:	f7ff ffdc 	bl	8000646 <writeString>
}
 800068e:	b002      	add	sp, #8
 8000690:	f85d eb04 	ldr.w	lr, [sp], #4
 8000694:	b003      	add	sp, #12
 8000696:	4770      	bx	lr
 8000698:	20000088 	.word	0x20000088
 800069c:	08004f88 	.word	0x08004f88

080006a0 <HAL_UART_RxCpltCallback>:
{
	uint8_t Id = 0;int i = 0;
	uint32_t u32Len = 0;
	uint32_t tempLen = 0;
	//receive data finish,uart1
	if(huart->Instance==USART1)
 80006a0:	6803      	ldr	r3, [r0, #0]
 80006a2:	4a2a      	ldr	r2, [pc, #168]	; (800074c <HAL_UART_RxCpltCallback+0xac>)
 80006a4:	4293      	cmp	r3, r2
{
 80006a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(huart->Instance==USART1)
 80006aa:	d044      	beq.n	8000736 <HAL_UART_RxCpltCallback+0x96>
	{
		Id = 0;
	}
	else if(huart->Instance==USART2)
 80006ac:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d042      	beq.n	800073a <HAL_UART_RxCpltCallback+0x9a>
	{
		Id = 1;
	}
	else if(huart->Instance==USART3)
 80006b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d040      	beq.n	800073e <HAL_UART_RxCpltCallback+0x9e>
	{
		Id = 2;
	}
	else if(huart->Instance==UART4)
 80006bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d03e      	beq.n	8000742 <HAL_UART_RxCpltCallback+0xa2>
	{
		Id = 3;
	}
	else if(huart->Instance==UART5)
 80006c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d13c      	bne.n	8000746 <HAL_UART_RxCpltCallback+0xa6>
	{
		Id = 4;
 80006cc:	2604      	movs	r6, #4
	else
	{
		return ;

	}
	stUartProperty[Id].u32UARTRxDataLength = UART_RX_BUFFERSIZE;
 80006ce:	4d20      	ldr	r5, [pc, #128]	; (8000750 <HAL_UART_RxCpltCallback+0xb0>)
 80006d0:	f44f 6411 	mov.w	r4, #2320	; 0x910
 80006d4:	4374      	muls	r4, r6
 80006d6:	192b      	adds	r3, r5, r4
 80006d8:	2228      	movs	r2, #40	; 0x28

		for(i = 0; i<UART_RX_BUFFERSIZE;i++)
		{
			if(IsQueueFull(&(stUartProperty[Id].qUartRxDataQ)))
 80006da:	f504 7892 	add.w	r8, r4, #292	; 0x124
	stUartProperty[Id].u32UARTRxDataLength = UART_RX_BUFFERSIZE;
 80006de:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
			if(IsQueueFull(&(stUartProperty[Id].qUartRxDataQ)))
 80006e2:	44a8      	add	r8, r5
		for(i = 0; i<UART_RX_BUFFERSIZE;i++)
 80006e4:	2700      	movs	r7, #0
			if(IsQueueFull(&(stUartProperty[Id].qUartRxDataQ)))
 80006e6:	4640      	mov	r0, r8
 80006e8:	f7ff ff5b 	bl	80005a2 <IsQueueFull>
 80006ec:	b110      	cbz	r0, 80006f4 <HAL_UART_RxCpltCallback+0x54>
				{
					ClearQueue(&(stUartProperty[Id].qUartRxDataQ));
 80006ee:	4640      	mov	r0, r8
 80006f0:	f7ff ff9d 	bl	800062e <ClearQueue>
				}
				EnQueue(&(stUartProperty[Id].qUartRxDataQ),(char)stUartProperty[Id].u8UARTDmaRX_Buffer[i]);
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	442b      	add	r3, r5
 80006f8:	4640      	mov	r0, r8
 80006fa:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
		for(i = 0; i<UART_RX_BUFFERSIZE;i++)
 80006fe:	3701      	adds	r7, #1
				EnQueue(&(stUartProperty[Id].qUartRxDataQ),(char)stUartProperty[Id].u8UARTDmaRX_Buffer[i]);
 8000700:	f7ff ff5e 	bl	80005c0 <EnQueue>
		for(i = 0; i<UART_RX_BUFFERSIZE;i++)
 8000704:	2f28      	cmp	r7, #40	; 0x28
 8000706:	d1ee      	bne.n	80006e6 <HAL_UART_RxCpltCallback+0x46>
		}

/*---------------------------------------------------------------------------------------------------------------------*/
	memset(stUartProperty[Id].u8UARTDmaRX_Buffer,0,UART_RX_BUFFERSIZE);
 8000708:	f104 087c 	add.w	r8, r4, #124	; 0x7c
 800070c:	44a8      	add	r8, r5
 800070e:	463a      	mov	r2, r7
 8000710:	2100      	movs	r1, #0
 8000712:	4640      	mov	r0, r8
 8000714:	f003 ffe3 	bl	80046de <memset>

	stUartProperty[Id].u32UARTRxDataLength = 0;
 8000718:	f44f 6311 	mov.w	r3, #2320	; 0x910
 800071c:	fb03 5606 	mla	r6, r3, r6, r5
	HAL_UART_Receive_DMA(&(stUartProperty[Id].hUardHandle), stUartProperty[Id].u8UARTDmaRX_Buffer, 1);
 8000720:	1d20      	adds	r0, r4, #4
	stUartProperty[Id].u32UARTRxDataLength = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	f8c6 3900 	str.w	r3, [r6, #2304]	; 0x900
	HAL_UART_Receive_DMA(&(stUartProperty[Id].hUardHandle), stUartProperty[Id].u8UARTDmaRX_Buffer, 1);
 8000728:	4641      	mov	r1, r8
 800072a:	4428      	add	r0, r5
 800072c:	2201      	movs	r2, #1
}
 800072e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_UART_Receive_DMA(&(stUartProperty[Id].hUardHandle), stUartProperty[Id].u8UARTDmaRX_Buffer, 1);
 8000732:	f001 bed1 	b.w	80024d8 <HAL_UART_Receive_DMA>
		Id = 0;
 8000736:	2600      	movs	r6, #0
 8000738:	e7c9      	b.n	80006ce <HAL_UART_RxCpltCallback+0x2e>
		Id = 1;
 800073a:	2601      	movs	r6, #1
 800073c:	e7c7      	b.n	80006ce <HAL_UART_RxCpltCallback+0x2e>
		Id = 2;
 800073e:	2602      	movs	r6, #2
 8000740:	e7c5      	b.n	80006ce <HAL_UART_RxCpltCallback+0x2e>
		Id = 3;
 8000742:	2603      	movs	r6, #3
 8000744:	e7c3      	b.n	80006ce <HAL_UART_RxCpltCallback+0x2e>
 8000746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800074a:	bf00      	nop
 800074c:	40013800 	.word	0x40013800
 8000750:	20000e98 	.word	0x20000e98

08000754 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{

	if(huart->Instance == USART1)
 8000754:	6803      	ldr	r3, [r0, #0]
 8000756:	4a13      	ldr	r2, [pc, #76]	; (80007a4 <HAL_UART_TxCpltCallback+0x50>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d104      	bne.n	8000766 <HAL_UART_TxCpltCallback+0x12>
	{

		FREERTOS_CUSTOMIZE_SET_EVENT(stUartProperty[0].eUARTDMATx_Done_Event);
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <HAL_UART_TxCpltCallback+0x54>)
 800075e:	2201      	movs	r2, #1
 8000760:	f883 290c 	strb.w	r2, [r3, #2316]	; 0x90c
 8000764:	4770      	bx	lr
	         		portYIELD_FROM_ISR(xYieldRequired);
	         	}
	     }
	     */
	}
	else if(huart->Instance == USART2)
 8000766:	4a11      	ldr	r2, [pc, #68]	; (80007ac <HAL_UART_TxCpltCallback+0x58>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d105      	bne.n	8000778 <HAL_UART_TxCpltCallback+0x24>
	{
		FREERTOS_CUSTOMIZE_SET_EVENT(stUartProperty[1].eUARTDMATx_Done_Event);
 800076c:	2101      	movs	r1, #1
 800076e:	f241 231c 	movw	r3, #4636	; 0x121c
	{
		FREERTOS_CUSTOMIZE_SET_EVENT(stUartProperty[3].eUARTDMATx_Done_Event);
	}
	else if(huart->Instance==UART5)
	{
		FREERTOS_CUSTOMIZE_SET_EVENT(stUartProperty[4].eUARTDMATx_Done_Event);
 8000772:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <HAL_UART_TxCpltCallback+0x54>)
 8000774:	54d1      	strb	r1, [r2, r3]
 8000776:	4770      	bx	lr
	else if(huart->Instance == USART3)
 8000778:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <HAL_UART_TxCpltCallback+0x5c>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d103      	bne.n	8000786 <HAL_UART_TxCpltCallback+0x32>
		FREERTOS_CUSTOMIZE_SET_EVENT(stUartProperty[2].eUARTDMATx_Done_Event);
 800077e:	2101      	movs	r1, #1
 8000780:	f641 332c 	movw	r3, #6956	; 0x1b2c
 8000784:	e7f5      	b.n	8000772 <HAL_UART_TxCpltCallback+0x1e>
	else if(huart->Instance==UART4)
 8000786:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <HAL_UART_TxCpltCallback+0x60>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d103      	bne.n	8000794 <HAL_UART_TxCpltCallback+0x40>
		FREERTOS_CUSTOMIZE_SET_EVENT(stUartProperty[3].eUARTDMATx_Done_Event);
 800078c:	2101      	movs	r1, #1
 800078e:	f242 433c 	movw	r3, #9276	; 0x243c
 8000792:	e7ee      	b.n	8000772 <HAL_UART_TxCpltCallback+0x1e>
	else if(huart->Instance==UART5)
 8000794:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_UART_TxCpltCallback+0x64>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d1ed      	bne.n	8000776 <HAL_UART_TxCpltCallback+0x22>
		FREERTOS_CUSTOMIZE_SET_EVENT(stUartProperty[4].eUARTDMATx_Done_Event);
 800079a:	2101      	movs	r1, #1
 800079c:	f642 534c 	movw	r3, #11596	; 0x2d4c
 80007a0:	e7e7      	b.n	8000772 <HAL_UART_TxCpltCallback+0x1e>
 80007a2:	bf00      	nop
 80007a4:	40013800 	.word	0x40013800
 80007a8:	20000e98 	.word	0x20000e98
 80007ac:	40004400 	.word	0x40004400
 80007b0:	40004800 	.word	0x40004800
 80007b4:	40004c00 	.word	0x40004c00
 80007b8:	40005000 	.word	0x40005000

080007bc <USART1_IRQHandler>:
	}
}

void USART1_IRQHandler(void)
{
 80007bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  volatile uint32_t temp, tmp_flag;
  uint32_t isrflags   = READ_REG(stUartProperty[UART_IF_DEV_1].hUardHandle.Instance->ISR);
 80007be:	4823      	ldr	r0, [pc, #140]	; (800084c <USART1_IRQHandler+0x90>)
 80007c0:	6843      	ldr	r3, [r0, #4]
 80007c2:	69da      	ldr	r2, [r3, #28]
  int i = 0;
  tmp_flag = isrflags&USART_ISR_IDLE;
 80007c4:	f002 0210 	and.w	r2, r2, #16
 80007c8:	9201      	str	r2, [sp, #4]
//  tmp_flag = READ_BIT(stUartProperty[UART_IF_DEV_1].hUardHandle.Instance->ISR, USART_ISR_IDLE);
  if((tmp_flag != RESET))
 80007ca:	9a01      	ldr	r2, [sp, #4]
 80007cc:	4604      	mov	r4, r0
 80007ce:	2a00      	cmp	r2, #0
 80007d0:	d037      	beq.n	8000842 <USART1_IRQHandler+0x86>
  {
	  __HAL_UART_CLEAR_IDLEFLAG(&(stUartProperty[UART_IF_DEV_1].hUardHandle));
 80007d2:	2210      	movs	r2, #16
 80007d4:	621a      	str	r2, [r3, #32]
		temp = stUartProperty[UART_IF_DEV_1].hUardHandle.Instance->ISR;
 80007d6:	69da      	ldr	r2, [r3, #28]
 80007d8:	9200      	str	r2, [sp, #0]
		temp = stUartProperty[UART_IF_DEV_1].hUardHandle.Instance->RDR;
 80007da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
//	HAL_UART_DMAStop(&(stUartProperty[UART_IF_DEV_1].hUardHandle));
	  HAL_UART_DMAStop(&(stUartProperty[UART_IF_DEV_1].hUardHandle));
 80007dc:	3004      	adds	r0, #4
		temp = stUartProperty[UART_IF_DEV_1].hUardHandle.Instance->RDR;
 80007de:	b29b      	uxth	r3, r3
 80007e0:	9300      	str	r3, [sp, #0]
	  HAL_UART_DMAStop(&(stUartProperty[UART_IF_DEV_1].hUardHandle));
 80007e2:	f001 febd 	bl	8002560 <HAL_UART_DMAStop>
			//__HAL_DMA_DISABLE(UART1_Handler.hdmarx);

			stUartProperty[UART_IF_DEV_1].u32UARTRxDataLength = UART_RX_BUFFERSIZE - hdma_usart1_rx.Instance->CNDTR;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <USART1_IRQHandler+0x94>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80007f0:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
			if(stUartProperty[UART_IF_DEV_1].u32UARTRxDataLength == UART_RX_BUFFERSIZE)
 80007f4:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 80007f8:	2b28      	cmp	r3, #40	; 0x28
 80007fa:	d011      	beq.n	8000820 <USART1_IRQHandler+0x64>
 80007fc:	2500      	movs	r5, #0
				//let HAL_UART_RxCpltCallback function do the job.
				return ;
			}
			for(i = 0; i<stUartProperty[UART_IF_DEV_1].u32UARTRxDataLength;i++)
			{
				if(IsQueueFull(&(stUartProperty[UART_IF_DEV_1].qUartRxDataQ)))
 80007fe:	f504 7692 	add.w	r6, r4, #292	; 0x124
			for(i = 0; i<stUartProperty[UART_IF_DEV_1].u32UARTRxDataLength;i++)
 8000802:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8000806:	42ab      	cmp	r3, r5
 8000808:	d80c      	bhi.n	8000824 <USART1_IRQHandler+0x68>
					{
						ClearQueue(&(stUartProperty[UART_IF_DEV_1].qUartRxDataQ));
					}
				EnQueue(&(stUartProperty[UART_IF_DEV_1].qUartRxDataQ),(char)stUartProperty[UART_IF_DEV_1].u8UARTDmaRX_Buffer[i]);
			}
			memset(stUartProperty[UART_IF_DEV_1].u8UARTDmaRX_Buffer,0,UART_RX_BUFFERSIZE);
 800080a:	2228      	movs	r2, #40	; 0x28
 800080c:	2100      	movs	r1, #0
 800080e:	4811      	ldr	r0, [pc, #68]	; (8000854 <USART1_IRQHandler+0x98>)
 8000810:	f003 ff65 	bl	80046de <memset>
			HAL_UART_Receive_DMA(&stUartProperty[UART_IF_DEV_1].hUardHandle, stUartProperty[UART_IF_DEV_1].u8UARTDmaRX_Buffer, 1);
 8000814:	490f      	ldr	r1, [pc, #60]	; (8000854 <USART1_IRQHandler+0x98>)
 8000816:	2201      	movs	r2, #1
 8000818:	f1a1 0078 	sub.w	r0, r1, #120	; 0x78
 800081c:	f001 fe5c 	bl	80024d8 <HAL_UART_Receive_DMA>
  else
  {
  	HAL_UART_IRQHandler(&(stUartProperty[UART_IF_DEV_1].hUardHandle));
  }

}
 8000820:	b002      	add	sp, #8
 8000822:	bd70      	pop	{r4, r5, r6, pc}
				if(IsQueueFull(&(stUartProperty[UART_IF_DEV_1].qUartRxDataQ)))
 8000824:	4630      	mov	r0, r6
 8000826:	f7ff febc 	bl	80005a2 <IsQueueFull>
 800082a:	b110      	cbz	r0, 8000832 <USART1_IRQHandler+0x76>
						ClearQueue(&(stUartProperty[UART_IF_DEV_1].qUartRxDataQ));
 800082c:	4630      	mov	r0, r6
 800082e:	f7ff fefe 	bl	800062e <ClearQueue>
				EnQueue(&(stUartProperty[UART_IF_DEV_1].qUartRxDataQ),(char)stUartProperty[UART_IF_DEV_1].u8UARTDmaRX_Buffer[i]);
 8000832:	1963      	adds	r3, r4, r5
 8000834:	4630      	mov	r0, r6
 8000836:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 800083a:	f7ff fec1 	bl	80005c0 <EnQueue>
			for(i = 0; i<stUartProperty[UART_IF_DEV_1].u32UARTRxDataLength;i++)
 800083e:	3501      	adds	r5, #1
 8000840:	e7df      	b.n	8000802 <USART1_IRQHandler+0x46>
  	HAL_UART_IRQHandler(&(stUartProperty[UART_IF_DEV_1].hUardHandle));
 8000842:	3004      	adds	r0, #4
 8000844:	f001 ff28 	bl	8002698 <HAL_UART_IRQHandler>
 8000848:	e7ea      	b.n	8000820 <USART1_IRQHandler+0x64>
 800084a:	bf00      	nop
 800084c:	20000e98 	.word	0x20000e98
 8000850:	20004278 	.word	0x20004278
 8000854:	20000f14 	.word	0x20000f14

08000858 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  volatile uint32_t temp = 0,tmp_flag;

  int i = 0;

  tmp_flag = READ_BIT(stUartProperty[UART_IF_DEV_2].hUardHandle.Instance->ISR, USART_ISR_IDLE);
 800085a:	4825      	ldr	r0, [pc, #148]	; (80008f0 <USART2_IRQHandler+0x98>)
  volatile uint32_t temp = 0,tmp_flag;
 800085c:	2400      	movs	r4, #0
  tmp_flag = READ_BIT(stUartProperty[UART_IF_DEV_2].hUardHandle.Instance->ISR, USART_ISR_IDLE);
 800085e:	f8d0 3914 	ldr.w	r3, [r0, #2324]	; 0x914
  volatile uint32_t temp = 0,tmp_flag;
 8000862:	9400      	str	r4, [sp, #0]
  tmp_flag = READ_BIT(stUartProperty[UART_IF_DEV_2].hUardHandle.Instance->ISR, USART_ISR_IDLE);
 8000864:	69da      	ldr	r2, [r3, #28]
 8000866:	f002 0210 	and.w	r2, r2, #16
 800086a:	9201      	str	r2, [sp, #4]
  if((tmp_flag != RESET))
 800086c:	9a01      	ldr	r2, [sp, #4]
 800086e:	4605      	mov	r5, r0
 8000870:	2a00      	cmp	r2, #0
 8000872:	d038      	beq.n	80008e6 <USART2_IRQHandler+0x8e>
  { 

	  	  __HAL_UART_CLEAR_IDLEFLAG(&(stUartProperty[UART_IF_DEV_2].hUardHandle));
 8000874:	2210      	movs	r2, #16
 8000876:	621a      	str	r2, [r3, #32]
			temp = stUartProperty[UART_IF_DEV_2].hUardHandle.Instance->ISR;
 8000878:	69da      	ldr	r2, [r3, #28]
 800087a:	9200      	str	r2, [sp, #0]
			temp = stUartProperty[UART_IF_DEV_2].hUardHandle.Instance->RDR;
 800087c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			HAL_UART_DMAStop(&(stUartProperty[UART_IF_DEV_2].hUardHandle));
 800087e:	f600 1014 	addw	r0, r0, #2324	; 0x914
			temp = stUartProperty[UART_IF_DEV_2].hUardHandle.Instance->RDR;
 8000882:	b29b      	uxth	r3, r3
 8000884:	9300      	str	r3, [sp, #0]
			HAL_UART_DMAStop(&(stUartProperty[UART_IF_DEV_2].hUardHandle));
 8000886:	f001 fe6b 	bl	8002560 <HAL_UART_DMAStop>
			//__HAL_DMA_DISABLE(UART1_Handler.hdmarx);

			stUartProperty[UART_IF_DEV_2].u32UARTRxDataLength = UART_RX_BUFFERSIZE - hdma_usart2_rx.Instance->CNDTR;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <USART2_IRQHandler+0x9c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	f241 2210 	movw	r2, #4624	; 0x1210
 8000894:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8000898:	50ab      	str	r3, [r5, r2]
			if(stUartProperty[UART_IF_DEV_2].u32UARTRxDataLength == UART_RX_BUFFERSIZE)
 800089a:	58ab      	ldr	r3, [r5, r2]
 800089c:	2b28      	cmp	r3, #40	; 0x28
 800089e:	d011      	beq.n	80008c4 <USART2_IRQHandler+0x6c>
			{
				//let HAL_UART_RxCpltCallback function do the job.
				return ;
			}
			for(i = 0; i<stUartProperty[UART_IF_DEV_2].u32UARTRxDataLength;i++)
 80008a0:	4f15      	ldr	r7, [pc, #84]	; (80008f8 <USART2_IRQHandler+0xa0>)
			{
				if(IsQueueFull(&(stUartProperty[UART_IF_DEV_2].qUartRxDataQ)))
 80008a2:	f605 2634 	addw	r6, r5, #2612	; 0xa34
			for(i = 0; i<stUartProperty[UART_IF_DEV_2].u32UARTRxDataLength;i++)
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	42a3      	cmp	r3, r4
 80008aa:	d80d      	bhi.n	80008c8 <USART2_IRQHandler+0x70>
					{
						ClearQueue(&(stUartProperty[UART_IF_DEV_2].qUartRxDataQ));
					}
				EnQueue(&(stUartProperty[UART_IF_DEV_2].qUartRxDataQ),(char)stUartProperty[UART_IF_DEV_2].u8UARTDmaRX_Buffer[i]);
			}
			memset(stUartProperty[UART_IF_DEV_2].u8UARTDmaRX_Buffer,0,UART_RX_BUFFERSIZE);
 80008ac:	2228      	movs	r2, #40	; 0x28
 80008ae:	2100      	movs	r1, #0
 80008b0:	4812      	ldr	r0, [pc, #72]	; (80008fc <USART2_IRQHandler+0xa4>)
 80008b2:	f003 ff14 	bl	80046de <memset>
			HAL_UART_Receive_DMA(&stUartProperty[UART_IF_DEV_2].hUardHandle, stUartProperty[UART_IF_DEV_2].u8UARTDmaRX_Buffer, UART_RX_BUFFERSIZE);
 80008b6:	4911      	ldr	r1, [pc, #68]	; (80008fc <USART2_IRQHandler+0xa4>)
 80008b8:	2228      	movs	r2, #40	; 0x28
 80008ba:	f1a1 0078 	sub.w	r0, r1, #120	; 0x78
 80008be:	f001 fe0b 	bl	80024d8 <HAL_UART_Receive_DMA>
  else
  {
  	HAL_UART_IRQHandler(&(stUartProperty[UART_IF_DEV_2].hUardHandle));
  }

  UNUSED(temp);
 80008c2:	9b00      	ldr	r3, [sp, #0]
}
 80008c4:	b003      	add	sp, #12
 80008c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if(IsQueueFull(&(stUartProperty[UART_IF_DEV_2].qUartRxDataQ)))
 80008c8:	4630      	mov	r0, r6
 80008ca:	f7ff fe6a 	bl	80005a2 <IsQueueFull>
 80008ce:	b110      	cbz	r0, 80008d6 <USART2_IRQHandler+0x7e>
						ClearQueue(&(stUartProperty[UART_IF_DEV_2].qUartRxDataQ));
 80008d0:	4630      	mov	r0, r6
 80008d2:	f7ff feac 	bl	800062e <ClearQueue>
				EnQueue(&(stUartProperty[UART_IF_DEV_2].qUartRxDataQ),(char)stUartProperty[UART_IF_DEV_2].u8UARTDmaRX_Buffer[i]);
 80008d6:	192b      	adds	r3, r5, r4
 80008d8:	4630      	mov	r0, r6
 80008da:	f893 198c 	ldrb.w	r1, [r3, #2444]	; 0x98c
 80008de:	f7ff fe6f 	bl	80005c0 <EnQueue>
			for(i = 0; i<stUartProperty[UART_IF_DEV_2].u32UARTRxDataLength;i++)
 80008e2:	3401      	adds	r4, #1
 80008e4:	e7df      	b.n	80008a6 <USART2_IRQHandler+0x4e>
  	HAL_UART_IRQHandler(&(stUartProperty[UART_IF_DEV_2].hUardHandle));
 80008e6:	f600 1014 	addw	r0, r0, #2324	; 0x914
 80008ea:	f001 fed5 	bl	8002698 <HAL_UART_IRQHandler>
 80008ee:	e7e8      	b.n	80008c2 <USART2_IRQHandler+0x6a>
 80008f0:	20000e98 	.word	0x20000e98
 80008f4:	20003c38 	.word	0x20003c38
 80008f8:	200020a8 	.word	0x200020a8
 80008fc:	20001824 	.word	0x20001824

08000900 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8000900:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  volatile uint32_t temp = 0,tmp_flag;

  int i = 0;

  tmp_flag = READ_BIT(stUartProperty[UART_IF_DEV_3].hUardHandle.Instance->ISR, USART_ISR_IDLE);
 8000904:	f241 2324 	movw	r3, #4644	; 0x1224
 8000908:	4e24      	ldr	r6, [pc, #144]	; (800099c <USART3_IRQHandler+0x9c>)
  volatile uint32_t temp = 0,tmp_flag;
 800090a:	2400      	movs	r4, #0
  tmp_flag = READ_BIT(stUartProperty[UART_IF_DEV_3].hUardHandle.Instance->ISR, USART_ISR_IDLE);
 800090c:	58f3      	ldr	r3, [r6, r3]
  volatile uint32_t temp = 0,tmp_flag;
 800090e:	9400      	str	r4, [sp, #0]
  tmp_flag = READ_BIT(stUartProperty[UART_IF_DEV_3].hUardHandle.Instance->ISR, USART_ISR_IDLE);
 8000910:	69da      	ldr	r2, [r3, #28]
 8000912:	f002 0210 	and.w	r2, r2, #16
 8000916:	9201      	str	r2, [sp, #4]
  if((tmp_flag != RESET))
 8000918:	9a01      	ldr	r2, [sp, #4]
 800091a:	2a00      	cmp	r2, #0
 800091c:	d03a      	beq.n	8000994 <USART3_IRQHandler+0x94>
  { 

	  	  __HAL_UART_CLEAR_IDLEFLAG(&(stUartProperty[UART_IF_DEV_3].hUardHandle));
 800091e:	2210      	movs	r2, #16
 8000920:	621a      	str	r2, [r3, #32]
			temp = stUartProperty[UART_IF_DEV_3].hUardHandle.Instance->ISR;
 8000922:	69da      	ldr	r2, [r3, #28]
 8000924:	9200      	str	r2, [sp, #0]
			temp = stUartProperty[UART_IF_DEV_3].hUardHandle.Instance->RDR;
 8000926:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			HAL_UART_DMAStop(&(stUartProperty[UART_IF_DEV_3].hUardHandle));
 8000928:	481d      	ldr	r0, [pc, #116]	; (80009a0 <USART3_IRQHandler+0xa0>)
			temp = stUartProperty[UART_IF_DEV_3].hUardHandle.Instance->RDR;
 800092a:	b29b      	uxth	r3, r3
 800092c:	9300      	str	r3, [sp, #0]
			HAL_UART_DMAStop(&(stUartProperty[UART_IF_DEV_3].hUardHandle));
 800092e:	f001 fe17 	bl	8002560 <HAL_UART_DMAStop>
			//__HAL_DMA_DISABLE(UART1_Handler.hdmarx);

			stUartProperty[UART_IF_DEV_3].u32UARTRxDataLength = UART_RX_BUFFERSIZE - hdma_usart3_rx.Instance->CNDTR;
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <USART3_IRQHandler+0xa4>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	685a      	ldr	r2, [r3, #4]
 8000938:	f506 53d9 	add.w	r3, r6, #6944	; 0x1b20
 800093c:	f1c2 0228 	rsb	r2, r2, #40	; 0x28
 8000940:	601a      	str	r2, [r3, #0]
			if(stUartProperty[UART_IF_DEV_3].u32UARTRxDataLength == UART_RX_BUFFERSIZE)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	2a28      	cmp	r2, #40	; 0x28
 8000946:	461d      	mov	r5, r3
 8000948:	d012      	beq.n	8000970 <USART3_IRQHandler+0x70>
				return ;
			}

			for(i = 0; i<stUartProperty[UART_IF_DEV_3].u32UARTRxDataLength;i++)
			{
				if(IsQueueFull(&(stUartProperty[UART_IF_DEV_3].qUartRxDataQ)))
 800094a:	f2a3 77dc 	subw	r7, r3, #2012	; 0x7dc
					{
						ClearQueue(&(stUartProperty[UART_IF_DEV_3].qUartRxDataQ));
					}
				EnQueue(&(stUartProperty[UART_IF_DEV_3].qUartRxDataQ),(char)stUartProperty[UART_IF_DEV_3].u8UARTDmaRX_Buffer[i]);
 800094e:	f241 289c 	movw	r8, #4764	; 0x129c
			for(i = 0; i<stUartProperty[UART_IF_DEV_3].u32UARTRxDataLength;i++)
 8000952:	682b      	ldr	r3, [r5, #0]
 8000954:	42a3      	cmp	r3, r4
 8000956:	d80e      	bhi.n	8000976 <USART3_IRQHandler+0x76>
			}
			memset(stUartProperty[UART_IF_DEV_3].u8UARTDmaRX_Buffer,0,UART_RX_BUFFERSIZE);
 8000958:	2228      	movs	r2, #40	; 0x28
 800095a:	2100      	movs	r1, #0
 800095c:	4812      	ldr	r0, [pc, #72]	; (80009a8 <USART3_IRQHandler+0xa8>)
 800095e:	f003 febe 	bl	80046de <memset>
			HAL_UART_Receive_DMA(&stUartProperty[UART_IF_DEV_3].hUardHandle, stUartProperty[UART_IF_DEV_3].u8UARTDmaRX_Buffer, UART_RX_BUFFERSIZE);
 8000962:	4911      	ldr	r1, [pc, #68]	; (80009a8 <USART3_IRQHandler+0xa8>)
 8000964:	2228      	movs	r2, #40	; 0x28
 8000966:	f1a1 0078 	sub.w	r0, r1, #120	; 0x78
 800096a:	f001 fdb5 	bl	80024d8 <HAL_UART_Receive_DMA>
  }
  else
   {
    	HAL_UART_IRQHandler(&(stUartProperty[UART_IF_DEV_3].hUardHandle));
    }
  UNUSED(temp);
 800096e:	9b00      	ldr	r3, [sp, #0]
}
 8000970:	b002      	add	sp, #8
 8000972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if(IsQueueFull(&(stUartProperty[UART_IF_DEV_3].qUartRxDataQ)))
 8000976:	4638      	mov	r0, r7
 8000978:	f7ff fe13 	bl	80005a2 <IsQueueFull>
 800097c:	b110      	cbz	r0, 8000984 <USART3_IRQHandler+0x84>
						ClearQueue(&(stUartProperty[UART_IF_DEV_3].qUartRxDataQ));
 800097e:	4638      	mov	r0, r7
 8000980:	f7ff fe55 	bl	800062e <ClearQueue>
				EnQueue(&(stUartProperty[UART_IF_DEV_3].qUartRxDataQ),(char)stUartProperty[UART_IF_DEV_3].u8UARTDmaRX_Buffer[i]);
 8000984:	eb04 0308 	add.w	r3, r4, r8
 8000988:	4638      	mov	r0, r7
 800098a:	5cf1      	ldrb	r1, [r6, r3]
 800098c:	f7ff fe18 	bl	80005c0 <EnQueue>
			for(i = 0; i<stUartProperty[UART_IF_DEV_3].u32UARTRxDataLength;i++)
 8000990:	3401      	adds	r4, #1
 8000992:	e7de      	b.n	8000952 <USART3_IRQHandler+0x52>
    	HAL_UART_IRQHandler(&(stUartProperty[UART_IF_DEV_3].hUardHandle));
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <USART3_IRQHandler+0xa0>)
 8000996:	f001 fe7f 	bl	8002698 <HAL_UART_IRQHandler>
 800099a:	e7e8      	b.n	800096e <USART3_IRQHandler+0x6e>
 800099c:	20000e98 	.word	0x20000e98
 80009a0:	200020bc 	.word	0x200020bc
 80009a4:	20003ce4 	.word	0x20003ce4
 80009a8:	20002134 	.word	0x20002134

080009ac <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
 80009ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  volatile uint32_t temp = 0,tmp_flag;

  int i = 0;

  tmp_flag = READ_BIT(stUartProperty[UART_IF_DEV_4].hUardHandle.Instance->ISR, USART_ISR_IDLE);
 80009b0:	f641 3334 	movw	r3, #6964	; 0x1b34
 80009b4:	4d22      	ldr	r5, [pc, #136]	; (8000a40 <UART4_IRQHandler+0x94>)
  volatile uint32_t temp = 0,tmp_flag;
 80009b6:	2400      	movs	r4, #0
  tmp_flag = READ_BIT(stUartProperty[UART_IF_DEV_4].hUardHandle.Instance->ISR, USART_ISR_IDLE);
 80009b8:	58eb      	ldr	r3, [r5, r3]
  volatile uint32_t temp = 0,tmp_flag;
 80009ba:	9400      	str	r4, [sp, #0]
  tmp_flag = READ_BIT(stUartProperty[UART_IF_DEV_4].hUardHandle.Instance->ISR, USART_ISR_IDLE);
 80009bc:	69da      	ldr	r2, [r3, #28]
 80009be:	f002 0210 	and.w	r2, r2, #16
 80009c2:	9201      	str	r2, [sp, #4]
  if((tmp_flag != RESET))
 80009c4:	9a01      	ldr	r2, [sp, #4]
 80009c6:	b33a      	cbz	r2, 8000a18 <UART4_IRQHandler+0x6c>
  {

	  	  __HAL_UART_CLEAR_IDLEFLAG(&(stUartProperty[UART_IF_DEV_4].hUardHandle));
 80009c8:	2210      	movs	r2, #16
 80009ca:	621a      	str	r2, [r3, #32]
			temp = stUartProperty[UART_IF_DEV_4].hUardHandle.Instance->ISR;
 80009cc:	69da      	ldr	r2, [r3, #28]
 80009ce:	9200      	str	r2, [sp, #0]
			temp = stUartProperty[UART_IF_DEV_4].hUardHandle.Instance->RDR;
 80009d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			HAL_UART_DMAStop(&(stUartProperty[UART_IF_DEV_4].hUardHandle));
 80009d2:	481c      	ldr	r0, [pc, #112]	; (8000a44 <UART4_IRQHandler+0x98>)
			temp = stUartProperty[UART_IF_DEV_4].hUardHandle.Instance->RDR;
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	9300      	str	r3, [sp, #0]
			HAL_UART_DMAStop(&(stUartProperty[UART_IF_DEV_4].hUardHandle));
 80009d8:	f001 fdc2 	bl	8002560 <HAL_UART_DMAStop>
			//__HAL_DMA_DISABLE(UART1_Handler.hdmarx);

			stUartProperty[UART_IF_DEV_4].u32UARTRxDataLength = UART_RX_BUFFERSIZE - hdma_usart3_rx.Instance->CNDTR;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <UART4_IRQHandler+0x9c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f242 4230 	movw	r2, #9264	; 0x2430
 80009e6:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80009ea:	50ab      	str	r3, [r5, r2]
			if(stUartProperty[UART_IF_DEV_4].u32UARTRxDataLength == UART_RX_BUFFERSIZE)
 80009ec:	58ab      	ldr	r3, [r5, r2]
 80009ee:	2b28      	cmp	r3, #40	; 0x28
 80009f0:	d013      	beq.n	8000a1a <UART4_IRQHandler+0x6e>
			{
				//let HAL_UART_RxCpltCallback function do the job.
				return ;
			}

			for(i = 0; i<stUartProperty[UART_IF_DEV_4].u32UARTRxDataLength;i++)
 80009f2:	4f16      	ldr	r7, [pc, #88]	; (8000a4c <UART4_IRQHandler+0xa0>)
			{
				if(IsQueueFull(&(stUartProperty[UART_IF_DEV_4].qUartRxDataQ)))
					{
						ClearQueue(&(stUartProperty[UART_IF_DEV_4].qUartRxDataQ));
					}
				EnQueue(&(stUartProperty[UART_IF_DEV_4].qUartRxDataQ),(char)stUartProperty[UART_IF_DEV_4].u8UARTDmaRX_Buffer[i]);
 80009f4:	f641 38ac 	movw	r8, #7084	; 0x1bac
				if(IsQueueFull(&(stUartProperty[UART_IF_DEV_4].qUartRxDataQ)))
 80009f8:	f2a7 76dc 	subw	r6, r7, #2012	; 0x7dc
			for(i = 0; i<stUartProperty[UART_IF_DEV_4].u32UARTRxDataLength;i++)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	42a3      	cmp	r3, r4
 8000a00:	d80e      	bhi.n	8000a20 <UART4_IRQHandler+0x74>
			}
			memset(stUartProperty[UART_IF_DEV_4].u8UARTDmaRX_Buffer,0,UART_RX_BUFFERSIZE);
 8000a02:	2228      	movs	r2, #40	; 0x28
 8000a04:	2100      	movs	r1, #0
 8000a06:	4812      	ldr	r0, [pc, #72]	; (8000a50 <UART4_IRQHandler+0xa4>)
 8000a08:	f003 fe69 	bl	80046de <memset>
			HAL_UART_Receive_DMA(&stUartProperty[UART_IF_DEV_4].hUardHandle, stUartProperty[UART_IF_DEV_4].u8UARTDmaRX_Buffer, UART_RX_BUFFERSIZE);
 8000a0c:	4910      	ldr	r1, [pc, #64]	; (8000a50 <UART4_IRQHandler+0xa4>)
 8000a0e:	2228      	movs	r2, #40	; 0x28
 8000a10:	f1a1 0078 	sub.w	r0, r1, #120	; 0x78
 8000a14:	f001 fd60 	bl	80024d8 <HAL_UART_Receive_DMA>

  }

  UNUSED(temp);
 8000a18:	9b00      	ldr	r3, [sp, #0]
}
 8000a1a:	b002      	add	sp, #8
 8000a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if(IsQueueFull(&(stUartProperty[UART_IF_DEV_4].qUartRxDataQ)))
 8000a20:	4630      	mov	r0, r6
 8000a22:	f7ff fdbe 	bl	80005a2 <IsQueueFull>
 8000a26:	b110      	cbz	r0, 8000a2e <UART4_IRQHandler+0x82>
						ClearQueue(&(stUartProperty[UART_IF_DEV_4].qUartRxDataQ));
 8000a28:	4630      	mov	r0, r6
 8000a2a:	f7ff fe00 	bl	800062e <ClearQueue>
				EnQueue(&(stUartProperty[UART_IF_DEV_4].qUartRxDataQ),(char)stUartProperty[UART_IF_DEV_4].u8UARTDmaRX_Buffer[i]);
 8000a2e:	eb04 0308 	add.w	r3, r4, r8
 8000a32:	4630      	mov	r0, r6
 8000a34:	5ce9      	ldrb	r1, [r5, r3]
 8000a36:	f7ff fdc3 	bl	80005c0 <EnQueue>
			for(i = 0; i<stUartProperty[UART_IF_DEV_4].u32UARTRxDataLength;i++)
 8000a3a:	3401      	adds	r4, #1
 8000a3c:	e7de      	b.n	80009fc <UART4_IRQHandler+0x50>
 8000a3e:	bf00      	nop
 8000a40:	20000e98 	.word	0x20000e98
 8000a44:	200029cc 	.word	0x200029cc
 8000a48:	20003ce4 	.word	0x20003ce4
 8000a4c:	200032c8 	.word	0x200032c8
 8000a50:	20002a44 	.word	0x20002a44

08000a54 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
 8000a54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  volatile uint32_t temp = 0,tmp_flag;

  int i = 0;

  tmp_flag = READ_BIT(stUartProperty[UART_IF_DEV_5].hUardHandle.Instance->ISR, USART_ISR_IDLE);
 8000a58:	f242 4344 	movw	r3, #9284	; 0x2444
 8000a5c:	4e22      	ldr	r6, [pc, #136]	; (8000ae8 <UART5_IRQHandler+0x94>)
  volatile uint32_t temp = 0,tmp_flag;
 8000a5e:	2400      	movs	r4, #0
  tmp_flag = READ_BIT(stUartProperty[UART_IF_DEV_5].hUardHandle.Instance->ISR, USART_ISR_IDLE);
 8000a60:	58f3      	ldr	r3, [r6, r3]
  volatile uint32_t temp = 0,tmp_flag;
 8000a62:	9400      	str	r4, [sp, #0]
  tmp_flag = READ_BIT(stUartProperty[UART_IF_DEV_5].hUardHandle.Instance->ISR, USART_ISR_IDLE);
 8000a64:	69da      	ldr	r2, [r3, #28]
 8000a66:	f002 0210 	and.w	r2, r2, #16
 8000a6a:	9201      	str	r2, [sp, #4]
  if((tmp_flag != RESET))
 8000a6c:	9a01      	ldr	r2, [sp, #4]
 8000a6e:	b33a      	cbz	r2, 8000ac0 <UART5_IRQHandler+0x6c>
  {

	  	  __HAL_UART_CLEAR_IDLEFLAG(&(stUartProperty[UART_IF_DEV_5].hUardHandle));
 8000a70:	2210      	movs	r2, #16
 8000a72:	621a      	str	r2, [r3, #32]
			temp = stUartProperty[UART_IF_DEV_5].hUardHandle.Instance->ISR;
 8000a74:	69da      	ldr	r2, [r3, #28]
 8000a76:	9200      	str	r2, [sp, #0]
			temp = stUartProperty[UART_IF_DEV_5].hUardHandle.Instance->RDR;
 8000a78:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			HAL_UART_DMAStop(&(stUartProperty[UART_IF_DEV_5].hUardHandle));
 8000a7a:	481c      	ldr	r0, [pc, #112]	; (8000aec <UART5_IRQHandler+0x98>)
			temp = stUartProperty[UART_IF_DEV_5].hUardHandle.Instance->RDR;
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	9300      	str	r3, [sp, #0]
			HAL_UART_DMAStop(&(stUartProperty[UART_IF_DEV_5].hUardHandle));
 8000a80:	f001 fd6e 	bl	8002560 <HAL_UART_DMAStop>
			//__HAL_DMA_DISABLE(UART1_Handler.hdmarx);

			stUartProperty[UART_IF_DEV_5].u32UARTRxDataLength = UART_RX_BUFFERSIZE - hdma_usart3_rx.Instance->CNDTR;
 8000a84:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <UART5_IRQHandler+0x9c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	685a      	ldr	r2, [r3, #4]
 8000a8a:	f506 5335 	add.w	r3, r6, #11584	; 0x2d40
 8000a8e:	f1c2 0228 	rsb	r2, r2, #40	; 0x28
 8000a92:	601a      	str	r2, [r3, #0]
			if(stUartProperty[UART_IF_DEV_5].u32UARTRxDataLength == UART_RX_BUFFERSIZE)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	2a28      	cmp	r2, #40	; 0x28
 8000a98:	461d      	mov	r5, r3
 8000a9a:	d012      	beq.n	8000ac2 <UART5_IRQHandler+0x6e>
				return ;
			}

			for(i = 0; i<stUartProperty[UART_IF_DEV_5].u32UARTRxDataLength;i++)
			{
				if(IsQueueFull(&(stUartProperty[UART_IF_DEV_5].qUartRxDataQ)))
 8000a9c:	f2a3 77dc 	subw	r7, r3, #2012	; 0x7dc
					{
						ClearQueue(&(stUartProperty[UART_IF_DEV_5].qUartRxDataQ));
					}
				EnQueue(&(stUartProperty[UART_IF_DEV_5].qUartRxDataQ),(char)stUartProperty[UART_IF_DEV_5].u8UARTDmaRX_Buffer[i]);
 8000aa0:	f242 48bc 	movw	r8, #9404	; 0x24bc
			for(i = 0; i<stUartProperty[UART_IF_DEV_5].u32UARTRxDataLength;i++)
 8000aa4:	682b      	ldr	r3, [r5, #0]
 8000aa6:	42a3      	cmp	r3, r4
 8000aa8:	d80e      	bhi.n	8000ac8 <UART5_IRQHandler+0x74>
			}
			memset(stUartProperty[UART_IF_DEV_5].u8UARTDmaRX_Buffer,0,UART_RX_BUFFERSIZE);
 8000aaa:	2228      	movs	r2, #40	; 0x28
 8000aac:	2100      	movs	r1, #0
 8000aae:	4811      	ldr	r0, [pc, #68]	; (8000af4 <UART5_IRQHandler+0xa0>)
 8000ab0:	f003 fe15 	bl	80046de <memset>

			HAL_UART_Receive_DMA(&stUartProperty[UART_IF_DEV_5].hUardHandle, stUartProperty[UART_IF_DEV_5].u8UARTDmaRX_Buffer, UART_RX_BUFFERSIZE);
 8000ab4:	490f      	ldr	r1, [pc, #60]	; (8000af4 <UART5_IRQHandler+0xa0>)
 8000ab6:	2228      	movs	r2, #40	; 0x28
 8000ab8:	f1a1 0078 	sub.w	r0, r1, #120	; 0x78
 8000abc:	f001 fd0c 	bl	80024d8 <HAL_UART_Receive_DMA>

  }

  UNUSED(temp);
 8000ac0:	9b00      	ldr	r3, [sp, #0]

}
 8000ac2:	b002      	add	sp, #8
 8000ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if(IsQueueFull(&(stUartProperty[UART_IF_DEV_5].qUartRxDataQ)))
 8000ac8:	4638      	mov	r0, r7
 8000aca:	f7ff fd6a 	bl	80005a2 <IsQueueFull>
 8000ace:	b110      	cbz	r0, 8000ad6 <UART5_IRQHandler+0x82>
						ClearQueue(&(stUartProperty[UART_IF_DEV_5].qUartRxDataQ));
 8000ad0:	4638      	mov	r0, r7
 8000ad2:	f7ff fdac 	bl	800062e <ClearQueue>
				EnQueue(&(stUartProperty[UART_IF_DEV_5].qUartRxDataQ),(char)stUartProperty[UART_IF_DEV_5].u8UARTDmaRX_Buffer[i]);
 8000ad6:	eb04 0308 	add.w	r3, r4, r8
 8000ada:	4638      	mov	r0, r7
 8000adc:	5cf1      	ldrb	r1, [r6, r3]
 8000ade:	f7ff fd6f 	bl	80005c0 <EnQueue>
			for(i = 0; i<stUartProperty[UART_IF_DEV_5].u32UARTRxDataLength;i++)
 8000ae2:	3401      	adds	r4, #1
 8000ae4:	e7de      	b.n	8000aa4 <UART5_IRQHandler+0x50>
 8000ae6:	bf00      	nop
 8000ae8:	20000e98 	.word	0x20000e98
 8000aec:	200032dc 	.word	0x200032dc
 8000af0:	20003ce4 	.word	0x20003ce4
 8000af4:	20003354 	.word	0x20003354

08000af8 <tszUART_Init>:
	  uint32_t				u32BaudRate,
	  UART_IF_HwFlowCtl_t	enuHWFlowCtl,
	  UART_IF_StopBits_t	enuStopBits,
	  UART_IF_Parity_t		enuParity
	  )
{
 8000af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000afc:	4699      	mov	r9, r3
	UART_IF_ErrorCode_t reCode = UART_IF_ERR_OK;
	//to do, should judge other parameter 
	if((u32BaudRate > 1152000)||(u32BaudRate < 2400))
 8000afe:	4b30      	ldr	r3, [pc, #192]	; (8000bc0 <tszUART_Init+0xc8>)
{
 8000b00:	4690      	mov	r8, r2
	if((u32BaudRate > 1152000)||(u32BaudRate < 2400))
 8000b02:	f5a1 6216 	sub.w	r2, r1, #2400	; 0x960
 8000b06:	429a      	cmp	r2, r3
{
 8000b08:	4604      	mov	r4, r0
 8000b0a:	460d      	mov	r5, r1
	if((u32BaudRate > 1152000)||(u32BaudRate < 2400))
 8000b0c:	d852      	bhi.n	8000bb4 <tszUART_Init+0xbc>
	{
		reCode = UART_IF_ERR_PARAM;
		return reCode;
	}
	if((enuDevice > UART_IF_DEV_5)||(enuDevice < UART_IF_DEV_1))
 8000b0e:	2804      	cmp	r0, #4
 8000b10:	d850      	bhi.n	8000bb4 <tszUART_Init+0xbc>
	{
		reCode = UART_IF_ERR_PARAM;
		return reCode;
	}
	if(stUartProperty[enuDevice].bInit == false)
 8000b12:	4e2c      	ldr	r6, [pc, #176]	; (8000bc4 <tszUART_Init+0xcc>)
 8000b14:	f44f 6211 	mov.w	r2, #2320	; 0x910
 8000b18:	fb02 f700 	mul.w	r7, r2, r0
 8000b1c:	19f0      	adds	r0, r6, r7
 8000b1e:	f890 190d 	ldrb.w	r1, [r0, #2317]	; 0x90d
 8000b22:	2900      	cmp	r1, #0
 8000b24:	d149      	bne.n	8000bba <tszUART_Init+0xc2>
		{
			memset(&stUartProperty[enuDevice],0,sizeof(UartProperty));
 8000b26:	f003 fdda 	bl	80046de <memset>
	else
		{
			reCode = UART_IF_ERR_INIT;
			return reCode;
		}
	stUartProperty[enuDevice].enUartId = enuDevice;
 8000b2a:	55f4      	strb	r4, [r6, r7]
	if(enuDevice == UART_IF_DEV_1)
 8000b2c:	bb64      	cbnz	r4, 8000b88 <tszUART_Init+0x90>
	{
		stUartProperty[enuDevice].hUardHandle.Instance = USART1;
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <tszUART_Init+0xd0>)
 8000b30:	6073      	str	r3, [r6, #4]
	else
	{
		reCode = UART_IF_ERR_PARAM;
		return reCode;
	}
	stUartProperty[enuDevice].hUardHandle.Init.BaudRate = u32BaudRate;				    //bound
 8000b32:	f44f 6311 	mov.w	r3, #2320	; 0x910
 8000b36:	fb03 6404 	mla	r4, r3, r4, r6
	stUartProperty[enuDevice].hUardHandle.Init.WordLength = UART_WORDLENGTH_8B;   //8bit
	stUartProperty[enuDevice].hUardHandle.Init.StopBits = enuStopBits;	    //stop
	stUartProperty[enuDevice].hUardHandle.Init.Parity = enuParity;		    //Parity check
 8000b3a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	stUartProperty[enuDevice].hUardHandle.Init.BaudRate = u32BaudRate;				    //bound
 8000b3e:	60a5      	str	r5, [r4, #8]
	stUartProperty[enuDevice].hUardHandle.Init.Parity = enuParity;		    //Parity check
 8000b40:	6163      	str	r3, [r4, #20]
	stUartProperty[enuDevice].hUardHandle.Init.WordLength = UART_WORDLENGTH_8B;   //8bit
 8000b42:	2500      	movs	r5, #0
	stUartProperty[enuDevice].hUardHandle.Init.HwFlowCtl = enuHWFlowCtl;   //HwFlow
	stUartProperty[enuDevice].hUardHandle.Init.Mode = UART_MODE_TX_RX;		    //Mode
 8000b44:	230c      	movs	r3, #12
	stUartProperty[enuDevice].hUardHandle.Init.HwFlowCtl = enuHWFlowCtl;   //HwFlow
 8000b46:	f8c4 801c 	str.w	r8, [r4, #28]
	stUartProperty[enuDevice].hUardHandle.Init.OverSampling = UART_OVERSAMPLING_16;
	InitQueue(&(stUartProperty[enuDevice].qUartRxDataQ));
 8000b4a:	f507 7092 	add.w	r0, r7, #292	; 0x124
	HAL_UART_Init(&(stUartProperty[enuDevice].hUardHandle));	
 8000b4e:	f107 0804 	add.w	r8, r7, #4
	stUartProperty[enuDevice].hUardHandle.Init.Mode = UART_MODE_TX_RX;		    //Mode
 8000b52:	61a3      	str	r3, [r4, #24]
	HAL_UART_Init(&(stUartProperty[enuDevice].hUardHandle));	
 8000b54:	44b0      	add	r8, r6
	stUartProperty[enuDevice].hUardHandle.Init.WordLength = UART_WORDLENGTH_8B;   //8bit
 8000b56:	60e5      	str	r5, [r4, #12]
	stUartProperty[enuDevice].hUardHandle.Init.StopBits = enuStopBits;	    //stop
 8000b58:	f8c4 9010 	str.w	r9, [r4, #16]
	stUartProperty[enuDevice].hUardHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	6225      	str	r5, [r4, #32]
	InitQueue(&(stUartProperty[enuDevice].qUartRxDataQ));
 8000b5e:	4430      	add	r0, r6
 8000b60:	f7ff fd16 	bl	8000590 <InitQueue>
	HAL_UART_Init(&(stUartProperty[enuDevice].hUardHandle));	
 8000b64:	4640      	mov	r0, r8
 8000b66:	f002 f8e3 	bl	8002d30 <HAL_UART_Init>
	HAL_UART_Receive_DMA(&(stUartProperty[enuDevice].hUardHandle), stUartProperty[enuDevice].u8UARTDmaRX_Buffer, 1);
 8000b6a:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4431      	add	r1, r6
 8000b72:	4640      	mov	r0, r8
 8000b74:	f001 fcb0 	bl	80024d8 <HAL_UART_Receive_DMA>
//		{
//			xSemaphoreGive( stUartProperty[enuDevice].xUart_Rx_Muxtex);
//		}
	
	FREERTOS_CUSTOMIZE_RESET_EVENT(stUartProperty[enuDevice].eUARTDMATx_Done_Event);	
    stUartProperty[enuDevice].bInit = true;
 8000b78:	2301      	movs	r3, #1
	FREERTOS_CUSTOMIZE_RESET_EVENT(stUartProperty[enuDevice].eUARTDMATx_Done_Event);	
 8000b7a:	f884 590c 	strb.w	r5, [r4, #2316]	; 0x90c
    stUartProperty[enuDevice].bInit = true;
 8000b7e:	f884 390d 	strb.w	r3, [r4, #2317]	; 0x90d
	return reCode;
 8000b82:	4628      	mov	r0, r5
 8000b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	else if (enuDevice == UART_IF_DEV_2)
 8000b88:	2c01      	cmp	r4, #1
 8000b8a:	d103      	bne.n	8000b94 <tszUART_Init+0x9c>
		stUartProperty[enuDevice].hUardHandle.Instance = USART2;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <tszUART_Init+0xd4>)
 8000b8e:	f8c6 3914 	str.w	r3, [r6, #2324]	; 0x914
 8000b92:	e7ce      	b.n	8000b32 <tszUART_Init+0x3a>
	else if (enuDevice == UART_IF_DEV_3)
 8000b94:	2c02      	cmp	r4, #2
 8000b96:	d104      	bne.n	8000ba2 <tszUART_Init+0xaa>
		stUartProperty[enuDevice].hUardHandle.Instance = USART3;
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <tszUART_Init+0xd8>)
 8000b9a:	f241 2324 	movw	r3, #4644	; 0x1224
		stUartProperty[enuDevice].hUardHandle.Instance = UART5;
 8000b9e:	50f2      	str	r2, [r6, r3]
 8000ba0:	e7c7      	b.n	8000b32 <tszUART_Init+0x3a>
	else if (enuDevice == UART_IF_DEV_4)
 8000ba2:	2c03      	cmp	r4, #3
		stUartProperty[enuDevice].hUardHandle.Instance = UART4;
 8000ba4:	bf0b      	itete	eq
 8000ba6:	4a0b      	ldreq	r2, [pc, #44]	; (8000bd4 <tszUART_Init+0xdc>)
		stUartProperty[enuDevice].hUardHandle.Instance = UART5;
 8000ba8:	4a0b      	ldrne	r2, [pc, #44]	; (8000bd8 <tszUART_Init+0xe0>)
		stUartProperty[enuDevice].hUardHandle.Instance = UART4;
 8000baa:	f641 3334 	movweq	r3, #6964	; 0x1b34
		stUartProperty[enuDevice].hUardHandle.Instance = UART5;
 8000bae:	f242 4344 	movwne	r3, #9284	; 0x2444
 8000bb2:	e7f4      	b.n	8000b9e <tszUART_Init+0xa6>
		return reCode;
 8000bb4:	2002      	movs	r0, #2
 8000bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return reCode;
 8000bba:	2001      	movs	r0, #1
}
 8000bbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bc0:	00118aa0 	.word	0x00118aa0
 8000bc4:	20000e98 	.word	0x20000e98
 8000bc8:	40013800 	.word	0x40013800
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	40004800 	.word	0x40004800
 8000bd4:	40004c00 	.word	0x40004c00
 8000bd8:	40005000 	.word	0x40005000

08000bdc <tszUART_Read>:
	  uint8_t			   *pu8Buffer,
	  uint32_t				u32ReadLength,
	  uint32_t			   *pu32BytesReceived,
	  uint32_t				u32Timeout
	  )
{
 8000bdc:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8000be0:	4690      	mov	r8, r2
 8000be2:	461e      	mov	r6, r3
	uint8_t Id = 0;		
	uint32_t u32DeleyCount = 0 ;//in MS
	uint32_t u32RecCount = 0 ;
	bool bReady = false;

	if((NULL == pu8Buffer)||(u32ReadLength <=0)||(NULL == pu32BytesReceived))
 8000be4:	460f      	mov	r7, r1
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d04b      	beq.n	8000c82 <tszUART_Read+0xa6>
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	d049      	beq.n	8000c82 <tszUART_Read+0xa6>
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d047      	beq.n	8000c82 <tszUART_Read+0xa6>
	{
		enuRetVal = UART_IF_ERR_PARAM;
		return enuRetVal;
	}
	
	if(enuDevice == UART_IF_DEV_1)
 8000bf2:	b138      	cbz	r0, 8000c04 <tszUART_Read+0x28>
	{
		Id = 0;
	}
	else if(enuDevice == UART_IF_DEV_2)
 8000bf4:	2801      	cmp	r0, #1
 8000bf6:	d005      	beq.n	8000c04 <tszUART_Read+0x28>
	{
		Id = 1;
	}
	else if(enuDevice == UART_IF_DEV_3)
 8000bf8:	2802      	cmp	r0, #2
 8000bfa:	d003      	beq.n	8000c04 <tszUART_Read+0x28>
	{
		Id = 2;
	}
	else if(enuDevice == UART_IF_DEV_4)
 8000bfc:	2803      	cmp	r0, #3
 8000bfe:	d001      	beq.n	8000c04 <tszUART_Read+0x28>
	{
		Id = 3;
	}
	else if(enuDevice == UART_IF_DEV_5)
 8000c00:	2804      	cmp	r0, #4
 8000c02:	d13e      	bne.n	8000c82 <tszUART_Read+0xa6>
	{
		enuRetVal = UART_IF_ERR_PARAM;
		return enuRetVal;
	}

	if(stUartProperty[Id].bInit == false)
 8000c04:	f44f 6311 	mov.w	r3, #2320	; 0x910
 8000c08:	4c22      	ldr	r4, [pc, #136]	; (8000c94 <tszUART_Read+0xb8>)
 8000c0a:	4358      	muls	r0, r3
 8000c0c:	1823      	adds	r3, r4, r0
 8000c0e:	f893 390d 	ldrb.w	r3, [r3, #2317]	; 0x90d
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d038      	beq.n	8000c88 <tszUART_Read+0xac>
	
//	if(xSemaphoreTake( stUartProperty[Id].xUart_Rx_Muxtex, ( TickType_t ) 0 ) == pdTRUE)
//	{
			do{
			//if there is data and receive not finished
			while((GetLength(&(stUartProperty[Id].qUartRxDataQ))>0)&&(!bReady))
 8000c16:	f04f 0a00 	mov.w	sl, #0
 8000c1a:	f500 7092 	add.w	r0, r0, #292	; 0x124
 8000c1e:	4404      	add	r4, r0
 8000c20:	4655      	mov	r5, sl
 8000c22:	46d3      	mov	fp, sl
 8000c24:	4620      	mov	r0, r4
 8000c26:	f7ff fd0b 	bl	8000640 <GetLength>
 8000c2a:	b170      	cbz	r0, 8000c4a <tszUART_Read+0x6e>
 8000c2c:	f1ba 0f00 	cmp.w	sl, #0
 8000c30:	d11a      	bne.n	8000c68 <tszUART_Read+0x8c>
//			while((!bReady))
			{
				//put into read buffer
				pu8Buffer[u32RecCount] = (uint8_t)DeQueue(&(stUartProperty[Id].qUartRxDataQ));
 8000c32:	4620      	mov	r0, r4
 8000c34:	f7ff fce1 	bl	80005fa <DeQueue>
 8000c38:	5578      	strb	r0, [r7, r5]
				u32RecCount++;
 8000c3a:	3501      	adds	r5, #1
				//if read buffer if full
				if(u32RecCount == u32ReadLength)
 8000c3c:	eba8 0305 	sub.w	r3, r8, r5
 8000c40:	f1d3 0a00 	rsbs	sl, r3, #0
 8000c44:	eb4a 0a03 	adc.w	sl, sl, r3
 8000c48:	e7ec      	b.n	8000c24 <tszUART_Read+0x48>
				{
				bReady = true;
				}
			}
			if(!bReady)
 8000c4a:	f1ba 0f00 	cmp.w	sl, #0
 8000c4e:	d10b      	bne.n	8000c68 <tszUART_Read+0x8c>
			{
				u32DeleyCount++;
				//delay_ms(1);
				if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c50:	f002 ffa8 	bl	8003ba4 <xTaskGetSchedulerState>
 8000c54:	2801      	cmp	r0, #1
				u32DeleyCount++;
 8000c56:	f10b 0b01 	add.w	fp, fp, #1
				if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c5a:	d00f      	beq.n	8000c7c <tszUART_Read+0xa0>
				{
					osDelay(1);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f002 f9f0 	bl	8003042 <osDelay>
				{
					HAL_Delay(1);
				}

			}
		}while((!bReady)&&(u32DeleyCount <= u32Timeout));
 8000c62:	9b08      	ldr	r3, [sp, #32]
 8000c64:	459b      	cmp	fp, r3
 8000c66:	d9dd      	bls.n	8000c24 <tszUART_Read+0x48>

		*pu32BytesReceived = u32RecCount ;
 8000c68:	6035      	str	r5, [r6, #0]
		if(bReady)
 8000c6a:	f1ba 0f00 	cmp.w	sl, #0
 8000c6e:	d10e      	bne.n	8000c8e <tszUART_Read+0xb2>
		else if((u32RecCount > 0)&&(!bReady))
		{
			enuRetVal = UART_IF_ERR_TIMEOUT;
		}
		else
			enuRetVal = UART_IF_ERR_UNKNOWN;
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	bf14      	ite	ne
 8000c74:	2005      	movne	r0, #5
 8000c76:	2006      	moveq	r0, #6
 8000c78:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
					HAL_Delay(1);
 8000c7c:	f000 f8b6 	bl	8000dec <HAL_Delay>
 8000c80:	e7ef      	b.n	8000c62 <tszUART_Read+0x86>
		return enuRetVal;
 8000c82:	2002      	movs	r0, #2
 8000c84:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
		return enuRetVal;
 8000c88:	2001      	movs	r0, #1
 8000c8a:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
			enuRetVal = UART_IF_ERR_OK;
 8000c8e:	2000      	movs	r0, #0
 8000c90:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8000c94:	20000e98 	.word	0x20000e98

08000c98 <tszUART_Write>:
	  const uint8_t		   *pu8Data,
	  uint32_t				u32DataLength,
	  uint32_t				u32Timeout,
	  UART_IF_SENDWAY_t     enuWay
	  )
{
 8000c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	UART_IF_ErrorCode_t enuRetVal = UART_IF_ERR_OK;
	uint8_t Id = 0;

	if(enuDevice == UART_IF_DEV_1)
 8000c9c:	4607      	mov	r7, r0
{
 8000c9e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
	if(enuDevice == UART_IF_DEV_1)
 8000ca2:	b138      	cbz	r0, 8000cb4 <tszUART_Write+0x1c>
	{
		Id = 0;
	}
	else if(enuDevice == UART_IF_DEV_2)
 8000ca4:	2801      	cmp	r0, #1
 8000ca6:	d005      	beq.n	8000cb4 <tszUART_Write+0x1c>
	{
		Id = 1;
	}
	else if(enuDevice == UART_IF_DEV_3)
 8000ca8:	2802      	cmp	r0, #2
 8000caa:	d003      	beq.n	8000cb4 <tszUART_Write+0x1c>
	{
		Id = 2;
	}
	else if(enuDevice == UART_IF_DEV_4)
 8000cac:	2803      	cmp	r0, #3
 8000cae:	d001      	beq.n	8000cb4 <tszUART_Write+0x1c>
	{
		Id = 3;
	}
	else if(enuDevice == UART_IF_DEV_5)
 8000cb0:	2804      	cmp	r0, #4
 8000cb2:	d166      	bne.n	8000d82 <tszUART_Write+0xea>
	{
		enuRetVal = UART_IF_ERR_PARAM;
		return enuRetVal;
	}

	if(stUartProperty[Id].bInit == false)
 8000cb4:	4d35      	ldr	r5, [pc, #212]	; (8000d8c <tszUART_Write+0xf4>)
 8000cb6:	f44f 6411 	mov.w	r4, #2320	; 0x910
 8000cba:	437c      	muls	r4, r7
 8000cbc:	eb05 0b04 	add.w	fp, r5, r4
 8000cc0:	46a8      	mov	r8, r5
 8000cc2:	f89b 390d 	ldrb.w	r3, [fp, #2317]	; 0x90d
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d05d      	beq.n	8000d86 <tszUART_Write+0xee>
		return enuRetVal;
	}
//	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
//	if(xSemaphoreTake( stUartProperty[Id].xUart_Tx_Muxtex, ( TickType_t ) u32Timeout ) == pdTRUE)
//	{
		if(enuWay == UART_IF_SEND_WAY_REG)
 8000cca:	b956      	cbnz	r6, 8000ce2 <tszUART_Write+0x4a>
		 	{
		 		tszUART_Write_Reg(&(stUartProperty[Id].hUardHandle),pu8Data,u32DataLength);
 8000ccc:	1d20      	adds	r0, r4, #4
	HAL_UART_Transmit(huart, (uint8_t *)pu8Data, u32DataLength, 0xFFFF);
 8000cce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cd2:	b292      	uxth	r2, r2
 8000cd4:	4428      	add	r0, r5
 8000cd6:	f001 ffa2 	bl	8002c1e <HAL_UART_Transmit>
//		}
//
//	}

//	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
	return enuRetVal;
 8000cda:	2000      	movs	r0, #0
}
 8000cdc:	b003      	add	sp, #12
 8000cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if(enuWay == UART_IF_SEND_WAY_DMA)
 8000ce2:	2e02      	cmp	r6, #2
 8000ce4:	d1f9      	bne.n	8000cda <tszUART_Write+0x42>
		 		tszUART_Write_Dma(Id,&(stUartProperty[Id].hUardHandle),pu8Data,u32DataLength);
 8000ce6:	1d26      	adds	r6, r4, #4
	u32UartTxResidue = u32DataLength % UART_TX_BUFFERSIZE ;
 8000ce8:	f002 097f 	and.w	r9, r2, #127	; 0x7f
	if(u32UartTxInteg > 0)
 8000cec:	09d2      	lsrs	r2, r2, #7
		 		tszUART_Write_Dma(Id,&(stUartProperty[Id].hUardHandle),pu8Data,u32DataLength);
 8000cee:	442e      	add	r6, r5
	if(u32UartTxInteg > 0)
 8000cf0:	d045      	beq.n	8000d7e <tszUART_Write+0xe6>
 8000cf2:	eb01 13c2 	add.w	r3, r1, r2, lsl #7
 8000cf6:	9301      	str	r3, [sp, #4]
 8000cf8:	460d      	mov	r5, r1
			memset(stUartProperty[enuDevice].u8UARTDmaTX_Buffer,0,UART_TX_BUFFERSIZE);
 8000cfa:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8000cfe:	eb08 0a03 	add.w	sl, r8, r3
 8000d02:	2280      	movs	r2, #128	; 0x80
 8000d04:	2100      	movs	r1, #0
 8000d06:	4650      	mov	r0, sl
 8000d08:	f003 fce9 	bl	80046de <memset>
			memcpy(stUartProperty[enuDevice].u8UARTDmaTX_Buffer,p8UartTxData,UART_TX_BUFFERSIZE);
 8000d0c:	2280      	movs	r2, #128	; 0x80
 8000d0e:	4629      	mov	r1, r5
 8000d10:	4650      	mov	r0, sl
 8000d12:	f003 fcd9 	bl	80046c8 <memcpy>
			HAL_UART_Transmit_DMA(huart,stUartProperty[enuDevice].u8UARTDmaTX_Buffer,UART_TX_BUFFERSIZE);
 8000d16:	2280      	movs	r2, #128	; 0x80
 8000d18:	4651      	mov	r1, sl
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	f001 fba0 	bl	8002460 <HAL_UART_Transmit_DMA>
			FREERTOS_CUSTOMIZE_WAIT_EVENT(stUartProperty[enuDevice].eUARTDMATx_Done_Event);
 8000d20:	f89b 290c 	ldrb.w	r2, [fp, #2316]	; 0x90c
 8000d24:	2a01      	cmp	r2, #1
 8000d26:	d1fb      	bne.n	8000d20 <tszUART_Write+0x88>
		for (u32UartSendCountDma = 0; u32UartSendCountDma < u32UartTxInteg; u32UartSendCountDma++)
 8000d28:	9b01      	ldr	r3, [sp, #4]
			p8UartTxData = p8UartTxData + UART_TX_BUFFERSIZE;
 8000d2a:	3580      	adds	r5, #128	; 0x80
			FREERTOS_CUSTOMIZE_RESET_EVENT(stUartProperty[enuDevice].eUARTDMATx_Done_Event);
 8000d2c:	2200      	movs	r2, #0
		for (u32UartSendCountDma = 0; u32UartSendCountDma < u32UartTxInteg; u32UartSendCountDma++)
 8000d2e:	429d      	cmp	r5, r3
			FREERTOS_CUSTOMIZE_RESET_EVENT(stUartProperty[enuDevice].eUARTDMATx_Done_Event);
 8000d30:	f88b 290c 	strb.w	r2, [fp, #2316]	; 0x90c
		for (u32UartSendCountDma = 0; u32UartSendCountDma < u32UartTxInteg; u32UartSendCountDma++)
 8000d34:	d1e1      	bne.n	8000cfa <tszUART_Write+0x62>
	if(u32UartTxResidue > 0)
 8000d36:	f1b9 0f00 	cmp.w	r9, #0
 8000d3a:	d0ce      	beq.n	8000cda <tszUART_Write+0x42>
		memset(stUartProperty[enuDevice].u8UARTDmaTX_Buffer,0,UART_TX_BUFFERSIZE);
 8000d3c:	34a4      	adds	r4, #164	; 0xa4
 8000d3e:	4444      	add	r4, r8
 8000d40:	2280      	movs	r2, #128	; 0x80
 8000d42:	2100      	movs	r1, #0
 8000d44:	4620      	mov	r0, r4
 8000d46:	f003 fcca 	bl	80046de <memset>
 8000d4a:	1e63      	subs	r3, r4, #1
 8000d4c:	eb05 0209 	add.w	r2, r5, r9
			stUartProperty[enuDevice].u8UARTDmaTX_Buffer[u32UartSendCountDma] = (uint8_t)(*p8UartTxData++ & (uint8_t)0x00FF);
 8000d50:	f815 1b01 	ldrb.w	r1, [r5], #1
 8000d54:	f803 1f01 	strb.w	r1, [r3, #1]!
		for (u32UartSendCountDma = 0; u32UartSendCountDma < u32UartTxResidue; u32UartSendCountDma++)
 8000d58:	4295      	cmp	r5, r2
 8000d5a:	d1f9      	bne.n	8000d50 <tszUART_Write+0xb8>
		HAL_UART_Transmit_DMA(huart,stUartProperty[enuDevice].u8UARTDmaTX_Buffer,(uint16_t)u32UartTxResidue);
 8000d5c:	464a      	mov	r2, r9
 8000d5e:	4621      	mov	r1, r4
 8000d60:	4630      	mov	r0, r6
 8000d62:	f001 fb7d 	bl	8002460 <HAL_UART_Transmit_DMA>
		FREERTOS_CUSTOMIZE_WAIT_EVENT(stUartProperty[enuDevice].eUARTDMATx_Done_Event);
 8000d66:	f44f 6311 	mov.w	r3, #2320	; 0x910
 8000d6a:	fb03 8707 	mla	r7, r3, r7, r8
 8000d6e:	f897 290c 	ldrb.w	r2, [r7, #2316]	; 0x90c
 8000d72:	2a01      	cmp	r2, #1
 8000d74:	d1fb      	bne.n	8000d6e <tszUART_Write+0xd6>
		FREERTOS_CUSTOMIZE_RESET_EVENT(stUartProperty[enuDevice].eUARTDMATx_Done_Event);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f887 090c 	strb.w	r0, [r7, #2316]	; 0x90c
 8000d7c:	e7ae      	b.n	8000cdc <tszUART_Write+0x44>
	p8UartTxData = (uint8_t*)pu8Data;
 8000d7e:	460d      	mov	r5, r1
 8000d80:	e7d9      	b.n	8000d36 <tszUART_Write+0x9e>
		return enuRetVal;
 8000d82:	2002      	movs	r0, #2
 8000d84:	e7aa      	b.n	8000cdc <tszUART_Write+0x44>
		return enuRetVal;
 8000d86:	2001      	movs	r0, #1
 8000d88:	e7a8      	b.n	8000cdc <tszUART_Write+0x44>
 8000d8a:	bf00      	nop
 8000d8c:	20000e98 	.word	0x20000e98

08000d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_InitTick+0x24>)
{
 8000d94:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000da0:	f000 f884 	bl	8000eac <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	4621      	mov	r1, r4
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 f83e 	bl	8000e2c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000db0:	2000      	movs	r0, #0
 8000db2:	bd10      	pop	{r4, pc}
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_Init>:
{
 8000db8:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dba:	2003      	movs	r0, #3
 8000dbc:	f000 f824 	bl	8000e08 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc0:	200f      	movs	r0, #15
 8000dc2:	f7ff ffe5 	bl	8000d90 <HAL_InitTick>
  HAL_MspInit();
 8000dc6:	f003 f8e5 	bl	8003f94 <HAL_MspInit>
}
 8000dca:	2000      	movs	r0, #0
 8000dcc:	bd08      	pop	{r3, pc}
	...

08000dd0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000dd0:	4a02      	ldr	r2, [pc, #8]	; (8000ddc <HAL_IncTick+0xc>)
 8000dd2:	6813      	ldr	r3, [r2, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20003be8 	.word	0x20003be8

08000de0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000de0:	4b01      	ldr	r3, [pc, #4]	; (8000de8 <HAL_GetTick+0x8>)
 8000de2:	6818      	ldr	r0, [r3, #0]
}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20003be8 	.word	0x20003be8

08000dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dec:	b538      	push	{r3, r4, r5, lr}
 8000dee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000df0:	f7ff fff6 	bl	8000de0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000df6:	4605      	mov	r5, r0
  {
    wait++;
 8000df8:	bf18      	it	ne
 8000dfa:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000dfc:	f7ff fff0 	bl	8000de0 <HAL_GetTick>
 8000e00:	1b40      	subs	r0, r0, r5
 8000e02:	4284      	cmp	r4, r0
 8000e04:	d8fa      	bhi.n	8000dfc <HAL_Delay+0x10>
  {
  }
}
 8000e06:	bd38      	pop	{r3, r4, r5, pc}

08000e08 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e0a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e10:	041b      	lsls	r3, r3, #16
 8000e12:	0c1b      	lsrs	r3, r3, #16
 8000e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e18:	0200      	lsls	r0, r0, #8
 8000e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000e22:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e24:	60d3      	str	r3, [r2, #12]
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2e:	b530      	push	{r4, r5, lr}
 8000e30:	68dc      	ldr	r4, [r3, #12]
 8000e32:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e36:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	2b04      	cmp	r3, #4
 8000e3e:	bf28      	it	cs
 8000e40:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 0501 	mov.w	r5, #1
 8000e48:	fa05 f303 	lsl.w	r3, r5, r3
 8000e4c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e50:	bf8c      	ite	hi
 8000e52:	3c03      	subhi	r4, #3
 8000e54:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e56:	4019      	ands	r1, r3
 8000e58:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5a:	fa05 f404 	lsl.w	r4, r5, r4
 8000e5e:	3c01      	subs	r4, #1
 8000e60:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000e62:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	ea42 0201 	orr.w	r2, r2, r1
 8000e68:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	bfaf      	iteee	ge
 8000e6e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e72:	f000 000f 	andlt.w	r0, r0, #15
 8000e76:	4b06      	ldrlt	r3, [pc, #24]	; (8000e90 <HAL_NVIC_SetPriority+0x64>)
 8000e78:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7a:	bfa5      	ittet	ge
 8000e7c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000e80:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000e88:	bd30      	pop	{r4, r5, pc}
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00
 8000e90:	e000ed14 	.word	0xe000ed14

08000e94 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e94:	0942      	lsrs	r2, r0, #5
 8000e96:	2301      	movs	r3, #1
 8000e98:	f000 001f 	and.w	r0, r0, #31
 8000e9c:	fa03 f000 	lsl.w	r0, r3, r0
 8000ea0:	4b01      	ldr	r3, [pc, #4]	; (8000ea8 <HAL_NVIC_EnableIRQ+0x14>)
 8000ea2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	3801      	subs	r0, #1
 8000eae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000eb2:	d20a      	bcs.n	8000eca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	21f0      	movs	r1, #240	; 0xf0
 8000ebc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e010 	.word	0xe000e010
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000eda:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000edc:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000ede:	bf0c      	ite	eq
 8000ee0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ee4:	f022 0204 	bicne.w	r2, r2, #4
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	4770      	bx	lr
 8000eec:	e000e010 	.word	0xe000e010

08000ef0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ef0:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ef2:	2800      	cmp	r0, #0
 8000ef4:	d05b      	beq.n	8000fae <HAL_DMA_Init+0xbe>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ef6:	6801      	ldr	r1, [r0, #0]
 8000ef8:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <HAL_DMA_Init+0xc4>)
 8000efa:	4299      	cmp	r1, r3
 8000efc:	f04f 0414 	mov.w	r4, #20
 8000f00:	d841      	bhi.n	8000f86 <HAL_DMA_Init+0x96>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f02:	4a2d      	ldr	r2, [pc, #180]	; (8000fb8 <HAL_DMA_Init+0xc8>)
 8000f04:	440a      	add	r2, r1
 8000f06:	fbb2 f2f4 	udiv	r2, r2, r4
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f0e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8000f12:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f14:	2302      	movs	r3, #2
 8000f16:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f1a:	6884      	ldr	r4, [r0, #8]
 8000f1c:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f1e:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8000f20:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8000f22:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f24:	432b      	orrs	r3, r5
 8000f26:	6945      	ldr	r5, [r0, #20]
 8000f28:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f2a:	6985      	ldr	r5, [r0, #24]
 8000f2c:	432b      	orrs	r3, r5
 8000f2e:	69c5      	ldr	r5, [r0, #28]
 8000f30:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f32:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f34:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8000f38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f3c:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8000f3e:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000f40:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8000f44:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000f46:	d011      	beq.n	8000f6c <HAL_DMA_Init+0x7c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000f48:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <HAL_DMA_Init+0xcc>)
 8000f4a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000f4c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	f04f 030f 	mov.w	r3, #15
 8000f54:	d11f      	bne.n	8000f96 <HAL_DMA_Init+0xa6>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 8000f56:	491a      	ldr	r1, [pc, #104]	; (8000fc0 <HAL_DMA_Init+0xd0>)
 8000f58:	680a      	ldr	r2, [r1, #0]
 8000f5a:	40a3      	lsls	r3, r4
 8000f5c:	ea22 0303 	bic.w	r3, r2, r3
 8000f60:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex));
 8000f62:	6842      	ldr	r2, [r0, #4]
 8000f64:	680b      	ldr	r3, [r1, #0]
 8000f66:	40a2      	lsls	r2, r4
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	600a      	str	r2, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000f6c:	2300      	movs	r3, #0

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000f6e:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f70:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8000f72:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8000f74:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8000f76:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8000f78:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State  = HAL_DMA_STATE_READY;
 8000f7a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f7e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

  return HAL_OK;
 8000f82:	4618      	mov	r0, r3
 8000f84:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_DMA_Init+0xd4>)
 8000f88:	440b      	add	r3, r1
 8000f8a:	fbb3 f3f4 	udiv	r3, r3, r4
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <HAL_DMA_Init+0xd8>)
 8000f94:	e7bd      	b.n	8000f12 <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 8000f96:	490d      	ldr	r1, [pc, #52]	; (8000fcc <HAL_DMA_Init+0xdc>)
 8000f98:	680a      	ldr	r2, [r1, #0]
 8000f9a:	40a3      	lsls	r3, r4
 8000f9c:	ea22 0303 	bic.w	r3, r2, r3
 8000fa0:	600b      	str	r3, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex));
 8000fa2:	6843      	ldr	r3, [r0, #4]
 8000fa4:	680a      	ldr	r2, [r1, #0]
 8000fa6:	40a3      	lsls	r3, r4
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	600b      	str	r3, [r1, #0]
 8000fac:	e7de      	b.n	8000f6c <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8000fae:	2001      	movs	r0, #1
}
 8000fb0:	bd30      	pop	{r4, r5, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40020407 	.word	0x40020407
 8000fb8:	bffdfff8 	.word	0xbffdfff8
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	400200a8 	.word	0x400200a8
 8000fc4:	bffdfbf8 	.word	0xbffdfbf8
 8000fc8:	40020400 	.word	0x40020400
 8000fcc:	400204a8 	.word	0x400204a8

08000fd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fd0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fd2:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8000fd6:	2c01      	cmp	r4, #1
 8000fd8:	d036      	beq.n	8001048 <HAL_DMA_Start_IT+0x78>

  if(HAL_DMA_STATE_READY == hdma->State)
 8000fda:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8000fde:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fe0:	b2ed      	uxtb	r5, r5
 8000fe2:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8000fe4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 8000fe8:	f04f 0600 	mov.w	r6, #0
 8000fec:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ff0:	d128      	bne.n	8001044 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ff2:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ff6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ff8:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8000ffa:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ffc:	6c47      	ldr	r7, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8000ffe:	f026 0601 	bic.w	r6, r6, #1
 8001002:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001004:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001006:	40bd      	lsls	r5, r7
 8001008:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800100a:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800100c:	6883      	ldr	r3, [r0, #8]
 800100e:	6805      	ldr	r5, [r0, #0]
 8001010:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8001012:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001014:	bf0b      	itete	eq
 8001016:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001018:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800101a:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800101c:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800101e:	b14b      	cbz	r3, 8001034 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001026:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001028:	682b      	ldr	r3, [r5, #0]
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001030:	2000      	movs	r0, #0
 8001032:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001034:	6823      	ldr	r3, [r4, #0]
 8001036:	f023 0304 	bic.w	r3, r3, #4
 800103a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800103c:	6823      	ldr	r3, [r4, #0]
 800103e:	f043 030a 	orr.w	r3, r3, #10
 8001042:	e7f0      	b.n	8001026 <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma);
 8001044:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8001048:	2002      	movs	r0, #2
}
 800104a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800104c <HAL_DMA_Abort>:
  if(NULL == hdma)
 800104c:	b1a8      	cbz	r0, 800107a <HAL_DMA_Abort+0x2e>
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800104e:	6803      	ldr	r3, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001050:	6c01      	ldr	r1, [r0, #64]	; 0x40
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	f022 020e 	bic.w	r2, r2, #14
 8001058:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE(hdma);
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	f022 0201 	bic.w	r2, r2, #1
 8001060:	601a      	str	r2, [r3, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001062:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001064:	2201      	movs	r2, #1
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	604b      	str	r3, [r1, #4]
  __HAL_UNLOCK(hdma);
 800106c:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 800106e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8001072:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  return status;
 8001076:	4618      	mov	r0, r3
 8001078:	4770      	bx	lr
    return HAL_ERROR;
 800107a:	2001      	movs	r0, #1
}
 800107c:	4770      	bx	lr

0800107e <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800107e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001082:	2a02      	cmp	r2, #2
{
 8001084:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001086:	d003      	beq.n	8001090 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001088:	2204      	movs	r2, #4
 800108a:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800108c:	2001      	movs	r0, #1
 800108e:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001090:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001092:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001094:	6811      	ldr	r1, [r2, #0]
    if(hdma->XferAbortCallback != NULL)
 8001096:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001098:	f021 010e 	bic.w	r1, r1, #14
 800109c:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800109e:	6811      	ldr	r1, [r2, #0]
 80010a0:	f021 0101 	bic.w	r1, r1, #1
 80010a4:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010a6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80010a8:	2101      	movs	r1, #1
 80010aa:	fa01 f202 	lsl.w	r2, r1, r2
 80010ae:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80010b0:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80010b2:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80010b6:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80010ba:	b113      	cbz	r3, 80010c2 <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 80010bc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80010be:	4620      	mov	r0, r4
 80010c0:	bd10      	pop	{r4, pc}
 80010c2:	4618      	mov	r0, r3
}
 80010c4:	bd10      	pop	{r4, pc}

080010c6 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010c6:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80010c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 80010ca:	6803      	ldr	r3, [r0, #0]
{
 80010cc:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010ce:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80010d0:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80010d2:	2404      	movs	r4, #4
 80010d4:	4094      	lsls	r4, r2
 80010d6:	4226      	tst	r6, r4
 80010d8:	d00e      	beq.n	80010f8 <HAL_DMA_IRQHandler+0x32>
 80010da:	f015 0f04 	tst.w	r5, #4
 80010de:	d00b      	beq.n	80010f8 <HAL_DMA_IRQHandler+0x32>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010e4:	bf5e      	ittt	pl
 80010e6:	681a      	ldrpl	r2, [r3, #0]
 80010e8:	f022 0204 	bicpl.w	r2, r2, #4
 80010ec:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 80010ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 80010f0:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 80010f2:	b373      	cbz	r3, 8001152 <HAL_DMA_IRQHandler+0x8c>
}
 80010f4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80010f6:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80010f8:	2402      	movs	r4, #2
 80010fa:	4094      	lsls	r4, r2
 80010fc:	4226      	tst	r6, r4
 80010fe:	d012      	beq.n	8001126 <HAL_DMA_IRQHandler+0x60>
 8001100:	f015 0f02 	tst.w	r5, #2
 8001104:	d00f      	beq.n	8001126 <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	0695      	lsls	r5, r2, #26
 800110a:	d406      	bmi.n	800111a <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	f022 020a 	bic.w	r2, r2, #10
 8001112:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001114:	2301      	movs	r3, #1
 8001116:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800111a:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 800111c:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 800111e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001122:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001124:	e7e5      	b.n	80010f2 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001126:	2408      	movs	r4, #8
 8001128:	4094      	lsls	r4, r2
 800112a:	4234      	tst	r4, r6
 800112c:	d011      	beq.n	8001152 <HAL_DMA_IRQHandler+0x8c>
 800112e:	072c      	lsls	r4, r5, #28
 8001130:	d50f      	bpl.n	8001152 <HAL_DMA_IRQHandler+0x8c>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001132:	681c      	ldr	r4, [r3, #0]
 8001134:	f024 040e 	bic.w	r4, r4, #14
 8001138:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800113a:	2301      	movs	r3, #1
 800113c:	fa03 f202 	lsl.w	r2, r3, r2
 8001140:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001142:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001144:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001148:	2300      	movs	r3, #0
 800114a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800114e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001150:	e7cf      	b.n	80010f2 <HAL_DMA_IRQHandler+0x2c>
}
 8001152:	bc70      	pop	{r4, r5, r6}
 8001154:	4770      	bx	lr
	...

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800115c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800115e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001160:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800130c <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001164:	4c67      	ldr	r4, [pc, #412]	; (8001304 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001166:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 8001168:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800116a:	9a01      	ldr	r2, [sp, #4]
 800116c:	40da      	lsrs	r2, r3
 800116e:	d102      	bne.n	8001176 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8001170:	b005      	add	sp, #20
 8001172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001176:	2601      	movs	r6, #1
    if(iocurrent)
 8001178:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800117a:	409e      	lsls	r6, r3
    if(iocurrent)
 800117c:	ea12 0e06 	ands.w	lr, r2, r6
 8001180:	f000 80b1 	beq.w	80012e6 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001184:	684a      	ldr	r2, [r1, #4]
 8001186:	f022 0710 	bic.w	r7, r2, #16
 800118a:	2f02      	cmp	r7, #2
 800118c:	d116      	bne.n	80011bc <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 800118e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8001192:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001196:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800119a:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800119e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80011a2:	f04f 0c0f 	mov.w	ip, #15
 80011a6:	fa0c fc0a 	lsl.w	ip, ip, sl
 80011aa:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011ae:	690d      	ldr	r5, [r1, #16]
 80011b0:	fa05 f50a 	lsl.w	r5, r5, sl
 80011b4:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80011b8:	f8c9 5020 	str.w	r5, [r9, #32]
 80011bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80011c0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80011c2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80011c6:	fa05 f50c 	lsl.w	r5, r5, ip
 80011ca:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011cc:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80011d0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011d4:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011da:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011de:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80011e0:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e4:	d811      	bhi.n	800120a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80011e6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80011e8:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 80011ec:	68cf      	ldr	r7, [r1, #12]
 80011ee:	fa07 f70c 	lsl.w	r7, r7, ip
 80011f2:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 80011f6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80011f8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011fa:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80011fe:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8001202:	409f      	lsls	r7, r3
 8001204:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8001208:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800120a:	f1ba 0f03 	cmp.w	sl, #3
 800120e:	d107      	bne.n	8001220 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8001210:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001212:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001216:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 800121a:	409f      	lsls	r7, r3
 800121c:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 800121e:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8001220:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8001222:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001224:	688e      	ldr	r6, [r1, #8]
 8001226:	fa06 f60c 	lsl.w	r6, r6, ip
 800122a:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 800122c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800122e:	00d5      	lsls	r5, r2, #3
 8001230:	d559      	bpl.n	80012e6 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001236:	f045 0501 	orr.w	r5, r5, #1
 800123a:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 800123e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001242:	f023 0603 	bic.w	r6, r3, #3
 8001246:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800124a:	f005 0501 	and.w	r5, r5, #1
 800124e:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001252:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001254:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001258:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800125a:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800125c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001260:	270f      	movs	r7, #15
 8001262:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001266:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800126a:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800126e:	d03c      	beq.n	80012ea <HAL_GPIO_Init+0x192>
 8001270:	4d25      	ldr	r5, [pc, #148]	; (8001308 <HAL_GPIO_Init+0x1b0>)
 8001272:	42a8      	cmp	r0, r5
 8001274:	d03b      	beq.n	80012ee <HAL_GPIO_Init+0x196>
 8001276:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800127a:	42a8      	cmp	r0, r5
 800127c:	d039      	beq.n	80012f2 <HAL_GPIO_Init+0x19a>
 800127e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001282:	42a8      	cmp	r0, r5
 8001284:	d037      	beq.n	80012f6 <HAL_GPIO_Init+0x19e>
 8001286:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800128a:	42a8      	cmp	r0, r5
 800128c:	d035      	beq.n	80012fa <HAL_GPIO_Init+0x1a2>
 800128e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001292:	42a8      	cmp	r0, r5
 8001294:	d033      	beq.n	80012fe <HAL_GPIO_Init+0x1a6>
 8001296:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800129a:	42a8      	cmp	r0, r5
 800129c:	bf14      	ite	ne
 800129e:	2507      	movne	r5, #7
 80012a0:	2506      	moveq	r5, #6
 80012a2:	fa05 f50c 	lsl.w	r5, r5, ip
 80012a6:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80012a8:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 80012aa:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012b0:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 80012b2:	bf54      	ite	pl
 80012b4:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80012b6:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 80012ba:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 80012bc:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012be:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 80012c0:	bf54      	ite	pl
 80012c2:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80012c4:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 80012c8:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 80012ca:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012cc:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 80012ce:	bf54      	ite	pl
 80012d0:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80012d2:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 80012d6:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80012d8:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012da:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 80012dc:	bf54      	ite	pl
 80012de:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80012e0:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80012e4:	60e5      	str	r5, [r4, #12]
    position++;
 80012e6:	3301      	adds	r3, #1
 80012e8:	e73f      	b.n	800116a <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80012ea:	2500      	movs	r5, #0
 80012ec:	e7d9      	b.n	80012a2 <HAL_GPIO_Init+0x14a>
 80012ee:	2501      	movs	r5, #1
 80012f0:	e7d7      	b.n	80012a2 <HAL_GPIO_Init+0x14a>
 80012f2:	2502      	movs	r5, #2
 80012f4:	e7d5      	b.n	80012a2 <HAL_GPIO_Init+0x14a>
 80012f6:	2503      	movs	r5, #3
 80012f8:	e7d3      	b.n	80012a2 <HAL_GPIO_Init+0x14a>
 80012fa:	2504      	movs	r5, #4
 80012fc:	e7d1      	b.n	80012a2 <HAL_GPIO_Init+0x14a>
 80012fe:	2505      	movs	r5, #5
 8001300:	e7cf      	b.n	80012a2 <HAL_GPIO_Init+0x14a>
 8001302:	bf00      	nop
 8001304:	40010400 	.word	0x40010400
 8001308:	48000400 	.word	0x48000400
 800130c:	40021000 	.word	0x40021000

08001310 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001314:	4604      	mov	r4, r0
{
 8001316:	b08a      	sub	sp, #40	; 0x28
  if(hpcd == NULL)
 8001318:	2800      	cmp	r0, #0
 800131a:	d07c      	beq.n	8001416 <HAL_PCD_Init+0x106>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
  
  if(hpcd->State == HAL_PCD_STATE_RESET)
 800131c:	f890 3385 	ldrb.w	r3, [r0, #901]	; 0x385
 8001320:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001324:	b91b      	cbnz	r3, 800132e <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001326:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800132a:	f003 f8d7 	bl	80044dc <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800132e:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001330:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8001332:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001336:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  __HAL_PCD_DISABLE(hpcd);
 800133a:	f001 fd46 	bl	8002dca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 800133e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001340:	466e      	mov	r6, sp
 8001342:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001346:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001348:	e895 0003 	ldmia.w	r5, {r0, r1}
 800134c:	e886 0003 	stmia.w	r6, {r0, r1}
 8001350:	f104 0804 	add.w	r8, r4, #4
 8001354:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001358:	6820      	ldr	r0, [r4, #0]
 800135a:	f001 fd22 	bl	8002da2 <USB_CoreInit>

  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 800135e:	2100      	movs	r1, #0
 8001360:	6820      	ldr	r0, [r4, #0]
 8001362:	f001 fd38 	bl	8002dd6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8001366:	2200      	movs	r2, #0
 8001368:	6860      	ldr	r0, [r4, #4]
 800136a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800136e:	f104 0510 	add.w	r5, r4, #16
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8001372:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8001374:	4611      	mov	r1, r2
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8001376:	4282      	cmp	r2, r0
 8001378:	f103 031c 	add.w	r3, r3, #28
 800137c:	d13b      	bne.n	80013f6 <HAL_PCD_Init+0xe6>
 800137e:	2200      	movs	r2, #0
 8001380:	4623      	mov	r3, r4
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 8001382:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8001384:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
    hpcd->IN_ep[index].tx_fifo_num = index;
 8001388:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (index = 0; index < 15 ; index++)
 800138c:	3201      	adds	r2, #1
 800138e:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0;
 8001390:	f883 71e1 	strb.w	r7, [r3, #481]	; 0x1e1
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8001394:	f883 71e3 	strb.w	r7, [r3, #483]	; 0x1e3
    hpcd->OUT_ep[index].maxpacket = 0;
 8001398:	f8c3 71e8 	str.w	r7, [r3, #488]	; 0x1e8
    hpcd->OUT_ep[index].xfer_buff = 0;
 800139c:	f8c3 71ec 	str.w	r7, [r3, #492]	; 0x1ec
    hpcd->OUT_ep[index].xfer_len = 0;
 80013a0:	f8c3 71f4 	str.w	r7, [r3, #500]	; 0x1f4
 80013a4:	f103 031c 	add.w	r3, r3, #28
  for (index = 0; index < 15 ; index++)
 80013a8:	d1ec      	bne.n	8001384 <HAL_PCD_Init+0x74>
  }

  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 80013aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ac:	466e      	mov	r6, sp
 80013ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80013b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80013b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80013b8:	e886 0003 	stmia.w	r6, {r0, r1}
 80013bc:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80013c0:	6820      	ldr	r0, [r4, #0]
 80013c2:	f001 fd1f 	bl	8002e04 <USB_DevInit>

  hpcd->USB_Address = 0;
  
  hpcd->State= HAL_PCD_STATE_READY;
 80013c6:	2301      	movs	r3, #1
  hpcd->USB_Address = 0;
 80013c8:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State= HAL_PCD_STATE_READY;
 80013cc:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  
   /* Activate LPM */
  if (hpcd->Init.lpm_enable ==1)
 80013d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d102      	bne.n	80013dc <HAL_PCD_Init+0xcc>
  {
    HAL_PCDEx_ActivateLPM(hpcd);
 80013d6:	4620      	mov	r0, r4
 80013d8:	f000 f81f 	bl	800141a <HAL_PCDEx_ActivateLPM>
  }  
  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable ==1)
 80013dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d102      	bne.n	80013e8 <HAL_PCD_Init+0xd8>
  {
    HAL_PCDEx_ActivateBCD(hpcd);
 80013e2:	4620      	mov	r0, r4
 80013e4:	f000 f82c 	bl	8001440 <HAL_PCDEx_ActivateBCD>
  }
  USB_DevDisconnect (hpcd->Instance);  
 80013e8:	6820      	ldr	r0, [r4, #0]
 80013ea:	f001 fdcc 	bl	8002f86 <USB_DevDisconnect>
  return HAL_OK;
 80013ee:	2000      	movs	r0, #0
}
 80013f0:	b00a      	add	sp, #40	; 0x28
 80013f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hpcd->IN_ep[index].num = index;
 80013f6:	f803 2c1c 	strb.w	r2, [r3, #-28]
    hpcd->IN_ep[index].tx_fifo_num = index;
 80013fa:	f823 2c16 	strh.w	r2, [r3, #-22]
    hpcd->IN_ep[index].is_in = 1;
 80013fe:	f803 6c1b 	strb.w	r6, [r3, #-27]
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8001402:	f803 1c19 	strb.w	r1, [r3, #-25]
    hpcd->IN_ep[index].maxpacket =  0;
 8001406:	f843 1c14 	str.w	r1, [r3, #-20]
    hpcd->IN_ep[index].xfer_buff = 0;
 800140a:	f843 1c10 	str.w	r1, [r3, #-16]
    hpcd->IN_ep[index].xfer_len = 0;
 800140e:	f843 1c08 	str.w	r1, [r3, #-8]
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8001412:	3201      	adds	r2, #1
 8001414:	e7af      	b.n	8001376 <HAL_PCD_Init+0x66>
    return HAL_ERROR;
 8001416:	2001      	movs	r0, #1
 8001418:	e7ea      	b.n	80013f0 <HAL_PCD_Init+0xe0>

0800141a <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800141a:	6802      	ldr	r2, [r0, #0]
{
 800141c:	4603      	mov	r3, r0
  
  hpcd->lpm_active = ENABLE;
 800141e:	2101      	movs	r1, #1
 8001420:	f8c0 13c0 	str.w	r1, [r0, #960]	; 0x3c0
  hpcd->LPM_State = LPM_L0;
 8001424:	2000      	movs	r0, #0
 8001426:	f883 03b8 	strb.w	r0, [r3, #952]	; 0x3b8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800142a:	6993      	ldr	r3, [r2, #24]
 800142c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001430:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001432:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	f043 0303 	orr.w	r3, r3, #3
 800143c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;  
}
 800143e:	4770      	bx	lr

08001440 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001440:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = ENABLE; 
 8001442:	2301      	movs	r3, #1
 8001444:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8001448:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800144a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144e:	6393      	str	r3, [r2, #56]	; 0x38
  
  return HAL_OK;  
}
 8001450:	2000      	movs	r0, #0
 8001452:	4770      	bx	lr

08001454 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 8001454:	4a02      	ldr	r2, [pc, #8]	; (8001460 <HAL_PWR_EnableBkUpAccess+0xc>)
 8001456:	6813      	ldr	r3, [r2, #0]
 8001458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	4770      	bx	lr
 8001460:	40007000 	.word	0x40007000

08001464 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001464:	4b02      	ldr	r3, [pc, #8]	; (8001470 <HAL_PWREx_GetVoltageRange+0xc>)
 8001466:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8001468:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40007000 	.word	0x40007000

08001474 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001474:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001476:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001478:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800147c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001480:	d11a      	bne.n	80014b8 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001482:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001486:	d013      	beq.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001488:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 800148a:	4912      	ldr	r1, [pc, #72]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800148c:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001494:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001496:	4a10      	ldr	r2, [pc, #64]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	fbb2 f1f1 	udiv	r1, r2, r1
 800149e:	2232      	movs	r2, #50	; 0x32
 80014a0:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 80014a2:	b112      	cbz	r2, 80014aa <HAL_PWREx_ControlVoltageScaling+0x36>
 80014a4:	6959      	ldr	r1, [r3, #20]
 80014a6:	0549      	lsls	r1, r1, #21
 80014a8:	d404      	bmi.n	80014b4 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	055b      	lsls	r3, r3, #21
 80014ae:	d40d      	bmi.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 80014b0:	2000      	movs	r0, #0
 80014b2:	4770      	bx	lr
        wait_loop_index--;
 80014b4:	3a01      	subs	r2, #1
 80014b6:	e7f4      	b.n	80014a2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014b8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014bc:	bf1f      	itttt	ne
 80014be:	681a      	ldrne	r2, [r3, #0]
 80014c0:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80014c4:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80014c8:	601a      	strne	r2, [r3, #0]
 80014ca:	e7f1      	b.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 80014cc:	2003      	movs	r0, #3
}  
 80014ce:	4770      	bx	lr
 80014d0:	40007000 	.word	0x40007000
 80014d4:	000f4240 	.word	0x000f4240
 80014d8:	20000004 	.word	0x20000004

080014dc <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.  
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80014dc:	4a02      	ldr	r2, [pc, #8]	; (80014e8 <HAL_PWREx_EnableVddUSB+0xc>)
 80014de:	6853      	ldr	r3, [r2, #4]
 80014e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014e4:	6053      	str	r3, [r2, #4]
 80014e6:	4770      	bx	lr
 80014e8:	40007000 	.word	0x40007000

080014ec <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present. 
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80014ec:	4a02      	ldr	r2, [pc, #8]	; (80014f8 <HAL_PWREx_EnableVddIO2+0xc>)
 80014ee:	6853      	ldr	r3, [r2, #4]
 80014f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014f4:	6053      	str	r3, [r2, #4]
 80014f6:	4770      	bx	lr
 80014f8:	40007000 	.word	0x40007000

080014fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80014fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80014fe:	4d1e      	ldr	r5, [pc, #120]	; (8001578 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001500:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001502:	00da      	lsls	r2, r3, #3
{
 8001504:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001506:	d518      	bpl.n	800153a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001508:	f7ff ffac 	bl	8001464 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800150c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001510:	d123      	bne.n	800155a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001512:	2c80      	cmp	r4, #128	; 0x80
 8001514:	d929      	bls.n	800156a <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001516:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001518:	bf8c      	ite	hi
 800151a:	2002      	movhi	r0, #2
 800151c:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800151e:	4a17      	ldr	r2, [pc, #92]	; (800157c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001520:	6813      	ldr	r3, [r2, #0]
 8001522:	f023 0307 	bic.w	r3, r3, #7
 8001526:	4303      	orrs	r3, r0
 8001528:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 800152a:	6813      	ldr	r3, [r2, #0]
 800152c:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001530:	1a18      	subs	r0, r3, r0
 8001532:	bf18      	it	ne
 8001534:	2001      	movne	r0, #1
 8001536:	b003      	add	sp, #12
 8001538:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001540:	65ab      	str	r3, [r5, #88]	; 0x58
 8001542:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800154c:	f7ff ff8a 	bl	8001464 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001550:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001556:	65ab      	str	r3, [r5, #88]	; 0x58
 8001558:	e7d8      	b.n	800150c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800155a:	2c80      	cmp	r4, #128	; 0x80
 800155c:	d807      	bhi.n	800156e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800155e:	d008      	beq.n	8001572 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001560:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001564:	4258      	negs	r0, r3
 8001566:	4158      	adcs	r0, r3
 8001568:	e7d9      	b.n	800151e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800156a:	2000      	movs	r0, #0
 800156c:	e7d7      	b.n	800151e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800156e:	2003      	movs	r0, #3
 8001570:	e7d5      	b.n	800151e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001572:	2002      	movs	r0, #2
 8001574:	e7d3      	b.n	800151e <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000
 800157c:	40022000 	.word	0x40022000

08001580 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001580:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	f012 0f0c 	tst.w	r2, #12
{
 8001588:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800158a:	d009      	beq.n	80015a0 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001592:	2a0c      	cmp	r2, #12
 8001594:	d12d      	bne.n	80015f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001596:	68da      	ldr	r2, [r3, #12]
 8001598:	f002 0203 	and.w	r2, r2, #3
 800159c:	2a01      	cmp	r2, #1
 800159e:	d128      	bne.n	80015f2 <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80015a0:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80015a2:	4928      	ldr	r1, [pc, #160]	; (8001644 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80015a4:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80015a6:	bf55      	itete	pl
 80015a8:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80015ac:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80015ae:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80015b2:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 80015b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80015ba:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 80015bc:	f011 0f0c 	tst.w	r1, #12
 80015c0:	bf0c      	ite	eq
 80015c2:	4610      	moveq	r0, r2
 80015c4:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80015c6:	6899      	ldr	r1, [r3, #8]
 80015c8:	f001 010c 	and.w	r1, r1, #12
 80015cc:	290c      	cmp	r1, #12
 80015ce:	d130      	bne.n	8001632 <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015d0:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015d2:	68d8      	ldr	r0, [r3, #12]
 80015d4:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80015d8:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015da:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 80015de:	2802      	cmp	r0, #2
 80015e0:	d019      	beq.n	8001616 <HAL_RCC_GetSysClockFreq+0x96>
 80015e2:	2803      	cmp	r0, #3
 80015e4:	d026      	beq.n	8001634 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015e6:	fbb2 f2f1 	udiv	r2, r2, r1
 80015ea:	68d8      	ldr	r0, [r3, #12]
 80015ec:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80015f0:	e017      	b.n	8001622 <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	f002 020c 	and.w	r2, r2, #12
 80015f8:	2a04      	cmp	r2, #4
 80015fa:	d007      	beq.n	800160c <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	f002 020c 	and.w	r2, r2, #12
 8001602:	2a08      	cmp	r2, #8
 8001604:	d104      	bne.n	8001610 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8001606:	4810      	ldr	r0, [pc, #64]	; (8001648 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001608:	2200      	movs	r2, #0
 800160a:	e7dc      	b.n	80015c6 <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 800160c:	480f      	ldr	r0, [pc, #60]	; (800164c <HAL_RCC_GetSysClockFreq+0xcc>)
 800160e:	e7fb      	b.n	8001608 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8001610:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001612:	4602      	mov	r2, r0
 8001614:	e7d7      	b.n	80015c6 <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	480c      	ldr	r0, [pc, #48]	; (800164c <HAL_RCC_GetSysClockFreq+0xcc>)
 800161a:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800161e:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001628:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800162a:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800162c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800162e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001632:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	4804      	ldr	r0, [pc, #16]	; (8001648 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001638:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800163c:	e7ef      	b.n	800161e <HAL_RCC_GetSysClockFreq+0x9e>
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000
 8001644:	08005024 	.word	0x08005024
 8001648:	00b71b00 	.word	0x00b71b00
 800164c:	00f42400 	.word	0x00f42400

08001650 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001650:	6803      	ldr	r3, [r0, #0]
{
 8001652:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001656:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001658:	06d8      	lsls	r0, r3, #27
 800165a:	d53b      	bpl.n	80016d4 <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800165c:	4ca9      	ldr	r4, [pc, #676]	; (8001904 <HAL_RCC_OscConfig+0x2b4>)
 800165e:	68a3      	ldr	r3, [r4, #8]
 8001660:	f013 0f0c 	tst.w	r3, #12
 8001664:	d160      	bne.n	8001728 <HAL_RCC_OscConfig+0xd8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	0799      	lsls	r1, r3, #30
 800166a:	d505      	bpl.n	8001678 <HAL_RCC_OscConfig+0x28>
 800166c:	69ab      	ldr	r3, [r5, #24]
 800166e:	b91b      	cbnz	r3, 8001678 <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 8001670:	2001      	movs	r0, #1
}
 8001672:	b002      	add	sp, #8
 8001674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001678:	6823      	ldr	r3, [r4, #0]
 800167a:	6a28      	ldr	r0, [r5, #32]
 800167c:	071a      	lsls	r2, r3, #28
 800167e:	bf56      	itet	pl
 8001680:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001684:	6823      	ldrmi	r3, [r4, #0]
 8001686:	091b      	lsrpl	r3, r3, #4
 8001688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800168c:	4283      	cmp	r3, r0
 800168e:	d236      	bcs.n	80016fe <HAL_RCC_OscConfig+0xae>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001690:	f7ff ff34 	bl	80014fc <RCC_SetFlashLatencyFromMSIRange>
 8001694:	2800      	cmp	r0, #0
 8001696:	d1eb      	bne.n	8001670 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	f043 0308 	orr.w	r3, r3, #8
 800169e:	6023      	str	r3, [r4, #0]
 80016a0:	6823      	ldr	r3, [r4, #0]
 80016a2:	6a2a      	ldr	r2, [r5, #32]
 80016a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016a8:	4313      	orrs	r3, r2
 80016aa:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ac:	6863      	ldr	r3, [r4, #4]
 80016ae:	69ea      	ldr	r2, [r5, #28]
 80016b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80016b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016b8:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016ba:	f7ff ff61 	bl	8001580 <HAL_RCC_GetSysClockFreq>
 80016be:	68a3      	ldr	r3, [r4, #8]
 80016c0:	4a91      	ldr	r2, [pc, #580]	; (8001908 <HAL_RCC_OscConfig+0x2b8>)
 80016c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80016c6:	5cd3      	ldrb	r3, [r2, r3]
 80016c8:	40d8      	lsrs	r0, r3
 80016ca:	4b90      	ldr	r3, [pc, #576]	; (800190c <HAL_RCC_OscConfig+0x2bc>)
 80016cc:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80016ce:	200f      	movs	r0, #15
 80016d0:	f7ff fb5e 	bl	8000d90 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d4:	682b      	ldr	r3, [r5, #0]
 80016d6:	07de      	lsls	r6, r3, #31
 80016d8:	d45b      	bmi.n	8001792 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016da:	682b      	ldr	r3, [r5, #0]
 80016dc:	079c      	lsls	r4, r3, #30
 80016de:	f100 80a3 	bmi.w	8001828 <HAL_RCC_OscConfig+0x1d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e2:	682b      	ldr	r3, [r5, #0]
 80016e4:	0719      	lsls	r1, r3, #28
 80016e6:	f100 80e1 	bmi.w	80018ac <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ea:	682b      	ldr	r3, [r5, #0]
 80016ec:	075a      	lsls	r2, r3, #29
 80016ee:	f100 810f 	bmi.w	8001910 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016f2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80016f4:	2a00      	cmp	r2, #0
 80016f6:	f040 8176 	bne.w	80019e6 <HAL_RCC_OscConfig+0x396>
  return HAL_OK;
 80016fa:	2000      	movs	r0, #0
 80016fc:	e7b9      	b.n	8001672 <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	f043 0308 	orr.w	r3, r3, #8
 8001704:	6023      	str	r3, [r4, #0]
 8001706:	6823      	ldr	r3, [r4, #0]
 8001708:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800170c:	4303      	orrs	r3, r0
 800170e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001710:	6863      	ldr	r3, [r4, #4]
 8001712:	69ea      	ldr	r2, [r5, #28]
 8001714:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001718:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800171c:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800171e:	f7ff feed 	bl	80014fc <RCC_SetFlashLatencyFromMSIRange>
 8001722:	2800      	cmp	r0, #0
 8001724:	d0c9      	beq.n	80016ba <HAL_RCC_OscConfig+0x6a>
 8001726:	e7a3      	b.n	8001670 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001728:	69ab      	ldr	r3, [r5, #24]
 800172a:	b313      	cbz	r3, 8001772 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_MSI_ENABLE();
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001734:	f7ff fb54 	bl	8000de0 <HAL_GetTick>
 8001738:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800173a:	6823      	ldr	r3, [r4, #0]
 800173c:	079b      	lsls	r3, r3, #30
 800173e:	d511      	bpl.n	8001764 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	f043 0308 	orr.w	r3, r3, #8
 8001746:	6023      	str	r3, [r4, #0]
 8001748:	6823      	ldr	r3, [r4, #0]
 800174a:	6a2a      	ldr	r2, [r5, #32]
 800174c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001750:	4313      	orrs	r3, r2
 8001752:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001754:	6863      	ldr	r3, [r4, #4]
 8001756:	69ea      	ldr	r2, [r5, #28]
 8001758:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800175c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001760:	6063      	str	r3, [r4, #4]
 8001762:	e7b7      	b.n	80016d4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001764:	f7ff fb3c 	bl	8000de0 <HAL_GetTick>
 8001768:	1b80      	subs	r0, r0, r6
 800176a:	2802      	cmp	r0, #2
 800176c:	d9e5      	bls.n	800173a <HAL_RCC_OscConfig+0xea>
            return HAL_TIMEOUT;
 800176e:	2003      	movs	r0, #3
 8001770:	e77f      	b.n	8001672 <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 8001772:	6823      	ldr	r3, [r4, #0]
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800177a:	f7ff fb31 	bl	8000de0 <HAL_GetTick>
 800177e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	079f      	lsls	r7, r3, #30
 8001784:	d5a6      	bpl.n	80016d4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001786:	f7ff fb2b 	bl	8000de0 <HAL_GetTick>
 800178a:	1b80      	subs	r0, r0, r6
 800178c:	2802      	cmp	r0, #2
 800178e:	d9f7      	bls.n	8001780 <HAL_RCC_OscConfig+0x130>
 8001790:	e7ed      	b.n	800176e <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001792:	4c5c      	ldr	r4, [pc, #368]	; (8001904 <HAL_RCC_OscConfig+0x2b4>)
 8001794:	68a3      	ldr	r3, [r4, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b08      	cmp	r3, #8
 800179c:	d009      	beq.n	80017b2 <HAL_RCC_OscConfig+0x162>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800179e:	68a3      	ldr	r3, [r4, #8]
 80017a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 80017a4:	2b0c      	cmp	r3, #12
 80017a6:	d10b      	bne.n	80017c0 <HAL_RCC_OscConfig+0x170>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017a8:	68e3      	ldr	r3, [r4, #12]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d106      	bne.n	80017c0 <HAL_RCC_OscConfig+0x170>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b2:	6823      	ldr	r3, [r4, #0]
 80017b4:	0398      	lsls	r0, r3, #14
 80017b6:	d590      	bpl.n	80016da <HAL_RCC_OscConfig+0x8a>
 80017b8:	686b      	ldr	r3, [r5, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d18d      	bne.n	80016da <HAL_RCC_OscConfig+0x8a>
 80017be:	e757      	b.n	8001670 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c0:	686b      	ldr	r3, [r5, #4]
 80017c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c6:	d110      	bne.n	80017ea <HAL_RCC_OscConfig+0x19a>
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80017d0:	f7ff fb06 	bl	8000de0 <HAL_GetTick>
 80017d4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80017d6:	6823      	ldr	r3, [r4, #0]
 80017d8:	0399      	lsls	r1, r3, #14
 80017da:	f53f af7e 	bmi.w	80016da <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017de:	f7ff faff 	bl	8000de0 <HAL_GetTick>
 80017e2:	1b80      	subs	r0, r0, r6
 80017e4:	2864      	cmp	r0, #100	; 0x64
 80017e6:	d9f6      	bls.n	80017d6 <HAL_RCC_OscConfig+0x186>
 80017e8:	e7c1      	b.n	800176e <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ee:	d104      	bne.n	80017fa <HAL_RCC_OscConfig+0x1aa>
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f6:	6023      	str	r3, [r4, #0]
 80017f8:	e7e6      	b.n	80017c8 <HAL_RCC_OscConfig+0x178>
 80017fa:	6822      	ldr	r2, [r4, #0]
 80017fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001800:	6022      	str	r2, [r4, #0]
 8001802:	6822      	ldr	r2, [r4, #0]
 8001804:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001808:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1e0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x180>
        tickstart = HAL_GetTick();
 800180e:	f7ff fae7 	bl	8000de0 <HAL_GetTick>
 8001812:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001814:	6823      	ldr	r3, [r4, #0]
 8001816:	039a      	lsls	r2, r3, #14
 8001818:	f57f af5f 	bpl.w	80016da <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff fae0 	bl	8000de0 <HAL_GetTick>
 8001820:	1b80      	subs	r0, r0, r6
 8001822:	2864      	cmp	r0, #100	; 0x64
 8001824:	d9f6      	bls.n	8001814 <HAL_RCC_OscConfig+0x1c4>
 8001826:	e7a2      	b.n	800176e <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001828:	4c36      	ldr	r4, [pc, #216]	; (8001904 <HAL_RCC_OscConfig+0x2b4>)
 800182a:	68a3      	ldr	r3, [r4, #8]
 800182c:	f003 030c 	and.w	r3, r3, #12
 8001830:	2b04      	cmp	r3, #4
 8001832:	d009      	beq.n	8001848 <HAL_RCC_OscConfig+0x1f8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001834:	68a3      	ldr	r3, [r4, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800183a:	2b0c      	cmp	r3, #12
 800183c:	d113      	bne.n	8001866 <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800183e:	68e3      	ldr	r3, [r4, #12]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d10e      	bne.n	8001866 <HAL_RCC_OscConfig+0x216>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	055b      	lsls	r3, r3, #21
 800184c:	d503      	bpl.n	8001856 <HAL_RCC_OscConfig+0x206>
 800184e:	68eb      	ldr	r3, [r5, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	f43f af0d 	beq.w	8001670 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001856:	6863      	ldr	r3, [r4, #4]
 8001858:	692a      	ldr	r2, [r5, #16]
 800185a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800185e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001862:	6063      	str	r3, [r4, #4]
 8001864:	e73d      	b.n	80016e2 <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001866:	68eb      	ldr	r3, [r5, #12]
 8001868:	b17b      	cbz	r3, 800188a <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_HSI_ENABLE();
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001870:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001872:	f7ff fab5 	bl	8000de0 <HAL_GetTick>
 8001876:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	055f      	lsls	r7, r3, #21
 800187c:	d4eb      	bmi.n	8001856 <HAL_RCC_OscConfig+0x206>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187e:	f7ff faaf 	bl	8000de0 <HAL_GetTick>
 8001882:	1b80      	subs	r0, r0, r6
 8001884:	2802      	cmp	r0, #2
 8001886:	d9f7      	bls.n	8001878 <HAL_RCC_OscConfig+0x228>
 8001888:	e771      	b.n	800176e <HAL_RCC_OscConfig+0x11e>
        __HAL_RCC_HSI_DISABLE();
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001890:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001892:	f7ff faa5 	bl	8000de0 <HAL_GetTick>
 8001896:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001898:	6823      	ldr	r3, [r4, #0]
 800189a:	0558      	lsls	r0, r3, #21
 800189c:	f57f af21 	bpl.w	80016e2 <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a0:	f7ff fa9e 	bl	8000de0 <HAL_GetTick>
 80018a4:	1b80      	subs	r0, r0, r6
 80018a6:	2802      	cmp	r0, #2
 80018a8:	d9f6      	bls.n	8001898 <HAL_RCC_OscConfig+0x248>
 80018aa:	e760      	b.n	800176e <HAL_RCC_OscConfig+0x11e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ac:	696b      	ldr	r3, [r5, #20]
 80018ae:	4c15      	ldr	r4, [pc, #84]	; (8001904 <HAL_RCC_OscConfig+0x2b4>)
 80018b0:	b19b      	cbz	r3, 80018da <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSI_ENABLE();
 80018b2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80018be:	f7ff fa8f 	bl	8000de0 <HAL_GetTick>
 80018c2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80018c4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80018c8:	079b      	lsls	r3, r3, #30
 80018ca:	f53f af0e 	bmi.w	80016ea <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ce:	f7ff fa87 	bl	8000de0 <HAL_GetTick>
 80018d2:	1b80      	subs	r0, r0, r6
 80018d4:	2802      	cmp	r0, #2
 80018d6:	d9f5      	bls.n	80018c4 <HAL_RCC_OscConfig+0x274>
 80018d8:	e749      	b.n	800176e <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_LSI_DISABLE();
 80018da:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80018de:	f023 0301 	bic.w	r3, r3, #1
 80018e2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80018e6:	f7ff fa7b 	bl	8000de0 <HAL_GetTick>
 80018ea:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 80018ec:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80018f0:	079f      	lsls	r7, r3, #30
 80018f2:	f57f aefa 	bpl.w	80016ea <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f6:	f7ff fa73 	bl	8000de0 <HAL_GetTick>
 80018fa:	1b80      	subs	r0, r0, r6
 80018fc:	2802      	cmp	r0, #2
 80018fe:	d9f5      	bls.n	80018ec <HAL_RCC_OscConfig+0x29c>
 8001900:	e735      	b.n	800176e <HAL_RCC_OscConfig+0x11e>
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000
 8001908:	08005009 	.word	0x08005009
 800190c:	20000004 	.word	0x20000004
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001910:	4c66      	ldr	r4, [pc, #408]	; (8001aac <HAL_RCC_OscConfig+0x45c>)
 8001912:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001914:	00de      	lsls	r6, r3, #3
 8001916:	d427      	bmi.n	8001968 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001918:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800191a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191e:	65a3      	str	r3, [r4, #88]	; 0x58
 8001920:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800192a:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800192c:	4e60      	ldr	r6, [pc, #384]	; (8001ab0 <HAL_RCC_OscConfig+0x460>)
 800192e:	6833      	ldr	r3, [r6, #0]
 8001930:	05d8      	lsls	r0, r3, #23
 8001932:	d51b      	bpl.n	800196c <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001934:	68ab      	ldr	r3, [r5, #8]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d129      	bne.n	800198e <HAL_RCC_OscConfig+0x33e>
 800193a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001946:	f7ff fa4b 	bl	8000de0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800194e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001950:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001954:	079a      	lsls	r2, r3, #30
 8001956:	d540      	bpl.n	80019da <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8001958:	2f00      	cmp	r7, #0
 800195a:	f43f aeca 	beq.w	80016f2 <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 800195e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001964:	65a3      	str	r3, [r4, #88]	; 0x58
 8001966:	e6c4      	b.n	80016f2 <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 8001968:	2700      	movs	r7, #0
 800196a:	e7df      	b.n	800192c <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800196c:	6833      	ldr	r3, [r6, #0]
 800196e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001972:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001974:	f7ff fa34 	bl	8000de0 <HAL_GetTick>
 8001978:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800197a:	6833      	ldr	r3, [r6, #0]
 800197c:	05d9      	lsls	r1, r3, #23
 800197e:	d4d9      	bmi.n	8001934 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001980:	f7ff fa2e 	bl	8000de0 <HAL_GetTick>
 8001984:	eba0 0008 	sub.w	r0, r0, r8
 8001988:	2802      	cmp	r0, #2
 800198a:	d9f6      	bls.n	800197a <HAL_RCC_OscConfig+0x32a>
 800198c:	e6ef      	b.n	800176e <HAL_RCC_OscConfig+0x11e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198e:	2b05      	cmp	r3, #5
 8001990:	d106      	bne.n	80019a0 <HAL_RCC_OscConfig+0x350>
 8001992:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001996:	f043 0304 	orr.w	r3, r3, #4
 800199a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800199e:	e7cc      	b.n	800193a <HAL_RCC_OscConfig+0x2ea>
 80019a0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80019a4:	f022 0201 	bic.w	r2, r2, #1
 80019a8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80019ac:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80019b0:	f022 0204 	bic.w	r2, r2, #4
 80019b4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1c4      	bne.n	8001946 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 80019bc:	f7ff fa10 	bl	8000de0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80019c4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80019c6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80019ca:	079b      	lsls	r3, r3, #30
 80019cc:	d5c4      	bpl.n	8001958 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ce:	f7ff fa07 	bl	8000de0 <HAL_GetTick>
 80019d2:	1b80      	subs	r0, r0, r6
 80019d4:	4540      	cmp	r0, r8
 80019d6:	d9f6      	bls.n	80019c6 <HAL_RCC_OscConfig+0x376>
 80019d8:	e6c9      	b.n	800176e <HAL_RCC_OscConfig+0x11e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019da:	f7ff fa01 	bl	8000de0 <HAL_GetTick>
 80019de:	1b80      	subs	r0, r0, r6
 80019e0:	4540      	cmp	r0, r8
 80019e2:	d9b5      	bls.n	8001950 <HAL_RCC_OscConfig+0x300>
 80019e4:	e6c3      	b.n	800176e <HAL_RCC_OscConfig+0x11e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019e6:	4c31      	ldr	r4, [pc, #196]	; (8001aac <HAL_RCC_OscConfig+0x45c>)
 80019e8:	68a3      	ldr	r3, [r4, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b0c      	cmp	r3, #12
 80019f0:	f43f ae3e 	beq.w	8001670 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 80019f4:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019f6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80019f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019fc:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019fe:	d137      	bne.n	8001a70 <HAL_RCC_OscConfig+0x420>
        tickstart = HAL_GetTick();
 8001a00:	f7ff f9ee 	bl	8000de0 <HAL_GetTick>
 8001a04:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	019f      	lsls	r7, r3, #6
 8001a0a:	d42b      	bmi.n	8001a64 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a0c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001a0e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001a10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a14:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001a16:	3a01      	subs	r2, #1
 8001a18:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001a1c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001a1e:	0912      	lsrs	r2, r2, #4
 8001a20:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001a24:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001a26:	0852      	lsrs	r2, r2, #1
 8001a28:	3a01      	subs	r2, #1
 8001a2a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001a2e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001a30:	0852      	lsrs	r2, r2, #1
 8001a32:	3a01      	subs	r2, #1
 8001a34:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001a38:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001a3a:	6823      	ldr	r3, [r4, #0]
 8001a3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a40:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a42:	68e3      	ldr	r3, [r4, #12]
 8001a44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a48:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001a4a:	f7ff f9c9 	bl	8000de0 <HAL_GetTick>
 8001a4e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001a50:	6823      	ldr	r3, [r4, #0]
 8001a52:	0198      	lsls	r0, r3, #6
 8001a54:	f53f ae51 	bmi.w	80016fa <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff f9c2 	bl	8000de0 <HAL_GetTick>
 8001a5c:	1b40      	subs	r0, r0, r5
 8001a5e:	2802      	cmp	r0, #2
 8001a60:	d9f6      	bls.n	8001a50 <HAL_RCC_OscConfig+0x400>
 8001a62:	e684      	b.n	800176e <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff f9bc 	bl	8000de0 <HAL_GetTick>
 8001a68:	1b80      	subs	r0, r0, r6
 8001a6a:	2802      	cmp	r0, #2
 8001a6c:	d9cb      	bls.n	8001a06 <HAL_RCC_OscConfig+0x3b6>
 8001a6e:	e67e      	b.n	800176e <HAL_RCC_OscConfig+0x11e>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001a70:	6823      	ldr	r3, [r4, #0]
 8001a72:	0119      	lsls	r1, r3, #4
 8001a74:	d406      	bmi.n	8001a84 <HAL_RCC_OscConfig+0x434>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8001a76:	6823      	ldr	r3, [r4, #0]
           &&
 8001a78:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a7a:	bf5e      	ittt	pl
 8001a7c:	68e3      	ldrpl	r3, [r4, #12]
 8001a7e:	f023 0303 	bicpl.w	r3, r3, #3
 8001a82:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a84:	68e3      	ldr	r3, [r4, #12]
 8001a86:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001a90:	f7ff f9a6 	bl	8000de0 <HAL_GetTick>
 8001a94:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	019b      	lsls	r3, r3, #6
 8001a9a:	f57f ae2e 	bpl.w	80016fa <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7ff f99f 	bl	8000de0 <HAL_GetTick>
 8001aa2:	1b40      	subs	r0, r0, r5
 8001aa4:	2802      	cmp	r0, #2
 8001aa6:	d9f6      	bls.n	8001a96 <HAL_RCC_OscConfig+0x446>
 8001aa8:	e661      	b.n	800176e <HAL_RCC_OscConfig+0x11e>
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40007000 	.word	0x40007000

08001ab4 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001ab4:	4a56      	ldr	r2, [pc, #344]	; (8001c10 <HAL_RCC_ClockConfig+0x15c>)
 8001ab6:	6813      	ldr	r3, [r2, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	428b      	cmp	r3, r1
{
 8001abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ac2:	4605      	mov	r5, r0
 8001ac4:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001ac6:	d32b      	bcc.n	8001b20 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac8:	682b      	ldr	r3, [r5, #0]
 8001aca:	07d9      	lsls	r1, r3, #31
 8001acc:	d435      	bmi.n	8001b3a <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ace:	6829      	ldr	r1, [r5, #0]
 8001ad0:	078a      	lsls	r2, r1, #30
 8001ad2:	f100 8083 	bmi.w	8001bdc <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001ad6:	4a4e      	ldr	r2, [pc, #312]	; (8001c10 <HAL_RCC_ClockConfig+0x15c>)
 8001ad8:	6813      	ldr	r3, [r2, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	429e      	cmp	r6, r3
 8001ae0:	f0c0 8084 	bcc.w	8001bec <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae4:	f011 0f04 	tst.w	r1, #4
 8001ae8:	4c4a      	ldr	r4, [pc, #296]	; (8001c14 <HAL_RCC_ClockConfig+0x160>)
 8001aea:	f040 808a 	bne.w	8001c02 <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aee:	070b      	lsls	r3, r1, #28
 8001af0:	d506      	bpl.n	8001b00 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001af2:	68a3      	ldr	r3, [r4, #8]
 8001af4:	692a      	ldr	r2, [r5, #16]
 8001af6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001afa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001afe:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b00:	f7ff fd3e 	bl	8001580 <HAL_RCC_GetSysClockFreq>
 8001b04:	68a3      	ldr	r3, [r4, #8]
 8001b06:	4a44      	ldr	r2, [pc, #272]	; (8001c18 <HAL_RCC_ClockConfig+0x164>)
 8001b08:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b0c:	5cd3      	ldrb	r3, [r2, r3]
 8001b0e:	40d8      	lsrs	r0, r3
 8001b10:	4b42      	ldr	r3, [pc, #264]	; (8001c1c <HAL_RCC_ClockConfig+0x168>)
 8001b12:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b14:	200f      	movs	r0, #15
 8001b16:	f7ff f93b 	bl	8000d90 <HAL_InitTick>
  return HAL_OK;
 8001b1a:	2000      	movs	r0, #0
}
 8001b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b20:	6813      	ldr	r3, [r2, #0]
 8001b22:	f023 0307 	bic.w	r3, r3, #7
 8001b26:	430b      	orrs	r3, r1
 8001b28:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8001b2a:	6813      	ldr	r3, [r2, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4299      	cmp	r1, r3
 8001b32:	d0c9      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001b34:	2001      	movs	r0, #1
 8001b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b3a:	686a      	ldr	r2, [r5, #4]
 8001b3c:	4c35      	ldr	r4, [pc, #212]	; (8001c14 <HAL_RCC_ClockConfig+0x160>)
 8001b3e:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001b40:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b42:	d11c      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001b44:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001b48:	d0f4      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b4a:	68a3      	ldr	r3, [r4, #8]
 8001b4c:	f023 0303 	bic.w	r3, r3, #3
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001b54:	f7ff f944 	bl	8000de0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b58:	686b      	ldr	r3, [r5, #4]
 8001b5a:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 8001b5c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5e:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b62:	d118      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b64:	68a3      	ldr	r3, [r4, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	d0af      	beq.n	8001ace <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6e:	f7ff f937 	bl	8000de0 <HAL_GetTick>
 8001b72:	1bc0      	subs	r0, r0, r7
 8001b74:	4540      	cmp	r0, r8
 8001b76:	d9f5      	bls.n	8001b64 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8001b78:	2003      	movs	r0, #3
 8001b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7e:	2a02      	cmp	r2, #2
 8001b80:	d102      	bne.n	8001b88 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001b82:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b86:	e7df      	b.n	8001b48 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b88:	b912      	cbnz	r2, 8001b90 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001b8a:	f013 0f02 	tst.w	r3, #2
 8001b8e:	e7db      	b.n	8001b48 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001b90:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001b94:	e7d8      	b.n	8001b48 <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d10a      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001b9a:	68a3      	ldr	r3, [r4, #8]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d094      	beq.n	8001ace <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba4:	f7ff f91c 	bl	8000de0 <HAL_GetTick>
 8001ba8:	1bc0      	subs	r0, r0, r7
 8001baa:	4540      	cmp	r0, r8
 8001bac:	d9f5      	bls.n	8001b9a <HAL_RCC_ClockConfig+0xe6>
 8001bae:	e7e3      	b.n	8001b78 <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bb0:	b973      	cbnz	r3, 8001bd0 <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8001bb2:	68a3      	ldr	r3, [r4, #8]
 8001bb4:	f013 0f0c 	tst.w	r3, #12
 8001bb8:	d089      	beq.n	8001ace <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bba:	f7ff f911 	bl	8000de0 <HAL_GetTick>
 8001bbe:	1bc0      	subs	r0, r0, r7
 8001bc0:	4540      	cmp	r0, r8
 8001bc2:	d9f6      	bls.n	8001bb2 <HAL_RCC_ClockConfig+0xfe>
 8001bc4:	e7d8      	b.n	8001b78 <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc6:	f7ff f90b 	bl	8000de0 <HAL_GetTick>
 8001bca:	1bc0      	subs	r0, r0, r7
 8001bcc:	4540      	cmp	r0, r8
 8001bce:	d8d3      	bhi.n	8001b78 <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001bd0:	68a3      	ldr	r3, [r4, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d1f5      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0x112>
 8001bda:	e778      	b.n	8001ace <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bdc:	4a0d      	ldr	r2, [pc, #52]	; (8001c14 <HAL_RCC_ClockConfig+0x160>)
 8001bde:	68a8      	ldr	r0, [r5, #8]
 8001be0:	6893      	ldr	r3, [r2, #8]
 8001be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001be6:	4303      	orrs	r3, r0
 8001be8:	6093      	str	r3, [r2, #8]
 8001bea:	e774      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bec:	6813      	ldr	r3, [r2, #0]
 8001bee:	f023 0307 	bic.w	r3, r3, #7
 8001bf2:	4333      	orrs	r3, r6
 8001bf4:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8001bf6:	6813      	ldr	r3, [r2, #0]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	429e      	cmp	r6, r3
 8001bfe:	d199      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x80>
 8001c00:	e770      	b.n	8001ae4 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c02:	68a3      	ldr	r3, [r4, #8]
 8001c04:	68ea      	ldr	r2, [r5, #12]
 8001c06:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	60a3      	str	r3, [r4, #8]
 8001c0e:	e76e      	b.n	8001aee <HAL_RCC_ClockConfig+0x3a>
 8001c10:	40022000 	.word	0x40022000
 8001c14:	40021000 	.word	0x40021000
 8001c18:	08005009 	.word	0x08005009
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_RCC_GetHCLKFreq>:
}
 8001c20:	4b01      	ldr	r3, [pc, #4]	; (8001c28 <HAL_RCC_GetHCLKFreq+0x8>)
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000004 	.word	0x20000004

08001c2c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001c36:	5cd3      	ldrb	r3, [r2, r3]
 8001c38:	4a03      	ldr	r2, [pc, #12]	; (8001c48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001c3a:	6810      	ldr	r0, [r2, #0]
}
 8001c3c:	40d8      	lsrs	r0, r3
 8001c3e:	4770      	bx	lr
 8001c40:	40021000 	.word	0x40021000
 8001c44:	08005019 	.word	0x08005019
 8001c48:	20000004 	.word	0x20000004

08001c4c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001c4e:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001c56:	5cd3      	ldrb	r3, [r2, r3]
 8001c58:	4a03      	ldr	r2, [pc, #12]	; (8001c68 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001c5a:	6810      	ldr	r0, [r2, #0]
}
 8001c5c:	40d8      	lsrs	r0, r3
 8001c5e:	4770      	bx	lr
 8001c60:	40021000 	.word	0x40021000
 8001c64:	08005019 	.word	0x08005019
 8001c68:	20000004 	.word	0x20000004

08001c6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001c6e:	4b45      	ldr	r3, [pc, #276]	; (8001d84 <RCCEx_PLLSAI1_Config+0x118>)
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	f012 0f03 	tst.w	r2, #3
{
 8001c76:	4605      	mov	r5, r0
 8001c78:	460e      	mov	r6, r1
 8001c7a:	461c      	mov	r4, r3
 8001c7c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001c7e:	d02a      	beq.n	8001cd6 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	f002 0203 	and.w	r2, r2, #3
 8001c86:	4282      	cmp	r2, r0
 8001c88:	d13c      	bne.n	8001d04 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8001c8a:	2a00      	cmp	r2, #0
 8001c8c:	d03a      	beq.n	8001d04 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001c8e:	68db      	ldr	r3, [r3, #12]
       ||
 8001c90:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001c92:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001c96:	3301      	adds	r3, #1
       ||
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d133      	bne.n	8001d04 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ca2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ca4:	f7ff f89c 	bl	8000de0 <HAL_GetTick>
 8001ca8:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8001caa:	6823      	ldr	r3, [r4, #0]
 8001cac:	011a      	lsls	r2, r3, #4
 8001cae:	d432      	bmi.n	8001d16 <RCCEx_PLLSAI1_Config+0xaa>
 8001cb0:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001cb2:	2e00      	cmp	r6, #0
 8001cb4:	d036      	beq.n	8001d24 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001cb6:	2e01      	cmp	r6, #1
 8001cb8:	d150      	bne.n	8001d5c <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001cba:	6922      	ldr	r2, [r4, #16]
 8001cbc:	6928      	ldr	r0, [r5, #16]
 8001cbe:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001cc2:	0840      	lsrs	r0, r0, #1
 8001cc4:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001cc8:	3801      	subs	r0, #1
 8001cca:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001cce:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001cd2:	6122      	str	r2, [r4, #16]
 8001cd4:	e032      	b.n	8001d3c <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8001cd6:	2802      	cmp	r0, #2
 8001cd8:	d010      	beq.n	8001cfc <RCCEx_PLLSAI1_Config+0x90>
 8001cda:	2803      	cmp	r0, #3
 8001cdc:	d014      	beq.n	8001d08 <RCCEx_PLLSAI1_Config+0x9c>
 8001cde:	2801      	cmp	r0, #1
 8001ce0:	d110      	bne.n	8001d04 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	079f      	lsls	r7, r3, #30
 8001ce6:	d538      	bpl.n	8001d5a <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001ce8:	68e3      	ldr	r3, [r4, #12]
 8001cea:	686a      	ldr	r2, [r5, #4]
 8001cec:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001cf0:	3a01      	subs	r2, #1
 8001cf2:	4318      	orrs	r0, r3
 8001cf4:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001cf8:	60e0      	str	r0, [r4, #12]
 8001cfa:	e7cf      	b.n	8001c9c <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001d02:	d1f1      	bne.n	8001ce8 <RCCEx_PLLSAI1_Config+0x7c>
 8001d04:	2001      	movs	r0, #1
 8001d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	0391      	lsls	r1, r2, #14
 8001d0c:	d4ec      	bmi.n	8001ce8 <RCCEx_PLLSAI1_Config+0x7c>
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001d14:	e7f5      	b.n	8001d02 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001d16:	f7ff f863 	bl	8000de0 <HAL_GetTick>
 8001d1a:	1bc0      	subs	r0, r0, r7
 8001d1c:	2802      	cmp	r0, #2
 8001d1e:	d9c4      	bls.n	8001caa <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001d20:	2003      	movs	r0, #3
 8001d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001d24:	6921      	ldr	r1, [r4, #16]
 8001d26:	68eb      	ldr	r3, [r5, #12]
 8001d28:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8001d2c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001d30:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8001d3a:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001d3c:	6823      	ldr	r3, [r4, #0]
 8001d3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d42:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d44:	f7ff f84c 	bl	8000de0 <HAL_GetTick>
 8001d48:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001d4a:	6823      	ldr	r3, [r4, #0]
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	d513      	bpl.n	8001d78 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001d50:	6923      	ldr	r3, [r4, #16]
 8001d52:	69aa      	ldr	r2, [r5, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	6123      	str	r3, [r4, #16]
 8001d58:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001d5c:	6923      	ldr	r3, [r4, #16]
 8001d5e:	6968      	ldr	r0, [r5, #20]
 8001d60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001d64:	0840      	lsrs	r0, r0, #1
 8001d66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001d6a:	3801      	subs	r0, #1
 8001d6c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001d70:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001d74:	6123      	str	r3, [r4, #16]
 8001d76:	e7e1      	b.n	8001d3c <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001d78:	f7ff f832 	bl	8000de0 <HAL_GetTick>
 8001d7c:	1b80      	subs	r0, r0, r6
 8001d7e:	2802      	cmp	r0, #2
 8001d80:	d9e3      	bls.n	8001d4a <RCCEx_PLLSAI1_Config+0xde>
 8001d82:	e7cd      	b.n	8001d20 <RCCEx_PLLSAI1_Config+0xb4>
 8001d84:	40021000 	.word	0x40021000

08001d88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001d8a:	4b3d      	ldr	r3, [pc, #244]	; (8001e80 <RCCEx_PLLSAI2_Config+0xf8>)
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	f012 0f03 	tst.w	r2, #3
{
 8001d92:	4605      	mov	r5, r0
 8001d94:	460e      	mov	r6, r1
 8001d96:	461c      	mov	r4, r3
 8001d98:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001d9a:	d028      	beq.n	8001dee <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	f002 0203 	and.w	r2, r2, #3
 8001da2:	4282      	cmp	r2, r0
 8001da4:	d13a      	bne.n	8001e1c <RCCEx_PLLSAI2_Config+0x94>
       ||
 8001da6:	2a00      	cmp	r2, #0
 8001da8:	d038      	beq.n	8001e1c <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001daa:	68db      	ldr	r3, [r3, #12]
       ||
 8001dac:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001dae:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001db2:	3301      	adds	r3, #1
       ||
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d131      	bne.n	8001e1c <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dc0:	f7ff f80e 	bl	8000de0 <HAL_GetTick>
 8001dc4:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8001dc6:	6823      	ldr	r3, [r4, #0]
 8001dc8:	009a      	lsls	r2, r3, #2
 8001dca:	d430      	bmi.n	8001e2e <RCCEx_PLLSAI2_Config+0xa6>
 8001dcc:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001dce:	2e00      	cmp	r6, #0
 8001dd0:	d034      	beq.n	8001e3c <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001dd2:	6963      	ldr	r3, [r4, #20]
 8001dd4:	6929      	ldr	r1, [r5, #16]
 8001dd6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001dda:	0849      	lsrs	r1, r1, #1
 8001ddc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001de0:	3901      	subs	r1, #1
 8001de2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001de6:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001dea:	6163      	str	r3, [r4, #20]
 8001dec:	e032      	b.n	8001e54 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8001dee:	2802      	cmp	r0, #2
 8001df0:	d010      	beq.n	8001e14 <RCCEx_PLLSAI2_Config+0x8c>
 8001df2:	2803      	cmp	r0, #3
 8001df4:	d014      	beq.n	8001e20 <RCCEx_PLLSAI2_Config+0x98>
 8001df6:	2801      	cmp	r0, #1
 8001df8:	d110      	bne.n	8001e1c <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	079f      	lsls	r7, r3, #30
 8001dfe:	d538      	bpl.n	8001e72 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001e00:	68e3      	ldr	r3, [r4, #12]
 8001e02:	686a      	ldr	r2, [r5, #4]
 8001e04:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001e08:	3a01      	subs	r2, #1
 8001e0a:	4318      	orrs	r0, r3
 8001e0c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001e10:	60e0      	str	r0, [r4, #12]
 8001e12:	e7d1      	b.n	8001db8 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001e1a:	d1f1      	bne.n	8001e00 <RCCEx_PLLSAI2_Config+0x78>
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	0391      	lsls	r1, r2, #14
 8001e24:	d4ec      	bmi.n	8001e00 <RCCEx_PLLSAI2_Config+0x78>
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001e2c:	e7f5      	b.n	8001e1a <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001e2e:	f7fe ffd7 	bl	8000de0 <HAL_GetTick>
 8001e32:	1bc0      	subs	r0, r0, r7
 8001e34:	2802      	cmp	r0, #2
 8001e36:	d9c6      	bls.n	8001dc6 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8001e38:	2003      	movs	r0, #3
 8001e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001e3c:	6962      	ldr	r2, [r4, #20]
 8001e3e:	68eb      	ldr	r3, [r5, #12]
 8001e40:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8001e44:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e48:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8001e52:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001e54:	6823      	ldr	r3, [r4, #0]
 8001e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5c:	f7fe ffc0 	bl	8000de0 <HAL_GetTick>
 8001e60:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8001e62:	6823      	ldr	r3, [r4, #0]
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	d505      	bpl.n	8001e74 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001e68:	6963      	ldr	r3, [r4, #20]
 8001e6a:	696a      	ldr	r2, [r5, #20]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	6163      	str	r3, [r4, #20]
 8001e70:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001e74:	f7fe ffb4 	bl	8000de0 <HAL_GetTick>
 8001e78:	1b80      	subs	r0, r0, r6
 8001e7a:	2802      	cmp	r0, #2
 8001e7c:	d9f1      	bls.n	8001e62 <RCCEx_PLLSAI2_Config+0xda>
 8001e7e:	e7db      	b.n	8001e38 <RCCEx_PLLSAI2_Config+0xb0>
 8001e80:	40021000 	.word	0x40021000

08001e84 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001e84:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e88:	6806      	ldr	r6, [r0, #0]
 8001e8a:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8001e8e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e90:	d024      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001e92:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001e94:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001e98:	d02c      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001e9a:	d802      	bhi.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e9c:	b1c1      	cbz	r1, 8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8001e9e:	2601      	movs	r6, #1
 8001ea0:	e01c      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001ea2:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001ea6:	d00d      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001ea8:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001eac:	d1f7      	bne.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001eae:	4a53      	ldr	r2, [pc, #332]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001eb0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001eb2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001eb6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001eba:	430b      	orrs	r3, r1
 8001ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001ec0:	2600      	movs	r6, #0
 8001ec2:	e00b      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ec4:	4a4d      	ldr	r2, [pc, #308]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001ec6:	68d3      	ldr	r3, [r2, #12]
 8001ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ecc:	60d3      	str	r3, [r2, #12]
      break;
 8001ece:	e7ee      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ed0:	3004      	adds	r0, #4
 8001ed2:	f7ff fecb 	bl	8001c6c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ed6:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	d0e8      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001edc:	6823      	ldr	r3, [r4, #0]
 8001ede:	04d8      	lsls	r0, r3, #19
 8001ee0:	d506      	bpl.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001ee2:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001ee4:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8001ee8:	d07c      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001eea:	d808      	bhi.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001eec:	b1a9      	cbz	r1, 8001f1a <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8001eee:	2601      	movs	r6, #1
 8001ef0:	4635      	mov	r5, r6
 8001ef2:	e021      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	3020      	adds	r0, #32
 8001ef8:	f7ff ff46 	bl	8001d88 <RCCEx_PLLSAI2_Config>
 8001efc:	e7eb      	b.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001efe:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8001f02:	d004      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001f04:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8001f08:	d1f1      	bne.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8001f0a:	4635      	mov	r5, r6
 8001f0c:	e009      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f0e:	4a3b      	ldr	r2, [pc, #236]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001f10:	68d3      	ldr	r3, [r2, #12]
 8001f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f16:	60d3      	str	r3, [r2, #12]
 8001f18:	e7f7      	b.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f1a:	1d20      	adds	r0, r4, #4
 8001f1c:	f7ff fea6 	bl	8001c6c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f20:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001f22:	2d00      	cmp	r5, #0
 8001f24:	d164      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f26:	4a35      	ldr	r2, [pc, #212]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001f28:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001f2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f2e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001f32:	430b      	orrs	r3, r1
 8001f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	0399      	lsls	r1, r3, #14
 8001f3c:	f140 815b 	bpl.w	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f40:	4f2e      	ldr	r7, [pc, #184]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f44:	00da      	lsls	r2, r3, #3
 8001f46:	d455      	bmi.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x170>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001f5a:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f5e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8002000 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8001f62:	f8d9 3000 	ldr.w	r3, [r9]
 8001f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6a:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8001f6e:	f7fe ff37 	bl	8000de0 <HAL_GetTick>
 8001f72:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8001f74:	f8d9 3000 	ldr.w	r3, [r9]
 8001f78:	05db      	lsls	r3, r3, #23
 8001f7a:	d543      	bpl.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x180>
    if(ret == HAL_OK)
 8001f7c:	2d00      	cmp	r5, #0
 8001f7e:	d148      	bne.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f84:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001f88:	d015      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001f8a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d011      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f96:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001f9a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fa2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001faa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001fb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fb6:	07d8      	lsls	r0, r3, #31
 8001fb8:	d509      	bpl.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x14a>
        tickstart = HAL_GetTick();
 8001fba:	f7fe ff11 	bl	8000de0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001fc2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001fc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fc8:	0799      	lsls	r1, r3, #30
 8001fca:	f140 810d 	bpl.w	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x364>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fd2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001fe0:	4635      	mov	r5, r6
 8001fe2:	e016      	b.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	f104 0020 	add.w	r0, r4, #32
 8001fea:	f7ff fecd 	bl	8001d88 <RCCEx_PLLSAI2_Config>
 8001fee:	e797      	b.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8001ff0:	462e      	mov	r6, r5
 8001ff2:	e7a1      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 8001ff4:	f04f 0800 	mov.w	r8, #0
 8001ff8:	e7b1      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002004:	f7fe feec 	bl	8000de0 <HAL_GetTick>
 8002008:	eba0 000a 	sub.w	r0, r0, sl
 800200c:	2802      	cmp	r0, #2
 800200e:	d9b1      	bls.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8002010:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002012:	f1b8 0f00 	cmp.w	r8, #0
 8002016:	d003      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002018:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800201a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201e:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002020:	6823      	ldr	r3, [r4, #0]
 8002022:	07da      	lsls	r2, r3, #31
 8002024:	d508      	bpl.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002026:	498a      	ldr	r1, [pc, #552]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002028:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800202a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800202e:	f022 0203 	bic.w	r2, r2, #3
 8002032:	4302      	orrs	r2, r0
 8002034:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002038:	079f      	lsls	r7, r3, #30
 800203a:	d508      	bpl.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800203c:	4984      	ldr	r1, [pc, #528]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800203e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002040:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002044:	f022 020c 	bic.w	r2, r2, #12
 8002048:	4302      	orrs	r2, r0
 800204a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800204e:	075e      	lsls	r6, r3, #29
 8002050:	d508      	bpl.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002052:	497f      	ldr	r1, [pc, #508]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002054:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002056:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800205a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800205e:	4302      	orrs	r2, r0
 8002060:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002064:	0718      	lsls	r0, r3, #28
 8002066:	d508      	bpl.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002068:	4979      	ldr	r1, [pc, #484]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800206a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800206c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002070:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002074:	4302      	orrs	r2, r0
 8002076:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800207a:	06d9      	lsls	r1, r3, #27
 800207c:	d508      	bpl.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800207e:	4974      	ldr	r1, [pc, #464]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002080:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002082:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002086:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800208a:	4302      	orrs	r2, r0
 800208c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002090:	069a      	lsls	r2, r3, #26
 8002092:	d508      	bpl.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002094:	496e      	ldr	r1, [pc, #440]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002096:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002098:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800209c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80020a0:	4302      	orrs	r2, r0
 80020a2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020a6:	059f      	lsls	r7, r3, #22
 80020a8:	d508      	bpl.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020aa:	4969      	ldr	r1, [pc, #420]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80020ac:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80020ae:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80020b2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80020b6:	4302      	orrs	r2, r0
 80020b8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020bc:	055e      	lsls	r6, r3, #21
 80020be:	d508      	bpl.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020c0:	4963      	ldr	r1, [pc, #396]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80020c2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80020c4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80020c8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80020cc:	4302      	orrs	r2, r0
 80020ce:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020d2:	0658      	lsls	r0, r3, #25
 80020d4:	d508      	bpl.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x264>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020d6:	495e      	ldr	r1, [pc, #376]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80020d8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80020da:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80020de:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80020e2:	4302      	orrs	r2, r0
 80020e4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020e8:	0619      	lsls	r1, r3, #24
 80020ea:	d508      	bpl.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020ec:	4958      	ldr	r1, [pc, #352]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80020ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80020f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80020f4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80020f8:	4302      	orrs	r2, r0
 80020fa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020fe:	05da      	lsls	r2, r3, #23
 8002100:	d508      	bpl.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002102:	4953      	ldr	r1, [pc, #332]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002106:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800210a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800210e:	4302      	orrs	r2, r0
 8002110:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002114:	049b      	lsls	r3, r3, #18
 8002116:	d50f      	bpl.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002118:	4a4d      	ldr	r2, [pc, #308]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800211a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800211c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002120:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002124:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002126:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800212a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800212e:	d164      	bne.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x376>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002130:	68d3      	ldr	r3, [r2, #12]
 8002132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002136:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	031f      	lsls	r7, r3, #12
 800213c:	d50f      	bpl.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800213e:	4a44      	ldr	r2, [pc, #272]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002140:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002142:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002146:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800214a:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800214c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002154:	d15c      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002156:	68d3      	ldr	r3, [r2, #12]
 8002158:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800215c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	035e      	lsls	r6, r3, #13
 8002162:	d50f      	bpl.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x300>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002164:	4a3a      	ldr	r2, [pc, #232]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002166:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002168:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800216c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002170:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002172:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002176:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800217a:	d154      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800217c:	68d3      	ldr	r3, [r2, #12]
 800217e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002182:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	0458      	lsls	r0, r3, #17
 8002188:	d512      	bpl.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800218a:	4931      	ldr	r1, [pc, #196]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800218c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800218e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002192:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002196:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002198:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800219c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021a0:	d14c      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021a2:	2102      	movs	r1, #2
 80021a4:	1d20      	adds	r0, r4, #4
 80021a6:	f7ff fd61 	bl	8001c6c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80021aa:	2800      	cmp	r0, #0
 80021ac:	bf18      	it	ne
 80021ae:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021b0:	6822      	ldr	r2, [r4, #0]
 80021b2:	0411      	lsls	r1, r2, #16
 80021b4:	d508      	bpl.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021b6:	4926      	ldr	r1, [pc, #152]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80021b8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80021ba:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80021be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021c2:	4303      	orrs	r3, r0
 80021c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021c8:	03d3      	lsls	r3, r2, #15
 80021ca:	d509      	bpl.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80021cc:	4a20      	ldr	r2, [pc, #128]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80021ce:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80021d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80021d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021da:	430b      	orrs	r3, r1
 80021dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80021e0:	4628      	mov	r0, r5
 80021e2:	b002      	add	sp, #8
 80021e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e8:	f7fe fdfa 	bl	8000de0 <HAL_GetTick>
 80021ec:	1b40      	subs	r0, r0, r5
 80021ee:	4548      	cmp	r0, r9
 80021f0:	f67f aee8 	bls.w	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80021f4:	e70c      	b.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80021f6:	4635      	mov	r5, r6
 80021f8:	e712      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021fa:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80021fe:	d19b      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002200:	2101      	movs	r1, #1
 8002202:	1d20      	adds	r0, r4, #4
 8002204:	f7ff fd32 	bl	8001c6c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002208:	2800      	cmp	r0, #0
 800220a:	bf18      	it	ne
 800220c:	4605      	movne	r5, r0
 800220e:	e793      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002210:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002214:	d1a3      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002216:	2101      	movs	r1, #1
 8002218:	1d20      	adds	r0, r4, #4
 800221a:	f7ff fd27 	bl	8001c6c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800221e:	2800      	cmp	r0, #0
 8002220:	bf18      	it	ne
 8002222:	4605      	movne	r5, r0
 8002224:	e79b      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002226:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800222a:	d1ab      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x300>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800222c:	2101      	movs	r1, #1
 800222e:	1d20      	adds	r0, r4, #4
 8002230:	f7ff fd1c 	bl	8001c6c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002234:	2800      	cmp	r0, #0
 8002236:	bf18      	it	ne
 8002238:	4605      	movne	r5, r0
 800223a:	e7a3      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x300>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800223c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002240:	d1b6      	bne.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002242:	2102      	movs	r1, #2
 8002244:	f104 0020 	add.w	r0, r4, #32
 8002248:	f7ff fd9e 	bl	8001d88 <RCCEx_PLLSAI2_Config>
 800224c:	e7ad      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x326>
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000

08002254 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002254:	4a02      	ldr	r2, [pc, #8]	; (8002260 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8002256:	6813      	ldr	r3, [r2, #0]
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	4770      	bx	lr
 8002260:	40021000 	.word	0x40021000

08002264 <HAL_RNG_Init>:
  * @brief  Initialize the RNG peripheral and initialize the associated handle.
  * @param  hrng: pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{ 
 8002264:	b510      	push	{r4, lr}
  /* Check the RNG handle allocation */
  if(hrng == NULL)
 8002266:	4604      	mov	r4, r0
 8002268:	b188      	cbz	r0, 800228e <HAL_RNG_Init+0x2a>
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
#if defined(RNG_CR_CED)
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
#endif /* defined(RNG_CR_CED) */

  if(hrng->State == HAL_RNG_STATE_RESET)
 800226a:	7943      	ldrb	r3, [r0, #5]
 800226c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002270:	b913      	cbnz	r3, 8002278 <HAL_RNG_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002272:	7102      	strb	r2, [r0, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002274:	f001 fed4 	bl	8004020 <HAL_RNG_MspInit>
  /* Clock Error Detection configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002278:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800227a:	2302      	movs	r3, #2
 800227c:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800227e:	6813      	ldr	r3, [r2, #0]
 8002280:	f043 0304 	orr.w	r3, r3, #4
 8002284:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002286:	2301      	movs	r3, #1
 8002288:	7163      	strb	r3, [r4, #5]
  
  /* Return function status */
  return HAL_OK;
 800228a:	2000      	movs	r0, #0
 800228c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800228e:	2001      	movs	r0, #1
}
 8002290:	bd10      	pop	{r4, pc}

08002292 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002292:	6802      	ldr	r2, [r0, #0]
{
 8002294:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002296:	68d3      	ldr	r3, [r2, #12]
 8002298:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800229c:	60d3      	str	r3, [r2, #12]
{
 800229e:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 80022a0:	f7fe fd9e 	bl	8000de0 <HAL_GetTick>
 80022a4:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	069b      	lsls	r3, r3, #26
 80022ac:	d501      	bpl.n	80022b2 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80022ae:	2000      	movs	r0, #0
 80022b0:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80022b2:	f7fe fd95 	bl	8000de0 <HAL_GetTick>
 80022b6:	1b40      	subs	r0, r0, r5
 80022b8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80022bc:	d9f3      	bls.n	80022a6 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 80022be:	2003      	movs	r0, #3
}
 80022c0:	bd38      	pop	{r3, r4, r5, pc}

080022c2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80022c2:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80022c4:	6803      	ldr	r3, [r0, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	0652      	lsls	r2, r2, #25
{
 80022ca:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80022cc:	d501      	bpl.n	80022d2 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80022ce:	2000      	movs	r0, #0
 80022d0:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80022d2:	f04f 32ff 	mov.w	r2, #4294967295
 80022d6:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80022d8:	f7fe fd82 	bl	8000de0 <HAL_GetTick>
 80022dc:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	065b      	lsls	r3, r3, #25
 80022e4:	d4f3      	bmi.n	80022ce <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80022e6:	f7fe fd7b 	bl	8000de0 <HAL_GetTick>
 80022ea:	1b40      	subs	r0, r0, r5
 80022ec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80022f0:	d9f5      	bls.n	80022de <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80022f2:	2003      	movs	r0, #3
}
 80022f4:	bd38      	pop	{r3, r4, r5, pc}

080022f6 <HAL_RTC_Init>:
{
 80022f6:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80022f8:	4604      	mov	r4, r0
 80022fa:	b1d8      	cbz	r0, 8002334 <HAL_RTC_Init+0x3e>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80022fc:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002300:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002304:	b91b      	cbnz	r3, 800230e <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 8002306:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 800230a:	f001 fe9f 	bl	800404c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800230e:	2302      	movs	r3, #2
 8002310:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	22ca      	movs	r2, #202	; 0xca
 8002318:	625a      	str	r2, [r3, #36]	; 0x24
 800231a:	2253      	movs	r2, #83	; 0x53
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800231e:	4620      	mov	r0, r4
 8002320:	f7ff ffcf 	bl	80022c2 <RTC_EnterInitMode>
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	4605      	mov	r5, r0
 8002328:	b130      	cbz	r0, 8002338 <HAL_RTC_Init+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800232a:	22ff      	movs	r2, #255	; 0xff
 800232c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800232e:	2304      	movs	r3, #4
 8002330:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     return HAL_ERROR;
 8002334:	2501      	movs	r5, #1
 8002336:	e031      	b.n	800239c <HAL_RTC_Init+0xa6>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002338:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800233a:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800233c:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8002340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002344:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002346:	6862      	ldr	r2, [r4, #4]
 8002348:	6899      	ldr	r1, [r3, #8]
 800234a:	4302      	orrs	r2, r0
 800234c:	69a0      	ldr	r0, [r4, #24]
 800234e:	4302      	orrs	r2, r0
 8002350:	430a      	orrs	r2, r1
 8002352:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002354:	68e2      	ldr	r2, [r4, #12]
 8002356:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	68a1      	ldr	r1, [r4, #8]
 800235c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002360:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002368:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	069b      	lsls	r3, r3, #26
 800236e:	d405      	bmi.n	800237c <HAL_RTC_Init+0x86>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002370:	4620      	mov	r0, r4
 8002372:	f7ff ff8e 	bl	8002292 <HAL_RTC_WaitForSynchro>
 8002376:	b108      	cbz	r0, 800237c <HAL_RTC_Init+0x86>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002378:	6823      	ldr	r3, [r4, #0]
 800237a:	e7d6      	b.n	800232a <HAL_RTC_Init+0x34>
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800237c:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800237e:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002380:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002382:	f022 0203 	bic.w	r2, r2, #3
 8002386:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002388:	69e2      	ldr	r2, [r4, #28]
 800238a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800238c:	4302      	orrs	r2, r0
 800238e:	430a      	orrs	r2, r1
 8002390:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002392:	22ff      	movs	r2, #255	; 0xff
 8002394:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002396:	2301      	movs	r3, #1
 8002398:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800239c:	4628      	mov	r0, r5
 800239e:	bd38      	pop	{r3, r4, r5, pc}

080023a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023a0:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023a2:	4604      	mov	r4, r0
 80023a4:	2800      	cmp	r0, #0
 80023a6:	d04a      	beq.n	800243e <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023ac:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80023b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023b4:	b91b      	cbnz	r3, 80023be <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023b6:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023ba:	f001 fe57 	bl	800406c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023be:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023c0:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80023c2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80023c6:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023c8:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80023ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023ce:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80023d2:	600b      	str	r3, [r1, #0]
 80023d4:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023d8:	d92e      	bls.n	8002438 <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80023da:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80023dc:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023e0:	bf18      	it	ne
 80023e2:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80023e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023e6:	b92b      	cbnz	r3, 80023f4 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023e8:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80023ec:	bf8c      	ite	hi
 80023ee:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80023f0:	2301      	movls	r3, #1
 80023f2:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80023f4:	68a6      	ldr	r6, [r4, #8]
 80023f6:	6863      	ldr	r3, [r4, #4]
 80023f8:	69a5      	ldr	r5, [r4, #24]
 80023fa:	4333      	orrs	r3, r6
 80023fc:	6926      	ldr	r6, [r4, #16]
 80023fe:	4333      	orrs	r3, r6
 8002400:	6966      	ldr	r6, [r4, #20]
 8002402:	4333      	orrs	r3, r6
 8002404:	69e6      	ldr	r6, [r4, #28]
 8002406:	4333      	orrs	r3, r6
 8002408:	6a26      	ldr	r6, [r4, #32]
 800240a:	4333      	orrs	r3, r6
 800240c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800240e:	4333      	orrs	r3, r6
 8002410:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8002414:	4333      	orrs	r3, r6
 8002416:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002418:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800241a:	431a      	orrs	r2, r3
 800241c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800241e:	0c2d      	lsrs	r5, r5, #16
 8002420:	431a      	orrs	r2, r3
 8002422:	f005 0504 	and.w	r5, r5, #4
 8002426:	432a      	orrs	r2, r5
 8002428:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 800242a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800242c:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800242e:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002430:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002432:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8002436:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002438:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800243c:	e7d0      	b.n	80023e0 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 800243e:	2001      	movs	r0, #1
}
 8002440:	bd70      	pop	{r4, r5, r6, pc}

08002442 <UART_EndRxTransfer>:
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002442:	6803      	ldr	r3, [r0, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800244a:	601a      	str	r2, [r3, #0]
#endif
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	f022 0201 	bic.w	r2, r2, #1
 8002452:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002454:	2320      	movs	r3, #32
 8002456:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
  
  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800245a:	2300      	movs	r3, #0
 800245c:	6603      	str	r3, [r0, #96]	; 0x60
 800245e:	4770      	bx	lr

08002460 <HAL_UART_Transmit_DMA>:
{
 8002460:	b538      	push	{r3, r4, r5, lr}
 8002462:	4604      	mov	r4, r0
 8002464:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002466:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
 800246a:	2a20      	cmp	r2, #32
 800246c:	d12b      	bne.n	80024c6 <HAL_UART_Transmit_DMA+0x66>
    if((pData == NULL ) || (Size == 0U))
 800246e:	b341      	cbz	r1, 80024c2 <HAL_UART_Transmit_DMA+0x62>
 8002470:	b33b      	cbz	r3, 80024c2 <HAL_UART_Transmit_DMA+0x62>
    __HAL_LOCK(huart);
 8002472:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 8002476:	2a01      	cmp	r2, #1
 8002478:	d025      	beq.n	80024c6 <HAL_UART_Transmit_DMA+0x66>
 800247a:	2201      	movs	r2, #1
 800247c:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002480:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    huart->TxXferCount = Size;
 8002482:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002486:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002488:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800248a:	6765      	str	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800248c:	f884 2071 	strb.w	r2, [r4, #113]	; 0x71
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002490:	4a0e      	ldr	r2, [pc, #56]	; (80024cc <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize  = Size;
 8002492:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->pTxBuffPtr  = pData;
 8002496:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002498:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800249a:	4a0d      	ldr	r2, [pc, #52]	; (80024d0 <HAL_UART_Transmit_DMA+0x70>)
 800249c:	6302      	str	r2, [r0, #48]	; 0x30
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800249e:	4a0d      	ldr	r2, [pc, #52]	; (80024d4 <HAL_UART_Transmit_DMA+0x74>)
 80024a0:	6342      	str	r2, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80024a2:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 80024a4:	6385      	str	r5, [r0, #56]	; 0x38
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80024a6:	3228      	adds	r2, #40	; 0x28
 80024a8:	f7fe fd92 	bl	8000fd0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80024ac:	6823      	ldr	r3, [r4, #0]
 80024ae:	2240      	movs	r2, #64	; 0x40
 80024b0:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80024b2:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 80024b4:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80024b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024bc:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 80024be:	4628      	mov	r0, r5
 80024c0:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80024c2:	2001      	movs	r0, #1
 80024c4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 80024c6:	2002      	movs	r0, #2
}
 80024c8:	bd38      	pop	{r3, r4, r5, pc}
 80024ca:	bf00      	nop
 80024cc:	080025bf 	.word	0x080025bf
 80024d0:	080025f3 	.word	0x080025f3
 80024d4:	08002645 	.word	0x08002645

080024d8 <HAL_UART_Receive_DMA>:
{
 80024d8:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80024da:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 80024de:	2a20      	cmp	r2, #32
{
 80024e0:	b570      	push	{r4, r5, r6, lr}
 80024e2:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_READY)
 80024e4:	d133      	bne.n	800254e <HAL_UART_Receive_DMA+0x76>
    if((pData == NULL ) || (Size == 0U))
 80024e6:	2900      	cmp	r1, #0
 80024e8:	d02f      	beq.n	800254a <HAL_UART_Receive_DMA+0x72>
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d02d      	beq.n	800254a <HAL_UART_Receive_DMA+0x72>
    __HAL_LOCK(huart);
 80024ee:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
 80024f2:	2a01      	cmp	r2, #1
 80024f4:	d02b      	beq.n	800254e <HAL_UART_Receive_DMA+0x76>
 80024f6:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f8:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80024fa:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024fe:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002500:	6745      	str	r5, [r0, #116]	; 0x74
    huart->pRxBuffPtr = pData;
 8002502:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8002504:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002508:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800250c:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800250e:	4a11      	ldr	r2, [pc, #68]	; (8002554 <HAL_UART_Receive_DMA+0x7c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size);
 8002510:	6826      	ldr	r6, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002512:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002514:	4a10      	ldr	r2, [pc, #64]	; (8002558 <HAL_UART_Receive_DMA+0x80>)
 8002516:	6302      	str	r2, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002518:	4a10      	ldr	r2, [pc, #64]	; (800255c <HAL_UART_Receive_DMA+0x84>)
 800251a:	6342      	str	r2, [r0, #52]	; 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 800251c:	6385      	str	r5, [r0, #56]	; 0x38
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size);
 800251e:	460a      	mov	r2, r1
 8002520:	f106 0124 	add.w	r1, r6, #36	; 0x24
 8002524:	f7fe fd54 	bl	8000fd0 <HAL_DMA_Start_IT>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002528:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 800252a:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002534:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	f042 0201 	orr.w	r2, r2, #1
 800253c:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002544:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8002546:	4628      	mov	r0, r5
 8002548:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800254a:	2001      	movs	r0, #1
 800254c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800254e:	2002      	movs	r0, #2
}
 8002550:	bd70      	pop	{r4, r5, r6, pc}
 8002552:	bf00      	nop
 8002554:	080025fd 	.word	0x080025fd
 8002558:	08002639 	.word	0x08002639
 800255c:	08002645 	.word	0x08002645

08002560 <HAL_UART_DMAStop>:
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) &&
 8002560:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002564:	2b21      	cmp	r3, #33	; 0x21
{
 8002566:	b510      	push	{r4, lr}
 8002568:	4604      	mov	r4, r0
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) &&
 800256a:	d113      	bne.n	8002594 <HAL_UART_DMAStop+0x34>
      (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)))
 800256c:	6803      	ldr	r3, [r0, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) &&
 8002570:	0611      	lsls	r1, r2, #24
 8002572:	d50f      	bpl.n	8002594 <HAL_UART_DMAStop+0x34>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002574:	689a      	ldr	r2, [r3, #8]
    if(huart->hdmatx != NULL)
 8002576:	6e80      	ldr	r0, [r0, #104]	; 0x68
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800257c:	609a      	str	r2, [r3, #8]
    if(huart->hdmatx != NULL)
 800257e:	b108      	cbz	r0, 8002584 <HAL_UART_DMAStop+0x24>
      HAL_DMA_Abort(huart->hdmatx);
 8002580:	f7fe fd64 	bl	800104c <HAL_DMA_Abort>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002584:	6822      	ldr	r2, [r4, #0]
 8002586:	6813      	ldr	r3, [r2, #0]
 8002588:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800258c:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800258e:	2320      	movs	r3, #32
 8002590:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) &&
 8002594:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8002598:	2b22      	cmp	r3, #34	; 0x22
 800259a:	d10e      	bne.n	80025ba <HAL_UART_DMAStop+0x5a>
      (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) &&
 80025a0:	0652      	lsls	r2, r2, #25
 80025a2:	d50a      	bpl.n	80025ba <HAL_UART_DMAStop+0x5a>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025a4:	689a      	ldr	r2, [r3, #8]
    if(huart->hdmarx != NULL)
 80025a6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ac:	609a      	str	r2, [r3, #8]
    if(huart->hdmarx != NULL)
 80025ae:	b108      	cbz	r0, 80025b4 <HAL_UART_DMAStop+0x54>
      HAL_DMA_Abort(huart->hdmarx);
 80025b0:	f7fe fd4c 	bl	800104c <HAL_DMA_Abort>
    UART_EndRxTransfer(huart);
 80025b4:	4620      	mov	r0, r4
 80025b6:	f7ff ff44 	bl	8002442 <UART_EndRxTransfer>
}
 80025ba:	2000      	movs	r0, #0
 80025bc:	bd10      	pop	{r4, pc}

080025be <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80025be:	b508      	push	{r3, lr}
 80025c0:	4603      	mov	r3, r0
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80025c2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f013 0320 	ands.w	r3, r3, #32
 80025cc:	d10d      	bne.n	80025ea <UART_DMATransmitCplt+0x2c>
  {  
    huart->TxXferCount = 0U;
 80025ce:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80025d2:	6803      	ldr	r3, [r0, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025da:	609a      	str	r2, [r3, #8]
    
    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e2:	601a      	str	r2, [r3, #0]
  	huart->gState = HAL_UART_STATE_READY;
 80025e4:	2320      	movs	r3, #32
 80025e6:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
  	HAL_UART_TxCpltCallback(huart);
  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 80025ea:	f7fe f8b3 	bl	8000754 <HAL_UART_TxCpltCallback>
 80025ee:	bd08      	pop	{r3, pc}

080025f0 <HAL_UART_TxHalfCpltCallback>:
 80025f0:	4770      	bx	lr

080025f2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80025f2:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  HAL_UART_TxHalfCpltCallback(huart);
 80025f4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80025f6:	f7ff fffb 	bl	80025f0 <HAL_UART_TxHalfCpltCallback>
 80025fa:	bd08      	pop	{r3, pc}

080025fc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80025fc:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80025fe:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002600:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f013 0320 	ands.w	r3, r3, #32
 8002608:	d111      	bne.n	800262e <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;
 800260a:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
    
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800260e:	6813      	ldr	r3, [r2, #0]
 8002610:	6819      	ldr	r1, [r3, #0]
 8002612:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002616:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002618:	6899      	ldr	r1, [r3, #8]
 800261a:	f021 0101 	bic.w	r1, r1, #1
 800261e:	6099      	str	r1, [r3, #8]
    
    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002620:	6899      	ldr	r1, [r3, #8]
 8002622:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002626:	6099      	str	r1, [r3, #8]
    
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002628:	2320      	movs	r3, #32
 800262a:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
  }
  
  HAL_UART_RxCpltCallback(huart);
 800262e:	4610      	mov	r0, r2
 8002630:	f7fe f836 	bl	80006a0 <HAL_UART_RxCpltCallback>
 8002634:	bd08      	pop	{r3, pc}

08002636 <HAL_UART_RxHalfCpltCallback>:
 8002636:	4770      	bx	lr

08002638 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002638:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  HAL_UART_RxHalfCpltCallback(huart);
 800263a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800263c:	f7ff fffb 	bl	8002636 <HAL_UART_RxHalfCpltCallback>
 8002640:	bd08      	pop	{r3, pc}

08002642 <HAL_UART_ErrorCallback>:
 8002642:	4770      	bx	lr

08002644 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002644:	6a81      	ldr	r1, [r0, #40]	; 0x28
{
 8002646:	b508      	push	{r3, lr}
  
  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002648:	f891 3071 	ldrb.w	r3, [r1, #113]	; 0x71
 800264c:	2b21      	cmp	r3, #33	; 0x21
 800264e:	d10d      	bne.n	800266c <UART_DMAError+0x28>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8002650:	680b      	ldr	r3, [r1, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	0612      	lsls	r2, r2, #24
 8002656:	d509      	bpl.n	800266c <UART_DMAError+0x28>
  {
    huart->TxXferCount = 0U;
 8002658:	2200      	movs	r2, #0
 800265a:	f8a1 2052 	strh.w	r2, [r1, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002664:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002666:	2320      	movs	r3, #32
 8002668:	f881 3071 	strb.w	r3, [r1, #113]	; 0x71
    UART_EndTxTransfer(huart);
  }
  
  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800266c:	f891 3072 	ldrb.w	r3, [r1, #114]	; 0x72
 8002670:	2b22      	cmp	r3, #34	; 0x22
 8002672:	d109      	bne.n	8002688 <UART_DMAError+0x44>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8002674:	680b      	ldr	r3, [r1, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	065b      	lsls	r3, r3, #25
 800267a:	d505      	bpl.n	8002688 <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8002682:	4608      	mov	r0, r1
 8002684:	f7ff fedd 	bl	8002442 <UART_EndRxTransfer>
  }
  
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002688:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 800268a:	f043 0310 	orr.w	r3, r3, #16
 800268e:	674b      	str	r3, [r1, #116]	; 0x74
  HAL_UART_ErrorCallback(huart);
 8002690:	4608      	mov	r0, r1
 8002692:	f7ff ffd6 	bl	8002642 <HAL_UART_ErrorCallback>
 8002696:	bd08      	pop	{r3, pc}

08002698 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002698:	6803      	ldr	r3, [r0, #0]
 800269a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800269c:	6819      	ldr	r1, [r3, #0]
{
 800269e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80026a0:	0716      	lsls	r6, r2, #28
{
 80026a2:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026a4:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 80026a6:	d10a      	bne.n	80026be <HAL_UART_IRQHandler+0x26>
    if(((isrflags & USART_ISR_RXNE) != RESET)
 80026a8:	0696      	lsls	r6, r2, #26
 80026aa:	d565      	bpl.n	8002778 <HAL_UART_IRQHandler+0xe0>
       && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026ac:	068e      	lsls	r6, r1, #26
 80026ae:	d563      	bpl.n	8002778 <HAL_UART_IRQHandler+0xe0>
      if (huart->RxISR != NULL) {huart->RxISR(huart);}
 80026b0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 8089 	beq.w	80027ca <HAL_UART_IRQHandler+0x132>
}
 80026b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 80026bc:	4718      	bx	r3
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80026be:	f015 0001 	ands.w	r0, r5, #1
 80026c2:	d102      	bne.n	80026ca <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80026c4:	f411 7f90 	tst.w	r1, #288	; 0x120
 80026c8:	d056      	beq.n	8002778 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026ca:	07d5      	lsls	r5, r2, #31
 80026cc:	d507      	bpl.n	80026de <HAL_UART_IRQHandler+0x46>
 80026ce:	05ce      	lsls	r6, r1, #23
 80026d0:	d505      	bpl.n	80026de <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80026d2:	2501      	movs	r5, #1
 80026d4:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026d6:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80026d8:	f045 0501 	orr.w	r5, r5, #1
 80026dc:	6765      	str	r5, [r4, #116]	; 0x74
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026de:	0795      	lsls	r5, r2, #30
 80026e0:	d506      	bpl.n	80026f0 <HAL_UART_IRQHandler+0x58>
 80026e2:	b128      	cbz	r0, 80026f0 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80026e4:	2502      	movs	r5, #2
 80026e6:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026e8:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80026ea:	f045 0504 	orr.w	r5, r5, #4
 80026ee:	6765      	str	r5, [r4, #116]	; 0x74
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026f0:	0756      	lsls	r6, r2, #29
 80026f2:	d506      	bpl.n	8002702 <HAL_UART_IRQHandler+0x6a>
 80026f4:	b128      	cbz	r0, 8002702 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80026f6:	2504      	movs	r5, #4
 80026f8:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026fa:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80026fc:	f045 0502 	orr.w	r5, r5, #2
 8002700:	6765      	str	r5, [r4, #116]	; 0x74
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 8002702:	0715      	lsls	r5, r2, #28
 8002704:	d507      	bpl.n	8002716 <HAL_UART_IRQHandler+0x7e>
       &&(  ((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8002706:	068e      	lsls	r6, r1, #26
 8002708:	d400      	bmi.n	800270c <HAL_UART_IRQHandler+0x74>
 800270a:	b120      	cbz	r0, 8002716 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800270c:	2008      	movs	r0, #8
 800270e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002710:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002712:	4303      	orrs	r3, r0
 8002714:	6763      	str	r3, [r4, #116]	; 0x74
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002716:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002718:	2b00      	cmp	r3, #0
 800271a:	d056      	beq.n	80027ca <HAL_UART_IRQHandler+0x132>
      if(((isrflags & USART_ISR_RXNE) != RESET)
 800271c:	0695      	lsls	r5, r2, #26
 800271e:	d505      	bpl.n	800272c <HAL_UART_IRQHandler+0x94>
         && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002720:	0688      	lsls	r0, r1, #26
 8002722:	d503      	bpl.n	800272c <HAL_UART_IRQHandler+0x94>
        if (huart->RxISR != NULL) {huart->RxISR(huart);}
 8002724:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002726:	b10b      	cbz	r3, 800272c <HAL_UART_IRQHandler+0x94>
 8002728:	4620      	mov	r0, r4
 800272a:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800272c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800272e:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 8002730:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002732:	d404      	bmi.n	800273e <HAL_UART_IRQHandler+0xa6>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002738:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800273c:	d018      	beq.n	8002770 <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 800273e:	f7ff fe80 	bl	8002442 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002742:	6823      	ldr	r3, [r4, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	0652      	lsls	r2, r2, #25
 8002748:	d50e      	bpl.n	8002768 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800274a:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800274c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800274e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002752:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002754:	b140      	cbz	r0, 8002768 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002756:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <HAL_UART_IRQHandler+0x134>)
 8002758:	6383      	str	r3, [r0, #56]	; 0x38
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800275a:	f7fe fc90 	bl	800107e <HAL_DMA_Abort_IT>
 800275e:	2800      	cmp	r0, #0
 8002760:	d033      	beq.n	80027ca <HAL_UART_IRQHandler+0x132>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002762:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002764:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002766:	e7a7      	b.n	80026b8 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8002768:	4620      	mov	r0, r4
 800276a:	f7ff ff6a 	bl	8002642 <HAL_UART_ErrorCallback>
 800276e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002770:	f7ff ff67 	bl	8002642 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002774:	6765      	str	r5, [r4, #116]	; 0x74
 8002776:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8002778:	02d6      	lsls	r6, r2, #11
 800277a:	d50e      	bpl.n	800279a <HAL_UART_IRQHandler+0x102>
 800277c:	0268      	lsls	r0, r5, #9
 800277e:	d50c      	bpl.n	800279a <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002780:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002784:	621a      	str	r2, [r3, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8002786:	2320      	movs	r3, #32
 8002788:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    HAL_UARTEx_WakeupCallback(huart);
 800278c:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 800278e:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
}
 8002792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002796:	f000 bb03 	b.w	8002da0 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET)
 800279a:	0616      	lsls	r6, r2, #24
 800279c:	d505      	bpl.n	80027aa <HAL_UART_IRQHandler+0x112>
     && ((cr1its & USART_CR1_TXEIE) != RESET))
 800279e:	060d      	lsls	r5, r1, #24
 80027a0:	d503      	bpl.n	80027aa <HAL_UART_IRQHandler+0x112>
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 80027a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027a4:	b18b      	cbz	r3, 80027ca <HAL_UART_IRQHandler+0x132>
 80027a6:	4620      	mov	r0, r4
 80027a8:	e786      	b.n	80026b8 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027aa:	0650      	lsls	r0, r2, #25
 80027ac:	d50d      	bpl.n	80027ca <HAL_UART_IRQHandler+0x132>
 80027ae:	064a      	lsls	r2, r1, #25
 80027b0:	d50b      	bpl.n	80027ca <HAL_UART_IRQHandler+0x132>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027b8:	601a      	str	r2, [r3, #0]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027ba:	2320      	movs	r3, #32
 80027bc:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  
  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	6663      	str	r3, [r4, #100]	; 0x64
  
  HAL_UART_TxCpltCallback(huart);
 80027c4:	4620      	mov	r0, r4
 80027c6:	f7fd ffc5 	bl	8000754 <HAL_UART_TxCpltCallback>
 80027ca:	bd70      	pop	{r4, r5, r6, pc}
 80027cc:	080027d1 	.word	0x080027d1

080027d0 <UART_DMAAbortOnError>:
{
 80027d0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80027d2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80027da:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80027de:	f7ff ff30 	bl	8002642 <HAL_UART_ErrorCallback>
 80027e2:	bd08      	pop	{r3, pc}

080027e4 <UART_SetConfig>:
  if(UART_INSTANCE_LOWPOWER(huart))
 80027e4:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027e6:	69c1      	ldr	r1, [r0, #28]
{
 80027e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ea:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027ec:	6883      	ldr	r3, [r0, #8]
 80027ee:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027f0:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027f2:	4303      	orrs	r3, r0
 80027f4:	6960      	ldr	r0, [r4, #20]
 80027f6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027f8:	48ba      	ldr	r0, [pc, #744]	; (8002ae4 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027fa:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027fc:	4028      	ands	r0, r5
 80027fe:	4303      	orrs	r3, r0
 8002800:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002802:	6853      	ldr	r3, [r2, #4]
 8002804:	68e0      	ldr	r0, [r4, #12]
 8002806:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800280a:	4303      	orrs	r3, r0
 800280c:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800280e:	4bb6      	ldr	r3, [pc, #728]	; (8002ae8 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002810:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002812:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8002814:	bf1c      	itt	ne
 8002816:	6a23      	ldrne	r3, [r4, #32]
 8002818:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800281a:	6893      	ldr	r3, [r2, #8]
 800281c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002820:	4303      	orrs	r3, r0
 8002822:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002824:	4bb1      	ldr	r3, [pc, #708]	; (8002aec <UART_SetConfig+0x308>)
 8002826:	429a      	cmp	r2, r3
 8002828:	d119      	bne.n	800285e <UART_SetConfig+0x7a>
 800282a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800282e:	4ab0      	ldr	r2, [pc, #704]	; (8002af0 <UART_SetConfig+0x30c>)
 8002830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002834:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002838:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800283c:	5cd3      	ldrb	r3, [r2, r3]
 800283e:	f040 8138 	bne.w	8002ab2 <UART_SetConfig+0x2ce>
    switch (clocksource)
 8002842:	2b08      	cmp	r3, #8
 8002844:	f200 808f 	bhi.w	8002966 <UART_SetConfig+0x182>
 8002848:	e8df f013 	tbh	[pc, r3, lsl #1]
 800284c:	00ca011a 	.word	0x00ca011a
 8002850:	008d00f9 	.word	0x008d00f9
 8002854:	008d0114 	.word	0x008d0114
 8002858:	008d008d 	.word	0x008d008d
 800285c:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 800285e:	4ba5      	ldr	r3, [pc, #660]	; (8002af4 <UART_SetConfig+0x310>)
 8002860:	429a      	cmp	r2, r3
 8002862:	d107      	bne.n	8002874 <UART_SetConfig+0x90>
 8002864:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002868:	4aa3      	ldr	r2, [pc, #652]	; (8002af8 <UART_SetConfig+0x314>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	e7e1      	b.n	8002838 <UART_SetConfig+0x54>
 8002874:	4ba1      	ldr	r3, [pc, #644]	; (8002afc <UART_SetConfig+0x318>)
 8002876:	429a      	cmp	r2, r3
 8002878:	d123      	bne.n	80028c2 <UART_SetConfig+0xde>
 800287a:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002882:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002886:	2b10      	cmp	r3, #16
 8002888:	f000 80f1 	beq.w	8002a6e <UART_SetConfig+0x28a>
 800288c:	d80b      	bhi.n	80028a6 <UART_SetConfig+0xc2>
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 80f3 	beq.w	8002a7a <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002894:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
      ret = HAL_ERROR;
 8002898:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800289c:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028a0:	f000 80f8 	beq.w	8002a94 <UART_SetConfig+0x2b0>
 80028a4:	e0a8      	b.n	80029f8 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	f000 80c6 	beq.w	8002a38 <UART_SetConfig+0x254>
 80028ac:	2b30      	cmp	r3, #48	; 0x30
 80028ae:	d1f1      	bne.n	8002894 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028b0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80028b4:	f040 80b8 	bne.w	8002a28 <UART_SetConfig+0x244>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80028b8:	6860      	ldr	r0, [r4, #4]
 80028ba:	0843      	lsrs	r3, r0, #1
 80028bc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80028c0:	e0c3      	b.n	8002a4a <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028c2:	4b8f      	ldr	r3, [pc, #572]	; (8002b00 <UART_SetConfig+0x31c>)
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d11e      	bne.n	8002906 <UART_SetConfig+0x122>
 80028c8:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80028d4:	2b40      	cmp	r3, #64	; 0x40
 80028d6:	f000 80bb 	beq.w	8002a50 <UART_SetConfig+0x26c>
 80028da:	d80a      	bhi.n	80028f2 <UART_SetConfig+0x10e>
 80028dc:	b97b      	cbnz	r3, 80028fe <UART_SetConfig+0x11a>
  if(UART_INSTANCE_LOWPOWER(huart))
 80028de:	4b82      	ldr	r3, [pc, #520]	; (8002ae8 <UART_SetConfig+0x304>)
 80028e0:	429a      	cmp	r2, r3
 80028e2:	f040 80ca 	bne.w	8002a7a <UART_SetConfig+0x296>
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80028e6:	f7ff f9a1 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
      break;
 80028ea:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 80028ec:	bbb0      	cbnz	r0, 800295c <UART_SetConfig+0x178>
 80028ee:	4602      	mov	r2, r0
 80028f0:	e03a      	b.n	8002968 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028f2:	2b80      	cmp	r3, #128	; 0x80
 80028f4:	f000 809d 	beq.w	8002a32 <UART_SetConfig+0x24e>
 80028f8:	2bc0      	cmp	r3, #192	; 0xc0
 80028fa:	f000 80b0 	beq.w	8002a5e <UART_SetConfig+0x27a>
  if(UART_INSTANCE_LOWPOWER(huart))
 80028fe:	4b7a      	ldr	r3, [pc, #488]	; (8002ae8 <UART_SetConfig+0x304>)
 8002900:	429a      	cmp	r2, r3
 8002902:	d1c7      	bne.n	8002894 <UART_SetConfig+0xb0>
 8002904:	e02f      	b.n	8002966 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002906:	4b7f      	ldr	r3, [pc, #508]	; (8002b04 <UART_SetConfig+0x320>)
 8002908:	429a      	cmp	r2, r3
 800290a:	d111      	bne.n	8002930 <UART_SetConfig+0x14c>
 800290c:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800291c:	f000 8098 	beq.w	8002a50 <UART_SetConfig+0x26c>
 8002920:	d9dc      	bls.n	80028dc <UART_SetConfig+0xf8>
 8002922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002926:	f000 8084 	beq.w	8002a32 <UART_SetConfig+0x24e>
 800292a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800292e:	e7e4      	b.n	80028fa <UART_SetConfig+0x116>
 8002930:	4b6d      	ldr	r3, [pc, #436]	; (8002ae8 <UART_SetConfig+0x304>)
 8002932:	429a      	cmp	r2, r3
 8002934:	d1ae      	bne.n	8002894 <UART_SetConfig+0xb0>
 8002936:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002946:	f000 8083 	beq.w	8002a50 <UART_SetConfig+0x26c>
 800294a:	d9c7      	bls.n	80028dc <UART_SetConfig+0xf8>
 800294c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002950:	d06f      	beq.n	8002a32 <UART_SetConfig+0x24e>
 8002952:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002956:	e7d0      	b.n	80028fa <UART_SetConfig+0x116>
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002958:	486b      	ldr	r0, [pc, #428]	; (8002b08 <UART_SetConfig+0x324>)
  if(UART_INSTANCE_LOWPOWER(huart))
 800295a:	2302      	movs	r3, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 800295c:	6862      	ldr	r2, [r4, #4]
 800295e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8002962:	4281      	cmp	r1, r0
 8002964:	d905      	bls.n	8002972 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8002966:	2201      	movs	r2, #1
  huart->RxISR = NULL;
 8002968:	2300      	movs	r3, #0
 800296a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800296c:	6663      	str	r3, [r4, #100]	; 0x64
}
 800296e:	4610      	mov	r0, r2
 8002970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8002972:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002976:	d8f6      	bhi.n	8002966 <UART_SetConfig+0x182>
        switch (clocksource)
 8002978:	2b08      	cmp	r3, #8
 800297a:	d82e      	bhi.n	80029da <UART_SetConfig+0x1f6>
 800297c:	e8df f003 	tbb	[pc, r3]
 8002980:	2d1c2d05 	.word	0x2d1c2d05
 8002984:	2d2d2d24 	.word	0x2d2d2d24
 8002988:	27          	.byte	0x27
 8002989:	00          	.byte	0x00
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800298a:	f7ff f94f 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800298e:	6862      	ldr	r2, [r4, #4]
 8002990:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002994:	0856      	lsrs	r6, r2, #1
 8002996:	2700      	movs	r7, #0
 8002998:	fbe1 6700 	umlal	r6, r7, r1, r0
 800299c:	2300      	movs	r3, #0
 800299e:	4630      	mov	r0, r6
 80029a0:	4639      	mov	r1, r7
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80029a2:	f7fd fc6d 	bl	8000280 <__aeabi_uldivmod>
          break;
 80029a6:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029a8:	4b58      	ldr	r3, [pc, #352]	; (8002b0c <UART_SetConfig+0x328>)
 80029aa:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80029ae:	4299      	cmp	r1, r3
 80029b0:	d8d9      	bhi.n	8002966 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	60d8      	str	r0, [r3, #12]
 80029b6:	e7d7      	b.n	8002968 <UART_SetConfig+0x184>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80029b8:	4855      	ldr	r0, [pc, #340]	; (8002b10 <UART_SetConfig+0x32c>)
 80029ba:	0855      	lsrs	r5, r2, #1
 80029bc:	2300      	movs	r3, #0
 80029be:	2100      	movs	r1, #0
 80029c0:	1940      	adds	r0, r0, r5
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80029c2:	f141 0100 	adc.w	r1, r1, #0
 80029c6:	e7ec      	b.n	80029a2 <UART_SetConfig+0x1be>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029c8:	f7fe fdda 	bl	8001580 <HAL_RCC_GetSysClockFreq>
 80029cc:	e7df      	b.n	800298e <UART_SetConfig+0x1aa>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80029ce:	0850      	lsrs	r0, r2, #1
 80029d0:	2100      	movs	r1, #0
 80029d2:	2300      	movs	r3, #0
 80029d4:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80029d8:	e7f3      	b.n	80029c2 <UART_SetConfig+0x1de>
          ret = HAL_ERROR;
 80029da:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80029dc:	2000      	movs	r0, #0
 80029de:	e7e3      	b.n	80029a8 <UART_SetConfig+0x1c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029e0:	f7ff f934 	bl	8001c4c <HAL_RCC_GetPCLK2Freq>
 80029e4:	e04e      	b.n	8002a84 <UART_SetConfig+0x2a0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80029e6:	f7ff f921 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029ea:	6862      	ldr	r2, [r4, #4]
 80029ec:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80029f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80029f4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80029f6:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029f8:	f1a3 0010 	sub.w	r0, r3, #16
 80029fc:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002a00:	4288      	cmp	r0, r1
 8002a02:	d8b0      	bhi.n	8002966 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8002a04:	6821      	ldr	r1, [r4, #0]
 8002a06:	60cb      	str	r3, [r1, #12]
 8002a08:	e7ae      	b.n	8002968 <UART_SetConfig+0x184>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002a0a:	f7ff f91f 	bl	8001c4c <HAL_RCC_GetPCLK2Freq>
 8002a0e:	e7ec      	b.n	80029ea <UART_SetConfig+0x206>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002a10:	6860      	ldr	r0, [r4, #4]
 8002a12:	0843      	lsrs	r3, r0, #1
 8002a14:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002a18:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002a1c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002a20:	e7e8      	b.n	80029f4 <UART_SetConfig+0x210>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a22:	f7fe fdad 	bl	8001580 <HAL_RCC_GetSysClockFreq>
 8002a26:	e7e0      	b.n	80029ea <UART_SetConfig+0x206>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002a28:	6860      	ldr	r0, [r4, #4]
 8002a2a:	0843      	lsrs	r3, r0, #1
 8002a2c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a30:	e7f4      	b.n	8002a1c <UART_SetConfig+0x238>
  if(UART_INSTANCE_LOWPOWER(huart))
 8002a32:	4b2d      	ldr	r3, [pc, #180]	; (8002ae8 <UART_SetConfig+0x304>)
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d08f      	beq.n	8002958 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a38:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002a3c:	d1e8      	bne.n	8002a10 <UART_SetConfig+0x22c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002a3e:	6860      	ldr	r0, [r4, #4]
 8002a40:	0843      	lsrs	r3, r0, #1
 8002a42:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002a46:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002a4a:	fbb3 f3f0 	udiv	r3, r3, r0
 8002a4e:	e01f      	b.n	8002a90 <UART_SetConfig+0x2ac>
  if(UART_INSTANCE_LOWPOWER(huart))
 8002a50:	4b25      	ldr	r3, [pc, #148]	; (8002ae8 <UART_SetConfig+0x304>)
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d10b      	bne.n	8002a6e <UART_SetConfig+0x28a>
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002a56:	f7fe fd93 	bl	8001580 <HAL_RCC_GetSysClockFreq>
      break;
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	e746      	b.n	80028ec <UART_SetConfig+0x108>
  if(UART_INSTANCE_LOWPOWER(huart))
 8002a5e:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <UART_SetConfig+0x304>)
 8002a60:	429a      	cmp	r2, r3
 8002a62:	f47f af25 	bne.w	80028b0 <UART_SetConfig+0xcc>
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002a66:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if(UART_INSTANCE_LOWPOWER(huart))
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	e776      	b.n	800295c <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a6e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002a72:	d1d6      	bne.n	8002a22 <UART_SetConfig+0x23e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a74:	f7fe fd84 	bl	8001580 <HAL_RCC_GetSysClockFreq>
 8002a78:	e004      	b.n	8002a84 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a7a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002a7e:	d1b2      	bne.n	80029e6 <UART_SetConfig+0x202>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a80:	f7ff f8d4 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a84:	6861      	ldr	r1, [r4, #4]
 8002a86:	084a      	lsrs	r2, r1, #1
 8002a88:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002a8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a90:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a92:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a94:	f1a3 0010 	sub.w	r0, r3, #16
 8002a98:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002a9c:	4288      	cmp	r0, r1
 8002a9e:	f63f af62 	bhi.w	8002966 <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8002aa2:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8002aa6:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002aa8:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002aac:	430b      	orrs	r3, r1
 8002aae:	60c3      	str	r3, [r0, #12]
 8002ab0:	e75a      	b.n	8002968 <UART_SetConfig+0x184>
    switch (clocksource)
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	f63f af57 	bhi.w	8002966 <UART_SetConfig+0x182>
 8002ab8:	a201      	add	r2, pc, #4	; (adr r2, 8002ac0 <UART_SetConfig+0x2dc>)
 8002aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abe:	bf00      	nop
 8002ac0:	080029e7 	.word	0x080029e7
 8002ac4:	08002a0b 	.word	0x08002a0b
 8002ac8:	08002a11 	.word	0x08002a11
 8002acc:	08002967 	.word	0x08002967
 8002ad0:	08002a23 	.word	0x08002a23
 8002ad4:	08002967 	.word	0x08002967
 8002ad8:	08002967 	.word	0x08002967
 8002adc:	08002967 	.word	0x08002967
 8002ae0:	08002a29 	.word	0x08002a29
 8002ae4:	efff69f3 	.word	0xefff69f3
 8002ae8:	40008000 	.word	0x40008000
 8002aec:	40013800 	.word	0x40013800
 8002af0:	08004fae 	.word	0x08004fae
 8002af4:	40004400 	.word	0x40004400
 8002af8:	08004fb2 	.word	0x08004fb2
 8002afc:	40004800 	.word	0x40004800
 8002b00:	40004c00 	.word	0x40004c00
 8002b04:	40005000 	.word	0x40005000
 8002b08:	00f42400 	.word	0x00f42400
 8002b0c:	000ffcff 	.word	0x000ffcff
 8002b10:	f4240000 	.word	0xf4240000

08002b14 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002b16:	07da      	lsls	r2, r3, #31
{
 8002b18:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b1a:	d506      	bpl.n	8002b2a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b1c:	6801      	ldr	r1, [r0, #0]
 8002b1e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002b20:	684a      	ldr	r2, [r1, #4]
 8002b22:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002b26:	4322      	orrs	r2, r4
 8002b28:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b2a:	079c      	lsls	r4, r3, #30
 8002b2c:	d506      	bpl.n	8002b3c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b2e:	6801      	ldr	r1, [r0, #0]
 8002b30:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002b32:	684a      	ldr	r2, [r1, #4]
 8002b34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b38:	4322      	orrs	r2, r4
 8002b3a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b3c:	0759      	lsls	r1, r3, #29
 8002b3e:	d506      	bpl.n	8002b4e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b40:	6801      	ldr	r1, [r0, #0]
 8002b42:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002b44:	684a      	ldr	r2, [r1, #4]
 8002b46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b4a:	4322      	orrs	r2, r4
 8002b4c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b4e:	071a      	lsls	r2, r3, #28
 8002b50:	d506      	bpl.n	8002b60 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b52:	6801      	ldr	r1, [r0, #0]
 8002b54:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002b56:	684a      	ldr	r2, [r1, #4]
 8002b58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b5c:	4322      	orrs	r2, r4
 8002b5e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b60:	06dc      	lsls	r4, r3, #27
 8002b62:	d506      	bpl.n	8002b72 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b64:	6801      	ldr	r1, [r0, #0]
 8002b66:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002b68:	688a      	ldr	r2, [r1, #8]
 8002b6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b6e:	4322      	orrs	r2, r4
 8002b70:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b72:	0699      	lsls	r1, r3, #26
 8002b74:	d506      	bpl.n	8002b84 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b76:	6801      	ldr	r1, [r0, #0]
 8002b78:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002b7a:	688a      	ldr	r2, [r1, #8]
 8002b7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b80:	4322      	orrs	r2, r4
 8002b82:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b84:	065a      	lsls	r2, r3, #25
 8002b86:	d50f      	bpl.n	8002ba8 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b88:	6801      	ldr	r1, [r0, #0]
 8002b8a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002b8c:	684a      	ldr	r2, [r1, #4]
 8002b8e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002b92:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b94:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b98:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b9a:	d105      	bne.n	8002ba8 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b9c:	684a      	ldr	r2, [r1, #4]
 8002b9e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002ba0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002ba4:	4322      	orrs	r2, r4
 8002ba6:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ba8:	061b      	lsls	r3, r3, #24
 8002baa:	d506      	bpl.n	8002bba <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bac:	6802      	ldr	r2, [r0, #0]
 8002bae:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002bb0:	6853      	ldr	r3, [r2, #4]
 8002bb2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002bb6:	430b      	orrs	r3, r1
 8002bb8:	6053      	str	r3, [r2, #4]
 8002bba:	bd10      	pop	{r4, pc}

08002bbc <UART_WaitOnFlagUntilTimeout>:
{
 8002bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bc0:	9d06      	ldr	r5, [sp, #24]
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	460f      	mov	r7, r1
 8002bc6:	4616      	mov	r6, r2
 8002bc8:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bca:	6821      	ldr	r1, [r4, #0]
 8002bcc:	69ca      	ldr	r2, [r1, #28]
 8002bce:	ea37 0302 	bics.w	r3, r7, r2
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2201      	moveq	r2, #1
 8002bd6:	2200      	movne	r2, #0
 8002bd8:	42b2      	cmp	r2, r6
 8002bda:	d002      	beq.n	8002be2 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002bdc:	2000      	movs	r0, #0
}
 8002bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002be2:	1c6b      	adds	r3, r5, #1
 8002be4:	d0f2      	beq.n	8002bcc <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002be6:	b99d      	cbnz	r5, 8002c10 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bf0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	f022 0201 	bic.w	r2, r2, #1
 8002bf8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8002c00:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8002c04:	2300      	movs	r3, #0
 8002c06:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8002c0a:	2003      	movs	r0, #3
 8002c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002c10:	f7fe f8e6 	bl	8000de0 <HAL_GetTick>
 8002c14:	eba0 0008 	sub.w	r0, r0, r8
 8002c18:	4285      	cmp	r5, r0
 8002c1a:	d2d6      	bcs.n	8002bca <UART_WaitOnFlagUntilTimeout+0xe>
 8002c1c:	e7e4      	b.n	8002be8 <UART_WaitOnFlagUntilTimeout+0x2c>

08002c1e <HAL_UART_Transmit>:
{
 8002c1e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002c22:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8002c24:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002c28:	2b20      	cmp	r3, #32
{
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	460d      	mov	r5, r1
 8002c2e:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002c30:	d14a      	bne.n	8002cc8 <HAL_UART_Transmit+0xaa>
    if((pData == NULL ) || (Size == 0U))
 8002c32:	2900      	cmp	r1, #0
 8002c34:	d046      	beq.n	8002cc4 <HAL_UART_Transmit+0xa6>
 8002c36:	2a00      	cmp	r2, #0
 8002c38:	d044      	beq.n	8002cc4 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8002c3a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d042      	beq.n	8002cc8 <HAL_UART_Transmit+0xaa>
 8002c42:	2301      	movs	r3, #1
 8002c44:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c4c:	2321      	movs	r3, #33	; 0x21
 8002c4e:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8002c52:	f7fe f8c5 	bl	8000de0 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8002c56:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8002c5a:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002c5c:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002c60:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c64:	9700      	str	r7, [sp, #0]
    while(huart->TxXferCount > 0U)
 8002c66:	b292      	uxth	r2, r2
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c68:	4633      	mov	r3, r6
    while(huart->TxXferCount > 0U)
 8002c6a:	b952      	cbnz	r2, 8002c82 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c6c:	2140      	movs	r1, #64	; 0x40
 8002c6e:	4620      	mov	r0, r4
 8002c70:	f7ff ffa4 	bl	8002bbc <UART_WaitOnFlagUntilTimeout>
 8002c74:	b958      	cbnz	r0, 8002c8e <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8002c76:	2320      	movs	r3, #32
 8002c78:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8002c7c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8002c80:	e006      	b.n	8002c90 <HAL_UART_Transmit+0x72>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c82:	2200      	movs	r2, #0
 8002c84:	2180      	movs	r1, #128	; 0x80
 8002c86:	4620      	mov	r0, r4
 8002c88:	f7ff ff98 	bl	8002bbc <UART_WaitOnFlagUntilTimeout>
 8002c8c:	b118      	cbz	r0, 8002c96 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8002c8e:	2003      	movs	r0, #3
}
 8002c90:	b002      	add	sp, #8
 8002c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c96:	68a3      	ldr	r3, [r4, #8]
 8002c98:	6822      	ldr	r2, [r4, #0]
 8002c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9e:	d10d      	bne.n	8002cbc <HAL_UART_Transmit+0x9e>
 8002ca0:	6923      	ldr	r3, [r4, #16]
 8002ca2:	b95b      	cbnz	r3, 8002cbc <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002ca4:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cac:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002cae:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002cba:	e7d1      	b.n	8002c60 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002cbc:	782b      	ldrb	r3, [r5, #0]
 8002cbe:	8513      	strh	r3, [r2, #40]	; 0x28
 8002cc0:	3501      	adds	r5, #1
 8002cc2:	e7f4      	b.n	8002cae <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	e7e3      	b.n	8002c90 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8002cc8:	2002      	movs	r0, #2
 8002cca:	e7e1      	b.n	8002c90 <HAL_UART_Transmit+0x72>

08002ccc <UART_CheckIdleState>:
{
 8002ccc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002cce:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd0:	2600      	movs	r6, #0
 8002cd2:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8002cd4:	f7fe f884 	bl	8000de0 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cd8:	6823      	ldr	r3, [r4, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002cde:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ce0:	d417      	bmi.n	8002d12 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	075b      	lsls	r3, r3, #29
 8002ce8:	d50a      	bpl.n	8002d00 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	462b      	mov	r3, r5
 8002cf4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f7ff ff5f 	bl	8002bbc <UART_WaitOnFlagUntilTimeout>
 8002cfe:	b9a0      	cbnz	r0, 8002d2a <UART_CheckIdleState+0x5e>
  huart->gState= HAL_UART_STATE_READY;
 8002d00:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002d02:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002d04:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8002d08:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState= HAL_UART_STATE_READY;
 8002d0c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8002d10:	e00c      	b.n	8002d2c <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	4632      	mov	r2, r6
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d20:	4620      	mov	r0, r4
 8002d22:	f7ff ff4b 	bl	8002bbc <UART_WaitOnFlagUntilTimeout>
 8002d26:	2800      	cmp	r0, #0
 8002d28:	d0db      	beq.n	8002ce2 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002d2a:	2003      	movs	r0, #3
}
 8002d2c:	b002      	add	sp, #8
 8002d2e:	bd70      	pop	{r4, r5, r6, pc}

08002d30 <HAL_UART_Init>:
{
 8002d30:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002d32:	4604      	mov	r4, r0
 8002d34:	b390      	cbz	r0, 8002d9c <HAL_UART_Init+0x6c>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002d36:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002d3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d3e:	b91b      	cbnz	r3, 8002d48 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002d40:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002d44:	f001 f9e4 	bl	8004110 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002d48:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002d4a:	2324      	movs	r3, #36	; 0x24
 8002d4c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8002d50:	6813      	ldr	r3, [r2, #0]
 8002d52:	f023 0301 	bic.w	r3, r3, #1
 8002d56:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff fd43 	bl	80027e4 <UART_SetConfig>
 8002d5e:	2801      	cmp	r0, #1
 8002d60:	d01c      	beq.n	8002d9c <HAL_UART_Init+0x6c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d64:	b113      	cbz	r3, 8002d6c <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002d66:	4620      	mov	r0, r4
 8002d68:	f7ff fed4 	bl	8002b14 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d6c:	6823      	ldr	r3, [r4, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d7c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	f042 0201 	orr.w	r2, r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
  SET_BIT(huart->Instance->CR1, UART_IT_IDLE);
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	f442 6284 	orr.w	r2, r2, #1056	; 0x420
 8002d8c:	f042 0204 	orr.w	r2, r2, #4
  return (UART_CheckIdleState(huart));
 8002d90:	4620      	mov	r0, r4
  SET_BIT(huart->Instance->CR1, UART_IT_IDLE);
 8002d92:	601a      	str	r2, [r3, #0]
}
 8002d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002d98:	f7ff bf98 	b.w	8002ccc <UART_CheckIdleState>
}
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	bd10      	pop	{r4, pc}

08002da0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002da0:	4770      	bx	lr

08002da2 <USB_CoreInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002da2:	b084      	sub	sp, #16
 8002da4:	b538      	push	{r3, r4, r5, lr}
 8002da6:	ad05      	add	r5, sp, #20
 8002da8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002dac:	68c3      	ldr	r3, [r0, #12]
 8002dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
{
 8002db2:	4604      	mov	r4, r0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002db4:	60c3      	str	r3, [r0, #12]
  
  /* Reset after a PHY select and set Host mode */
  USB_CoreReset(USBx);
 8002db6:	f000 f8f3 	bl	8002fa0 <USB_CoreReset>
  
  /* Deactivate the power down*/
  USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002dba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dbe:	63a3      	str	r3, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 8002dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	b004      	add	sp, #16
 8002dc8:	4770      	bx	lr

08002dca <USB_DisableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002dca:	6883      	ldr	r3, [r0, #8]
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	4770      	bx	lr

08002dd6 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_ModeTypeDef mode)
{
 8002dd6:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002dd8:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_HOST_MODE)
 8002dda:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002ddc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002de0:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_HOST_MODE)
 8002de2:	d108      	bne.n	8002df6 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8002de4:	68c3      	ldr	r3, [r0, #12]
 8002de6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002dea:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50);
 8002dec:	2032      	movs	r0, #50	; 0x32
 8002dee:	f7fd fffd 	bl	8000dec <HAL_Delay>
  
  return HAL_OK;
}
 8002df2:	2000      	movs	r0, #0
 8002df4:	bd08      	pop	{r3, pc}
  else if ( mode == USB_DEVICE_MODE)
 8002df6:	2900      	cmp	r1, #0
 8002df8:	d1f8      	bne.n	8002dec <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8002dfa:	68c3      	ldr	r3, [r0, #12]
 8002dfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e00:	60c3      	str	r3, [r0, #12]
 8002e02:	e7f3      	b.n	8002dec <USB_SetCurrentMode+0x16>

08002e04 <USB_DevInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e04:	b084      	sub	sp, #16
 8002e06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e0a:	4604      	mov	r4, r0
 8002e0c:	a809      	add	r0, sp, #36	; 0x24
 8002e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t index = 0;

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002e12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e14:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8002e16:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8002e1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e1e:	4689      	mov	r9, r1
 8002e20:	63a3      	str	r3, [r4, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 8002e22:	b95f      	cbnz	r7, 8002e3c <USB_DevInit+0x38>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8002e24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e2a:	63a3      	str	r3, [r4, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e32:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002e34:	6823      	ldr	r3, [r4, #0]
 8002e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e3a:	6023      	str	r3, [r4, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 8002e3c:	2500      	movs	r5, #0
 8002e3e:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002e42:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002e46:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  /* Set Full speed phy */
  USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8002e4a:	2103      	movs	r1, #3
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f000 f893 	bl	8002f78 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 8002e52:	2110      	movs	r1, #16
 8002e54:	4620      	mov	r0, r4
 8002e56:	f000 f86d 	bl	8002f34 <USB_FlushTxFifo>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002e5a:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  USB_FlushRxFifo(USBx);
 8002e5e:	4620      	mov	r0, r4
 8002e60:	f000 f87a 	bl	8002f58 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
  USBx_DEVICE->DOEPMSK = 0;
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8002e64:	f04f 33ff 	mov.w	r3, #4294967295
  USBx_DEVICE->DIEPMSK = 0;
 8002e68:	6135      	str	r5, [r6, #16]
 8002e6a:	462a      	mov	r2, r5
  USBx_DEVICE->DOEPMSK = 0;
 8002e6c:	6175      	str	r5, [r6, #20]
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002e6e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8002e72:	61b3      	str	r3, [r6, #24]
    {
      USBx_INEP(index)->DIEPCTL = 0;
    }
    
    USBx_INEP(index)->DIEPTSIZ = 0;
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8002e74:	20ff      	movs	r0, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0;
 8002e76:	61f5      	str	r5, [r6, #28]
 8002e78:	f504 6310 	add.w	r3, r4, #2304	; 0x900
  for (index = 0; index < cfg.dev_endpoints; index++)
 8002e7c:	454d      	cmp	r5, r9
 8002e7e:	d13c      	bne.n	8002efa <USB_DevInit+0xf6>
 8002e80:	2200      	movs	r2, #0
 8002e82:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8002e86:	4611      	mov	r1, r2
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    {
      USBx_OUTEP(index)->DOEPCTL = 0;
    }
    
    USBx_OUTEP(index)->DOEPTSIZ = 0;
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8002e8c:	f04f 0eff 	mov.w	lr, #255	; 0xff
  for (index = 0; index < cfg.dev_endpoints; index++)
 8002e90:	4295      	cmp	r5, r2
 8002e92:	d13e      	bne.n	8002f12 <USB_DevInit+0x10e>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e94:	6933      	ldr	r3, [r6, #16]
  
  if (cfg.dma_enable == 1)
 8002e96:	f1b8 0f01 	cmp.w	r8, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e9e:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 8002ea0:	d108      	bne.n	8002eb4 <USB_DevInit+0xb0>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8002ea2:	4b22      	ldr	r3, [pc, #136]	; (8002f2c <USB_DevInit+0x128>)
 8002ea4:	6333      	str	r3, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8002ea6:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eac:	f043 0303 	orr.w	r3, r3, #3
 8002eb0:	6333      	str	r3, [r6, #48]	; 0x30
    
    index= USBx_DEVICE->DTHRCTL;
 8002eb2:	6b33      	ldr	r3, [r6, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 8002eb8:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002ebc:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8002ebe:	f1b8 0f00 	cmp.w	r8, #0
 8002ec2:	d103      	bne.n	8002ecc <USB_DevInit+0xc8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8002ec4:	69a3      	ldr	r3, [r4, #24]
 8002ec6:	f043 0310 	orr.w	r3, r3, #16
 8002eca:	61a3      	str	r3, [r4, #24]
  }

    /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8002ecc:	69a2      	ldr	r2, [r4, #24]
 8002ece:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <USB_DevInit+0x12c>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 8002ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002ed6:	b11b      	cbz	r3, 8002ee0 <USB_DevInit+0xdc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002ed8:	69a3      	ldr	r3, [r4, #24]
 8002eda:	f043 0308 	orr.w	r3, r3, #8
 8002ede:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8002ee0:	2f01      	cmp	r7, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8002ee2:	bf01      	itttt	eq
 8002ee4:	69a3      	ldreq	r3, [r4, #24]
 8002ee6:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8002eea:	f043 0304 	orreq.w	r3, r3, #4
 8002eee:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 8002ef0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	b004      	add	sp, #16
 8002ef8:	4770      	bx	lr
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002efa:	f8d3 e000 	ldr.w	lr, [r3]
 8002efe:	f1be 0f00 	cmp.w	lr, #0
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002f02:	bfb4      	ite	lt
 8002f04:	6019      	strlt	r1, [r3, #0]
      USBx_INEP(index)->DIEPCTL = 0;
 8002f06:	601a      	strge	r2, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8002f08:	3501      	adds	r5, #1
    USBx_INEP(index)->DIEPTSIZ = 0;
 8002f0a:	611a      	str	r2, [r3, #16]
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8002f0c:	6098      	str	r0, [r3, #8]
 8002f0e:	3320      	adds	r3, #32
 8002f10:	e7b4      	b.n	8002e7c <USB_DevInit+0x78>
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f12:	f8d3 c000 	ldr.w	ip, [r3]
 8002f16:	f1bc 0f00 	cmp.w	ip, #0
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002f1a:	bfb4      	ite	lt
 8002f1c:	6018      	strlt	r0, [r3, #0]
      USBx_OUTEP(index)->DOEPCTL = 0;
 8002f1e:	6019      	strge	r1, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8002f20:	3201      	adds	r2, #1
    USBx_OUTEP(index)->DOEPTSIZ = 0;
 8002f22:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8002f24:	f8c3 e008 	str.w	lr, [r3, #8]
 8002f28:	3320      	adds	r3, #32
 8002f2a:	e7b1      	b.n	8002e90 <USB_DevInit+0x8c>
 8002f2c:	00800100 	.word	0x00800100
 8002f30:	803c3800 	.word	0x803c3800

08002f34 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8002f34:	0189      	lsls	r1, r1, #6
 8002f36:	f041 0120 	orr.w	r1, r1, #32
 8002f3a:	4a06      	ldr	r2, [pc, #24]	; (8002f54 <USB_FlushTxFifo+0x20>)
 8002f3c:	6101      	str	r1, [r0, #16]
 
  do
  {
    if (++count > 200000)
 8002f3e:	3a01      	subs	r2, #1
 8002f40:	d005      	beq.n	8002f4e <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f42:	6903      	ldr	r3, [r0, #16]
 8002f44:	f013 0320 	ands.w	r3, r3, #32
 8002f48:	d1f9      	bne.n	8002f3e <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002f4e:	2003      	movs	r0, #3
}
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	00030d41 	.word	0x00030d41

08002f58 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f58:	2310      	movs	r3, #16
 8002f5a:	4a06      	ldr	r2, [pc, #24]	; (8002f74 <USB_FlushRxFifo+0x1c>)
 8002f5c:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8002f5e:	3a01      	subs	r2, #1
 8002f60:	d005      	beq.n	8002f6e <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f62:	6903      	ldr	r3, [r0, #16]
 8002f64:	f013 0310 	ands.w	r3, r3, #16
 8002f68:	d1f9      	bne.n	8002f5e <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002f6e:	2003      	movs	r0, #3
}
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	00030d41 	.word	0x00030d41

08002f78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8002f78:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002f7c:	4319      	orrs	r1, r3
 8002f7e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8002f82:	2000      	movs	r0, #0
 8002f84:	4770      	bx	lr

08002f86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8002f86:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ; 
 8002f88:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002f8c:	f043 0302 	orr.w	r3, r3, #2
 8002f90:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8002f94:	2003      	movs	r0, #3
 8002f96:	f7fd ff29 	bl	8000dec <HAL_Delay>
  
  return HAL_OK;  
}
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	bd08      	pop	{r3, pc}
	...

08002fa0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]
  
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4a13      	ldr	r2, [pc, #76]	; (8003004 <USB_CoreReset+0x64>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e01b      	b.n	8002ff6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	daf2      	bge.n	8002fac <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f043 0201 	orr.w	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4a09      	ldr	r2, [pc, #36]	; (8003004 <USB_CoreReset+0x64>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d901      	bls.n	8002fe8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e006      	b.n	8002ff6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d0f0      	beq.n	8002fd6 <USB_CoreReset+0x36>
  
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	00030d40 	.word	0x00030d40

08003008 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003008:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800300a:	f000 fbe5 	bl	80037d8 <vTaskStartScheduler>
  
  return osOK;
}
 800300e:	2000      	movs	r0, #0
 8003010:	bd08      	pop	{r3, pc}

08003012 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003012:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003014:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8003018:	8a02      	ldrh	r2, [r0, #16]
{
 800301a:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800301c:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8003020:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8003022:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8003024:	bf14      	ite	ne
 8003026:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003028:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800302a:	a803      	add	r0, sp, #12
 800302c:	9001      	str	r0, [sp, #4]
 800302e:	9400      	str	r4, [sp, #0]
 8003030:	4628      	mov	r0, r5
 8003032:	f000 fb01 	bl	8003638 <xTaskCreate>
 8003036:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003038:	bf0c      	ite	eq
 800303a:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800303c:	2000      	movne	r0, #0
}
 800303e:	b005      	add	sp, #20
 8003040:	bd30      	pop	{r4, r5, pc}

08003042 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003042:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003044:	2800      	cmp	r0, #0
 8003046:	bf08      	it	eq
 8003048:	2001      	moveq	r0, #1
 800304a:	f000 fd13 	bl	8003a74 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800304e:	2000      	movs	r0, #0
 8003050:	bd08      	pop	{r3, pc}

08003052 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8003052:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003054:	f000 fda6 	bl	8003ba4 <xTaskGetSchedulerState>
 8003058:	2801      	cmp	r0, #1
 800305a:	d003      	beq.n	8003064 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800305c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8003060:	f000 b908 	b.w	8003274 <xPortSysTickHandler>
 8003064:	bd08      	pop	{r3, pc}

08003066 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003066:	f100 0308 	add.w	r3, r0, #8
 800306a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800306c:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003070:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003072:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003074:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003076:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003078:	6003      	str	r3, [r0, #0]
 800307a:	4770      	bx	lr

0800307c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800307c:	2300      	movs	r3, #0
 800307e:	6103      	str	r3, [r0, #16]
 8003080:	4770      	bx	lr

08003082 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003082:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003084:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800308e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003090:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003092:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003094:	3301      	adds	r3, #1
 8003096:	6003      	str	r3, [r0, #0]
 8003098:	4770      	bx	lr

0800309a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800309a:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800309c:	1c53      	adds	r3, r2, #1
{
 800309e:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80030a0:	d10a      	bne.n	80030b8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80030a2:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030a8:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030aa:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80030ac:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80030ae:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030b0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80030b2:	3301      	adds	r3, #1
 80030b4:	6003      	str	r3, [r0, #0]
 80030b6:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030b8:	f100 0308 	add.w	r3, r0, #8
 80030bc:	685c      	ldr	r4, [r3, #4]
 80030be:	6825      	ldr	r5, [r4, #0]
 80030c0:	42aa      	cmp	r2, r5
 80030c2:	d3ef      	bcc.n	80030a4 <vListInsert+0xa>
 80030c4:	4623      	mov	r3, r4
 80030c6:	e7f9      	b.n	80030bc <vListInsert+0x22>

080030c8 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030c8:	6841      	ldr	r1, [r0, #4]
 80030ca:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80030cc:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030ce:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030d0:	6882      	ldr	r2, [r0, #8]
 80030d2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80030d4:	6859      	ldr	r1, [r3, #4]
 80030d6:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80030d8:	bf08      	it	eq
 80030da:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80030dc:	2200      	movs	r2, #0
 80030de:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	3801      	subs	r0, #1
 80030e4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80030e6:	4770      	bx	lr

080030e8 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80030e8:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <prvTaskExitError+0x2c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3301      	adds	r3, #1
 80030ee:	d008      	beq.n	8003102 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	e7fe      	b.n	8003100 <prvTaskExitError+0x18>
 8003102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003106:	f383 8811 	msr	BASEPRI, r3
 800310a:	f3bf 8f6f 	isb	sy
 800310e:	f3bf 8f4f 	dsb	sy
 8003112:	e7fe      	b.n	8003112 <prvTaskExitError+0x2a>
 8003114:	20000000 	.word	0x20000000

08003118 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003118:	4806      	ldr	r0, [pc, #24]	; (8003134 <prvPortStartFirstTask+0x1c>)
 800311a:	6800      	ldr	r0, [r0, #0]
 800311c:	6800      	ldr	r0, [r0, #0]
 800311e:	f380 8808 	msr	MSP, r0
 8003122:	b662      	cpsie	i
 8003124:	b661      	cpsie	f
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	df00      	svc	0
 8003130:	bf00      	nop
 8003132:	0000      	.short	0x0000
 8003134:	e000ed08 	.word	0xe000ed08

08003138 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003138:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003148 <vPortEnableVFP+0x10>
 800313c:	6801      	ldr	r1, [r0, #0]
 800313e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003142:	6001      	str	r1, [r0, #0]
 8003144:	4770      	bx	lr
 8003146:	0000      	.short	0x0000
 8003148:	e000ed88 	.word	0xe000ed88

0800314c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800314c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003150:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003154:	4b07      	ldr	r3, [pc, #28]	; (8003174 <pxPortInitialiseStack+0x28>)
 8003156:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800315a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800315e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003162:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003166:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800316a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800316e:	3844      	subs	r0, #68	; 0x44
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	080030e9 	.word	0x080030e9
	...

08003180 <SVC_Handler>:
	__asm volatile (
 8003180:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <pxCurrentTCBConst2>)
 8003182:	6819      	ldr	r1, [r3, #0]
 8003184:	6808      	ldr	r0, [r1, #0]
 8003186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800318a:	f380 8809 	msr	PSP, r0
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	f04f 0000 	mov.w	r0, #0
 8003196:	f380 8811 	msr	BASEPRI, r0
 800319a:	4770      	bx	lr
 800319c:	f3af 8000 	nop.w

080031a0 <pxCurrentTCBConst2>:
 80031a0:	20000d60 	.word	0x20000d60

080031a4 <vPortEnterCritical>:
 80031a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80031b4:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <vPortEnterCritical+0x3c>)
 80031b6:	6813      	ldr	r3, [r2, #0]
 80031b8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80031ba:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80031bc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80031be:	d10d      	bne.n	80031dc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80031c0:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <vPortEnterCritical+0x40>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80031c8:	d008      	beq.n	80031dc <vPortEnterCritical+0x38>
 80031ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	e7fe      	b.n	80031da <vPortEnterCritical+0x36>
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	20000000 	.word	0x20000000
 80031e4:	e000ed04 	.word	0xe000ed04

080031e8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80031e8:	4a08      	ldr	r2, [pc, #32]	; (800320c <vPortExitCritical+0x24>)
 80031ea:	6813      	ldr	r3, [r2, #0]
 80031ec:	b943      	cbnz	r3, 8003200 <vPortExitCritical+0x18>
 80031ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f2:	f383 8811 	msr	BASEPRI, r3
 80031f6:	f3bf 8f6f 	isb	sy
 80031fa:	f3bf 8f4f 	dsb	sy
 80031fe:	e7fe      	b.n	80031fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003200:	3b01      	subs	r3, #1
 8003202:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003204:	b90b      	cbnz	r3, 800320a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003206:	f383 8811 	msr	BASEPRI, r3
 800320a:	4770      	bx	lr
 800320c:	20000000 	.word	0x20000000

08003210 <PendSV_Handler>:
	__asm volatile
 8003210:	f3ef 8009 	mrs	r0, PSP
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	4b15      	ldr	r3, [pc, #84]	; (8003270 <pxCurrentTCBConst>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	f01e 0f10 	tst.w	lr, #16
 8003220:	bf08      	it	eq
 8003222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800322a:	6010      	str	r0, [r2, #0]
 800322c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003230:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003234:	f380 8811 	msr	BASEPRI, r0
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f000 fc76 	bl	8003b30 <vTaskSwitchContext>
 8003244:	f04f 0000 	mov.w	r0, #0
 8003248:	f380 8811 	msr	BASEPRI, r0
 800324c:	bc08      	pop	{r3}
 800324e:	6819      	ldr	r1, [r3, #0]
 8003250:	6808      	ldr	r0, [r1, #0]
 8003252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003256:	f01e 0f10 	tst.w	lr, #16
 800325a:	bf08      	it	eq
 800325c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003260:	f380 8809 	msr	PSP, r0
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	f3af 8000 	nop.w

08003270 <pxCurrentTCBConst>:
 8003270:	20000d60 	.word	0x20000d60

08003274 <xPortSysTickHandler>:
{
 8003274:	b508      	push	{r3, lr}
	__asm volatile
 8003276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003286:	f000 faeb 	bl	8003860 <xTaskIncrementTick>
 800328a:	b118      	cbz	r0, 8003294 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800328c:	4b03      	ldr	r3, [pc, #12]	; (800329c <xPortSysTickHandler+0x28>)
 800328e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003292:	601a      	str	r2, [r3, #0]
	__asm volatile
 8003294:	2300      	movs	r3, #0
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	bd08      	pop	{r3, pc}
 800329c:	e000ed04 	.word	0xe000ed04

080032a0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <vPortSetupTimerInterrupt+0x1c>)
 80032a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80032ac:	4a04      	ldr	r2, [pc, #16]	; (80032c0 <vPortSetupTimerInterrupt+0x20>)
 80032ae:	3b01      	subs	r3, #1
 80032b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80032b2:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <vPortSetupTimerInterrupt+0x24>)
 80032b4:	2207      	movs	r2, #7
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	20000004 	.word	0x20000004
 80032c0:	e000e014 	.word	0xe000e014
 80032c4:	e000e010 	.word	0xe000e010

080032c8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80032c8:	4b31      	ldr	r3, [pc, #196]	; (8003390 <xPortStartScheduler+0xc8>)
 80032ca:	4a32      	ldr	r2, [pc, #200]	; (8003394 <xPortStartScheduler+0xcc>)
{
 80032cc:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80032ce:	6819      	ldr	r1, [r3, #0]
 80032d0:	4291      	cmp	r1, r2
 80032d2:	d108      	bne.n	80032e6 <xPortStartScheduler+0x1e>
	__asm volatile
 80032d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d8:	f383 8811 	msr	BASEPRI, r3
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	e7fe      	b.n	80032e4 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <xPortStartScheduler+0xd0>)
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d108      	bne.n	8003300 <xPortStartScheduler+0x38>
 80032ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	e7fe      	b.n	80032fe <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003300:	4b26      	ldr	r3, [pc, #152]	; (800339c <xPortStartScheduler+0xd4>)
 8003302:	781a      	ldrb	r2, [r3, #0]
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003308:	22ff      	movs	r2, #255	; 0xff
 800330a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800330c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800330e:	4a24      	ldr	r2, [pc, #144]	; (80033a0 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003310:	b2db      	uxtb	r3, r3
 8003312:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003316:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800331a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800331e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003320:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <xPortStartScheduler+0xdc>)
 8003322:	2207      	movs	r2, #7
 8003324:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003326:	2100      	movs	r1, #0
 8003328:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800332c:	0600      	lsls	r0, r0, #24
 800332e:	f102 34ff 	add.w	r4, r2, #4294967295
 8003332:	d423      	bmi.n	800337c <xPortStartScheduler+0xb4>
 8003334:	b101      	cbz	r1, 8003338 <xPortStartScheduler+0x70>
 8003336:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800333c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003340:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003342:	9b01      	ldr	r3, [sp, #4]
 8003344:	4a15      	ldr	r2, [pc, #84]	; (800339c <xPortStartScheduler+0xd4>)
 8003346:	b2db      	uxtb	r3, r3
 8003348:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800334a:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <xPortStartScheduler+0xe0>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003352:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800335a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800335c:	f7ff ffa0 	bl	80032a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003360:	4b12      	ldr	r3, [pc, #72]	; (80033ac <xPortStartScheduler+0xe4>)
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8003366:	f7ff fee7 	bl	8003138 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800336a:	4a11      	ldr	r2, [pc, #68]	; (80033b0 <xPortStartScheduler+0xe8>)
 800336c:	6813      	ldr	r3, [r2, #0]
 800336e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003372:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8003374:	f7ff fed0 	bl	8003118 <prvPortStartFirstTask>
	prvTaskExitError();
 8003378:	f7ff feb6 	bl	80030e8 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800337c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003380:	0052      	lsls	r2, r2, #1
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	f88d 2003 	strb.w	r2, [sp, #3]
 8003388:	2101      	movs	r1, #1
 800338a:	4622      	mov	r2, r4
 800338c:	e7cc      	b.n	8003328 <xPortStartScheduler+0x60>
 800338e:	bf00      	nop
 8003390:	e000ed00 	.word	0xe000ed00
 8003394:	410fc271 	.word	0x410fc271
 8003398:	410fc270 	.word	0x410fc270
 800339c:	e000e400 	.word	0xe000e400
 80033a0:	20000188 	.word	0x20000188
 80033a4:	2000018c 	.word	0x2000018c
 80033a8:	e000ed20 	.word	0xe000ed20
 80033ac:	20000000 	.word	0x20000000
 80033b0:	e000ef34 	.word	0xe000ef34

080033b4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80033b4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80033b6:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <prvInsertBlockIntoFreeList+0x40>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	4282      	cmp	r2, r0
 80033bc:	d318      	bcc.n	80033f0 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80033be:	685c      	ldr	r4, [r3, #4]
 80033c0:	1919      	adds	r1, r3, r4
 80033c2:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80033c4:	bf01      	itttt	eq
 80033c6:	6841      	ldreq	r1, [r0, #4]
 80033c8:	4618      	moveq	r0, r3
 80033ca:	1909      	addeq	r1, r1, r4
 80033cc:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80033ce:	6844      	ldr	r4, [r0, #4]
 80033d0:	1901      	adds	r1, r0, r4
 80033d2:	428a      	cmp	r2, r1
 80033d4:	d107      	bne.n	80033e6 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80033d6:	4908      	ldr	r1, [pc, #32]	; (80033f8 <prvInsertBlockIntoFreeList+0x44>)
 80033d8:	6809      	ldr	r1, [r1, #0]
 80033da:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80033dc:	bf1f      	itttt	ne
 80033de:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80033e0:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80033e2:	1909      	addne	r1, r1, r4
 80033e4:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80033e6:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80033e8:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80033ea:	bf18      	it	ne
 80033ec:	6018      	strne	r0, [r3, #0]
 80033ee:	bd10      	pop	{r4, pc}
 80033f0:	4613      	mov	r3, r2
 80033f2:	e7e1      	b.n	80033b8 <prvInsertBlockIntoFreeList+0x4>
 80033f4:	20000d58 	.word	0x20000d58
 80033f8:	20000190 	.word	0x20000190

080033fc <pvPortMalloc>:
{
 80033fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003400:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003402:	f000 fa25 	bl	8003850 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003406:	493e      	ldr	r1, [pc, #248]	; (8003500 <pvPortMalloc+0x104>)
 8003408:	4d3e      	ldr	r5, [pc, #248]	; (8003504 <pvPortMalloc+0x108>)
 800340a:	680b      	ldr	r3, [r1, #0]
 800340c:	bb0b      	cbnz	r3, 8003452 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800340e:	4a3e      	ldr	r2, [pc, #248]	; (8003508 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003410:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003412:	bf1f      	itttt	ne
 8003414:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003416:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800341a:	f602 33b8 	addwne	r3, r2, #3000	; 0xbb8
 800341e:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003420:	bf14      	ite	ne
 8003422:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003424:	f640 33b8 	movweq	r3, #3000	; 0xbb8
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003428:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800342a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800342c:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003430:	4e36      	ldr	r6, [pc, #216]	; (800350c <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8003432:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003434:	2000      	movs	r0, #0
 8003436:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003438:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800343a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800343c:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800343e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003440:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003442:	4b33      	ldr	r3, [pc, #204]	; (8003510 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003444:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003446:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003448:	4b32      	ldr	r3, [pc, #200]	; (8003514 <pvPortMalloc+0x118>)
 800344a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800344c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003450:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003452:	682f      	ldr	r7, [r5, #0]
 8003454:	4227      	tst	r7, r4
 8003456:	d116      	bne.n	8003486 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8003458:	2c00      	cmp	r4, #0
 800345a:	d041      	beq.n	80034e0 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 800345c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003460:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003462:	bf1c      	itt	ne
 8003464:	f023 0307 	bicne.w	r3, r3, #7
 8003468:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800346a:	b163      	cbz	r3, 8003486 <pvPortMalloc+0x8a>
 800346c:	4a29      	ldr	r2, [pc, #164]	; (8003514 <pvPortMalloc+0x118>)
 800346e:	6816      	ldr	r6, [r2, #0]
 8003470:	42b3      	cmp	r3, r6
 8003472:	4690      	mov	r8, r2
 8003474:	d807      	bhi.n	8003486 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8003476:	4a25      	ldr	r2, [pc, #148]	; (800350c <pvPortMalloc+0x110>)
 8003478:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800347a:	6868      	ldr	r0, [r5, #4]
 800347c:	4283      	cmp	r3, r0
 800347e:	d804      	bhi.n	800348a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8003480:	6809      	ldr	r1, [r1, #0]
 8003482:	428d      	cmp	r5, r1
 8003484:	d107      	bne.n	8003496 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8003486:	2400      	movs	r4, #0
 8003488:	e02a      	b.n	80034e0 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800348a:	682c      	ldr	r4, [r5, #0]
 800348c:	2c00      	cmp	r4, #0
 800348e:	d0f7      	beq.n	8003480 <pvPortMalloc+0x84>
 8003490:	462a      	mov	r2, r5
 8003492:	4625      	mov	r5, r4
 8003494:	e7f1      	b.n	800347a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003496:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003498:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800349a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800349c:	1ac2      	subs	r2, r0, r3
 800349e:	2a10      	cmp	r2, #16
 80034a0:	d90f      	bls.n	80034c2 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80034a2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034a4:	0741      	lsls	r1, r0, #29
 80034a6:	d008      	beq.n	80034ba <pvPortMalloc+0xbe>
 80034a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	e7fe      	b.n	80034b8 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80034ba:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80034bc:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80034be:	f7ff ff79 	bl	80033b4 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80034c2:	4913      	ldr	r1, [pc, #76]	; (8003510 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80034c4:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80034c6:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80034c8:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80034ca:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80034cc:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 80034ce:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80034d2:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80034d6:	bf38      	it	cc
 80034d8:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80034da:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80034dc:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80034de:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80034e0:	f000 fa50 	bl	8003984 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80034e4:	0763      	lsls	r3, r4, #29
 80034e6:	d008      	beq.n	80034fa <pvPortMalloc+0xfe>
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	e7fe      	b.n	80034f8 <pvPortMalloc+0xfc>
}
 80034fa:	4620      	mov	r0, r4
 80034fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003500:	20000190 	.word	0x20000190
 8003504:	20000d4c 	.word	0x20000d4c
 8003508:	20000194 	.word	0x20000194
 800350c:	20000d58 	.word	0x20000d58
 8003510:	20000d54 	.word	0x20000d54
 8003514:	20000d50 	.word	0x20000d50

08003518 <vPortFree>:
{
 8003518:	b510      	push	{r4, lr}
	if( pv != NULL )
 800351a:	4604      	mov	r4, r0
 800351c:	b370      	cbz	r0, 800357c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800351e:	4a18      	ldr	r2, [pc, #96]	; (8003580 <vPortFree+0x68>)
 8003520:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003524:	6812      	ldr	r2, [r2, #0]
 8003526:	4213      	tst	r3, r2
 8003528:	d108      	bne.n	800353c <vPortFree+0x24>
 800352a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352e:	f383 8811 	msr	BASEPRI, r3
 8003532:	f3bf 8f6f 	isb	sy
 8003536:	f3bf 8f4f 	dsb	sy
 800353a:	e7fe      	b.n	800353a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800353c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003540:	b141      	cbz	r1, 8003554 <vPortFree+0x3c>
 8003542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	e7fe      	b.n	8003552 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003554:	ea23 0302 	bic.w	r3, r3, r2
 8003558:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800355c:	f000 f978 	bl	8003850 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003560:	4a08      	ldr	r2, [pc, #32]	; (8003584 <vPortFree+0x6c>)
 8003562:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003566:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003568:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800356c:	440b      	add	r3, r1
 800356e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003570:	f7ff ff20 	bl	80033b4 <prvInsertBlockIntoFreeList>
}
 8003574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8003578:	f000 ba04 	b.w	8003984 <xTaskResumeAll>
 800357c:	bd10      	pop	{r4, pc}
 800357e:	bf00      	nop
 8003580:	20000d4c 	.word	0x20000d4c
 8003584:	20000d50 	.word	0x20000d50

08003588 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003588:	4a06      	ldr	r2, [pc, #24]	; (80035a4 <prvResetNextTaskUnblockTime+0x1c>)
 800358a:	6813      	ldr	r3, [r2, #0]
 800358c:	6819      	ldr	r1, [r3, #0]
 800358e:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <prvResetNextTaskUnblockTime+0x20>)
 8003590:	b919      	cbnz	r1, 800359a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003592:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800359e:	68d2      	ldr	r2, [r2, #12]
 80035a0:	6852      	ldr	r2, [r2, #4]
 80035a2:	e7f8      	b.n	8003596 <prvResetNextTaskUnblockTime+0xe>
 80035a4:	20000d64 	.word	0x20000d64
 80035a8:	20000e3c 	.word	0x20000e3c

080035ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80035ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80035ae:	4b1b      	ldr	r3, [pc, #108]	; (800361c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035b0:	4e1b      	ldr	r6, [pc, #108]	; (8003620 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80035b2:	681d      	ldr	r5, [r3, #0]
{
 80035b4:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035b6:	6830      	ldr	r0, [r6, #0]
 80035b8:	3004      	adds	r0, #4
{
 80035ba:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035bc:	f7ff fd84 	bl	80030c8 <uxListRemove>
 80035c0:	4633      	mov	r3, r6
 80035c2:	b940      	cbnz	r0, 80035d6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80035c4:	6831      	ldr	r1, [r6, #0]
 80035c6:	4e17      	ldr	r6, [pc, #92]	; (8003624 <prvAddCurrentTaskToDelayedList+0x78>)
 80035c8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80035ca:	6832      	ldr	r2, [r6, #0]
 80035cc:	2001      	movs	r0, #1
 80035ce:	4088      	lsls	r0, r1
 80035d0:	ea22 0200 	bic.w	r2, r2, r0
 80035d4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80035d6:	1c62      	adds	r2, r4, #1
 80035d8:	d107      	bne.n	80035ea <prvAddCurrentTaskToDelayedList+0x3e>
 80035da:	b137      	cbz	r7, 80035ea <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035dc:	6819      	ldr	r1, [r3, #0]
 80035de:	4812      	ldr	r0, [pc, #72]	; (8003628 <prvAddCurrentTaskToDelayedList+0x7c>)
 80035e0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80035e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035e6:	f7ff bd4c 	b.w	8003082 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80035ea:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035ec:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80035ee:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035f0:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80035f2:	d907      	bls.n	8003604 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035f4:	4a0d      	ldr	r2, [pc, #52]	; (800362c <prvAddCurrentTaskToDelayedList+0x80>)
 80035f6:	6810      	ldr	r0, [r2, #0]
 80035f8:	6819      	ldr	r1, [r3, #0]
}
 80035fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035fe:	3104      	adds	r1, #4
 8003600:	f7ff bd4b 	b.w	800309a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003604:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <prvAddCurrentTaskToDelayedList+0x84>)
 8003606:	6810      	ldr	r0, [r2, #0]
 8003608:	6819      	ldr	r1, [r3, #0]
 800360a:	3104      	adds	r1, #4
 800360c:	f7ff fd45 	bl	800309a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <prvAddCurrentTaskToDelayedList+0x88>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003616:	bf38      	it	cc
 8003618:	601c      	strcc	r4, [r3, #0]
 800361a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800361c:	20000e84 	.word	0x20000e84
 8003620:	20000d60 	.word	0x20000d60
 8003624:	20000e0c 	.word	0x20000e0c
 8003628:	20000e5c 	.word	0x20000e5c
 800362c:	20000d68 	.word	0x20000d68
 8003630:	20000d64 	.word	0x20000d64
 8003634:	20000e3c 	.word	0x20000e3c

08003638 <xTaskCreate>:
	{
 8003638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800363c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8003640:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003642:	4650      	mov	r0, sl
	{
 8003644:	460f      	mov	r7, r1
 8003646:	4699      	mov	r9, r3
 8003648:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800364a:	f7ff fed7 	bl	80033fc <pvPortMalloc>
			if( pxStack != NULL )
 800364e:	4605      	mov	r5, r0
 8003650:	2800      	cmp	r0, #0
 8003652:	f000 8096 	beq.w	8003782 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003656:	2054      	movs	r0, #84	; 0x54
 8003658:	f7ff fed0 	bl	80033fc <pvPortMalloc>
				if( pxNewTCB != NULL )
 800365c:	4604      	mov	r4, r0
 800365e:	2800      	cmp	r0, #0
 8003660:	f000 808c 	beq.w	800377c <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003664:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8003668:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800366a:	4455      	add	r5, sl
 800366c:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800366e:	f025 0a07 	bic.w	sl, r5, #7
 8003672:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8003676:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003678:	7859      	ldrb	r1, [r3, #1]
 800367a:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800367e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8003682:	b109      	cbz	r1, 8003688 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003684:	42bb      	cmp	r3, r7
 8003686:	d1f7      	bne.n	8003678 <xTaskCreate+0x40>
 8003688:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800368a:	2d06      	cmp	r5, #6
 800368c:	bf28      	it	cs
 800368e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003690:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003694:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8003696:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003698:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800369a:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800369c:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80036a0:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036a4:	f7ff fcea 	bl	800307c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036a8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036ac:	f104 0018 	add.w	r0, r4, #24
 80036b0:	f7ff fce4 	bl	800307c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80036b4:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036b8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036ba:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036bc:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036be:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036c2:	464a      	mov	r2, r9
 80036c4:	4641      	mov	r1, r8
 80036c6:	4650      	mov	r0, sl
 80036c8:	f7ff fd40 	bl	800314c <pxPortInitialiseStack>
 80036cc:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80036ce:	b106      	cbz	r6, 80036d2 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036d0:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80036d2:	f7ff fd67 	bl	80031a4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80036d6:	4b32      	ldr	r3, [pc, #200]	; (80037a0 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80036d8:	4e32      	ldr	r6, [pc, #200]	; (80037a4 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80037d0 <xTaskCreate+0x198>
 80036e0:	3201      	adds	r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80036e4:	6835      	ldr	r5, [r6, #0]
 80036e6:	2d00      	cmp	r5, #0
 80036e8:	d14e      	bne.n	8003788 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 80036ea:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d11d      	bne.n	800372e <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036f2:	eb08 0005 	add.w	r0, r8, r5
 80036f6:	3514      	adds	r5, #20
 80036f8:	f7ff fcb5 	bl	8003066 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036fc:	2d8c      	cmp	r5, #140	; 0x8c
 80036fe:	d1f8      	bne.n	80036f2 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8003700:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80037d4 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8003704:	4d28      	ldr	r5, [pc, #160]	; (80037a8 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8003706:	4648      	mov	r0, r9
 8003708:	f7ff fcad 	bl	8003066 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800370c:	4628      	mov	r0, r5
 800370e:	f7ff fcaa 	bl	8003066 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003712:	4826      	ldr	r0, [pc, #152]	; (80037ac <xTaskCreate+0x174>)
 8003714:	f7ff fca7 	bl	8003066 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003718:	4825      	ldr	r0, [pc, #148]	; (80037b0 <xTaskCreate+0x178>)
 800371a:	f7ff fca4 	bl	8003066 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800371e:	4825      	ldr	r0, [pc, #148]	; (80037b4 <xTaskCreate+0x17c>)
 8003720:	f7ff fca1 	bl	8003066 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003724:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <xTaskCreate+0x180>)
 8003726:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800372a:	4b24      	ldr	r3, [pc, #144]	; (80037bc <xTaskCreate+0x184>)
 800372c:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800372e:	4a24      	ldr	r2, [pc, #144]	; (80037c0 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8003730:	4924      	ldr	r1, [pc, #144]	; (80037c4 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8003732:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003734:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003736:	3301      	adds	r3, #1
 8003738:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800373a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800373c:	2501      	movs	r5, #1
 800373e:	fa05 f302 	lsl.w	r3, r5, r2
 8003742:	4303      	orrs	r3, r0
 8003744:	2014      	movs	r0, #20
 8003746:	600b      	str	r3, [r1, #0]
 8003748:	fb00 8002 	mla	r0, r0, r2, r8
 800374c:	4639      	mov	r1, r7
 800374e:	f7ff fc98 	bl	8003082 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003752:	f7ff fd49 	bl	80031e8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003756:	4b1c      	ldr	r3, [pc, #112]	; (80037c8 <xTaskCreate+0x190>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	b163      	cbz	r3, 8003776 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800375c:	6833      	ldr	r3, [r6, #0]
 800375e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003760:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003762:	429a      	cmp	r2, r3
 8003764:	d207      	bcs.n	8003776 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8003766:	4b19      	ldr	r3, [pc, #100]	; (80037cc <xTaskCreate+0x194>)
 8003768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	f3bf 8f6f 	isb	sy
	}
 8003776:	4628      	mov	r0, r5
 8003778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 800377c:	4628      	mov	r0, r5
 800377e:	f7ff fecb 	bl	8003518 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003782:	f04f 35ff 	mov.w	r5, #4294967295
 8003786:	e7f6      	b.n	8003776 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8003788:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <xTaskCreate+0x190>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1ce      	bne.n	800372e <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003790:	6833      	ldr	r3, [r6, #0]
 8003792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003794:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003796:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003798:	bf98      	it	ls
 800379a:	6034      	strls	r4, [r6, #0]
 800379c:	e7c7      	b.n	800372e <xTaskCreate+0xf6>
 800379e:	bf00      	nop
 80037a0:	20000df8 	.word	0x20000df8
 80037a4:	20000d60 	.word	0x20000d60
 80037a8:	20000e24 	.word	0x20000e24
 80037ac:	20000e44 	.word	0x20000e44
 80037b0:	20000e70 	.word	0x20000e70
 80037b4:	20000e5c 	.word	0x20000e5c
 80037b8:	20000d64 	.word	0x20000d64
 80037bc:	20000d68 	.word	0x20000d68
 80037c0:	20000e08 	.word	0x20000e08
 80037c4:	20000e0c 	.word	0x20000e0c
 80037c8:	20000e58 	.word	0x20000e58
 80037cc:	e000ed04 	.word	0xe000ed04
 80037d0:	20000d6c 	.word	0x20000d6c
 80037d4:	20000e10 	.word	0x20000e10

080037d8 <vTaskStartScheduler>:
{
 80037d8:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80037da:	4b17      	ldr	r3, [pc, #92]	; (8003838 <vTaskStartScheduler+0x60>)
 80037dc:	9301      	str	r3, [sp, #4]
 80037de:	2400      	movs	r4, #0
 80037e0:	9400      	str	r4, [sp, #0]
 80037e2:	4623      	mov	r3, r4
 80037e4:	2280      	movs	r2, #128	; 0x80
 80037e6:	4915      	ldr	r1, [pc, #84]	; (800383c <vTaskStartScheduler+0x64>)
 80037e8:	4815      	ldr	r0, [pc, #84]	; (8003840 <vTaskStartScheduler+0x68>)
 80037ea:	f7ff ff25 	bl	8003638 <xTaskCreate>
	if( xReturn == pdPASS )
 80037ee:	2801      	cmp	r0, #1
 80037f0:	d114      	bne.n	800381c <vTaskStartScheduler+0x44>
 80037f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f6:	f383 8811 	msr	BASEPRI, r3
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <vTaskStartScheduler+0x6c>)
 8003804:	f04f 32ff 	mov.w	r2, #4294967295
 8003808:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800380a:	4b0f      	ldr	r3, [pc, #60]	; (8003848 <vTaskStartScheduler+0x70>)
 800380c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800380e:	4b0f      	ldr	r3, [pc, #60]	; (800384c <vTaskStartScheduler+0x74>)
 8003810:	601c      	str	r4, [r3, #0]
}
 8003812:	b002      	add	sp, #8
 8003814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8003818:	f7ff bd56 	b.w	80032c8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800381c:	3001      	adds	r0, #1
 800381e:	d108      	bne.n	8003832 <vTaskStartScheduler+0x5a>
 8003820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	e7fe      	b.n	8003830 <vTaskStartScheduler+0x58>
}
 8003832:	b002      	add	sp, #8
 8003834:	bd10      	pop	{r4, pc}
 8003836:	bf00      	nop
 8003838:	20000e38 	.word	0x20000e38
 800383c:	08004fbf 	.word	0x08004fbf
 8003840:	08003abd 	.word	0x08003abd
 8003844:	20000e3c 	.word	0x20000e3c
 8003848:	20000e58 	.word	0x20000e58
 800384c:	20000e84 	.word	0x20000e84

08003850 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003850:	4a02      	ldr	r2, [pc, #8]	; (800385c <vTaskSuspendAll+0xc>)
 8003852:	6813      	ldr	r3, [r2, #0]
 8003854:	3301      	adds	r3, #1
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000e04 	.word	0x20000e04

08003860 <xTaskIncrementTick>:
{
 8003860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003864:	4b3c      	ldr	r3, [pc, #240]	; (8003958 <xTaskIncrementTick+0xf8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d153      	bne.n	8003914 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 800386c:	4b3b      	ldr	r3, [pc, #236]	; (800395c <xTaskIncrementTick+0xfc>)
 800386e:	681c      	ldr	r4, [r3, #0]
 8003870:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003872:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8003874:	b9bc      	cbnz	r4, 80038a6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003876:	4b3a      	ldr	r3, [pc, #232]	; (8003960 <xTaskIncrementTick+0x100>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	6812      	ldr	r2, [r2, #0]
 800387c:	b142      	cbz	r2, 8003890 <xTaskIncrementTick+0x30>
 800387e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003882:	f383 8811 	msr	BASEPRI, r3
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	e7fe      	b.n	800388e <xTaskIncrementTick+0x2e>
 8003890:	4a34      	ldr	r2, [pc, #208]	; (8003964 <xTaskIncrementTick+0x104>)
 8003892:	6819      	ldr	r1, [r3, #0]
 8003894:	6810      	ldr	r0, [r2, #0]
 8003896:	6018      	str	r0, [r3, #0]
 8003898:	6011      	str	r1, [r2, #0]
 800389a:	4a33      	ldr	r2, [pc, #204]	; (8003968 <xTaskIncrementTick+0x108>)
 800389c:	6813      	ldr	r3, [r2, #0]
 800389e:	3301      	adds	r3, #1
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	f7ff fe71 	bl	8003588 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038a6:	4d31      	ldr	r5, [pc, #196]	; (800396c <xTaskIncrementTick+0x10c>)
 80038a8:	4f31      	ldr	r7, [pc, #196]	; (8003970 <xTaskIncrementTick+0x110>)
 80038aa:	682b      	ldr	r3, [r5, #0]
 80038ac:	429c      	cmp	r4, r3
 80038ae:	f04f 0b00 	mov.w	fp, #0
 80038b2:	d33e      	bcc.n	8003932 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038b4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003960 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80038b8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003980 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038bc:	f8d8 2000 	ldr.w	r2, [r8]
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	bb72      	cbnz	r2, 8003922 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038c4:	f04f 32ff 	mov.w	r2, #4294967295
 80038c8:	602a      	str	r2, [r5, #0]
					break;
 80038ca:	e032      	b.n	8003932 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038cc:	f106 0a04 	add.w	sl, r6, #4
 80038d0:	4650      	mov	r0, sl
 80038d2:	f7ff fbf9 	bl	80030c8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038d6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80038d8:	b119      	cbz	r1, 80038e2 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038da:	f106 0018 	add.w	r0, r6, #24
 80038de:	f7ff fbf3 	bl	80030c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038e2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80038e4:	f8d9 3000 	ldr.w	r3, [r9]
 80038e8:	2201      	movs	r2, #1
 80038ea:	fa02 f100 	lsl.w	r1, r2, r0
 80038ee:	4319      	orrs	r1, r3
 80038f0:	4b20      	ldr	r3, [pc, #128]	; (8003974 <xTaskIncrementTick+0x114>)
 80038f2:	f8c9 1000 	str.w	r1, [r9]
 80038f6:	f04f 0e14 	mov.w	lr, #20
 80038fa:	4651      	mov	r1, sl
 80038fc:	fb0e 3000 	mla	r0, lr, r0, r3
 8003900:	f7ff fbbf 	bl	8003082 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003904:	6838      	ldr	r0, [r7, #0]
 8003906:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003908:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800390a:	4291      	cmp	r1, r2
 800390c:	bf28      	it	cs
 800390e:	f04f 0b01 	movcs.w	fp, #1
 8003912:	e7d3      	b.n	80038bc <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8003914:	4a18      	ldr	r2, [pc, #96]	; (8003978 <xTaskIncrementTick+0x118>)
 8003916:	6813      	ldr	r3, [r2, #0]
 8003918:	3301      	adds	r3, #1
 800391a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800391c:	f04f 0b00 	mov.w	fp, #0
 8003920:	e011      	b.n	8003946 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003922:	f8d8 2000 	ldr.w	r2, [r8]
 8003926:	68d2      	ldr	r2, [r2, #12]
 8003928:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800392a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800392c:	428c      	cmp	r4, r1
 800392e:	d2cd      	bcs.n	80038cc <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003930:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <xTaskIncrementTick+0x114>)
 8003936:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003938:	2214      	movs	r2, #20
 800393a:	434a      	muls	r2, r1
 800393c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800393e:	2a02      	cmp	r2, #2
 8003940:	bf28      	it	cs
 8003942:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8003946:	4a0d      	ldr	r2, [pc, #52]	; (800397c <xTaskIncrementTick+0x11c>)
 8003948:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800394a:	2a00      	cmp	r2, #0
 800394c:	bf18      	it	ne
 800394e:	f04f 0b01 	movne.w	fp, #1
}
 8003952:	4658      	mov	r0, fp
 8003954:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003958:	20000e04 	.word	0x20000e04
 800395c:	20000e84 	.word	0x20000e84
 8003960:	20000d64 	.word	0x20000d64
 8003964:	20000d68 	.word	0x20000d68
 8003968:	20000e40 	.word	0x20000e40
 800396c:	20000e3c 	.word	0x20000e3c
 8003970:	20000d60 	.word	0x20000d60
 8003974:	20000d6c 	.word	0x20000d6c
 8003978:	20000e00 	.word	0x20000e00
 800397c:	20000e88 	.word	0x20000e88
 8003980:	20000e0c 	.word	0x20000e0c

08003984 <xTaskResumeAll>:
{
 8003984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003988:	4c31      	ldr	r4, [pc, #196]	; (8003a50 <xTaskResumeAll+0xcc>)
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	b943      	cbnz	r3, 80039a0 <xTaskResumeAll+0x1c>
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	e7fe      	b.n	800399e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80039a0:	f7ff fc00 	bl	80031a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039aa:	6824      	ldr	r4, [r4, #0]
 80039ac:	b12c      	cbz	r4, 80039ba <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80039ae:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80039b0:	f7ff fc1a 	bl	80031e8 <vPortExitCritical>
}
 80039b4:	4620      	mov	r0, r4
 80039b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039ba:	4b26      	ldr	r3, [pc, #152]	; (8003a54 <xTaskResumeAll+0xd0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f5      	beq.n	80039ae <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039c2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003a6c <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80039c6:	4f24      	ldr	r7, [pc, #144]	; (8003a58 <xTaskResumeAll+0xd4>)
 80039c8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003a70 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039cc:	f8d9 3000 	ldr.w	r3, [r9]
 80039d0:	b9e3      	cbnz	r3, 8003a0c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80039d2:	b10c      	cbz	r4, 80039d8 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80039d4:	f7ff fdd8 	bl	8003588 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80039d8:	4d20      	ldr	r5, [pc, #128]	; (8003a5c <xTaskResumeAll+0xd8>)
 80039da:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80039dc:	b144      	cbz	r4, 80039f0 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80039de:	4e20      	ldr	r6, [pc, #128]	; (8003a60 <xTaskResumeAll+0xdc>)
 80039e0:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80039e2:	f7ff ff3d 	bl	8003860 <xTaskIncrementTick>
 80039e6:	b100      	cbz	r0, 80039ea <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80039e8:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80039ea:	3c01      	subs	r4, #1
 80039ec:	d1f9      	bne.n	80039e2 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80039ee:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80039f0:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <xTaskResumeAll+0xdc>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0da      	beq.n	80039ae <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80039f8:	4b1a      	ldr	r3, [pc, #104]	; (8003a64 <xTaskResumeAll+0xe0>)
 80039fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003a08:	2401      	movs	r4, #1
 8003a0a:	e7d1      	b.n	80039b0 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003a0c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003a10:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a12:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a14:	f104 0018 	add.w	r0, r4, #24
 8003a18:	f7ff fb56 	bl	80030c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	f7ff fb53 	bl	80030c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003a24:	6839      	ldr	r1, [r7, #0]
 8003a26:	2501      	movs	r5, #1
 8003a28:	fa05 f302 	lsl.w	r3, r5, r2
 8003a2c:	2014      	movs	r0, #20
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	fb00 8002 	mla	r0, r0, r2, r8
 8003a34:	4631      	mov	r1, r6
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	f7ff fb23 	bl	8003082 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <xTaskResumeAll+0xe4>)
 8003a3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8003a46:	bf24      	itt	cs
 8003a48:	4b05      	ldrcs	r3, [pc, #20]	; (8003a60 <xTaskResumeAll+0xdc>)
 8003a4a:	601d      	strcs	r5, [r3, #0]
 8003a4c:	e7be      	b.n	80039cc <xTaskResumeAll+0x48>
 8003a4e:	bf00      	nop
 8003a50:	20000e04 	.word	0x20000e04
 8003a54:	20000df8 	.word	0x20000df8
 8003a58:	20000e0c 	.word	0x20000e0c
 8003a5c:	20000e00 	.word	0x20000e00
 8003a60:	20000e88 	.word	0x20000e88
 8003a64:	e000ed04 	.word	0xe000ed04
 8003a68:	20000d60 	.word	0x20000d60
 8003a6c:	20000e44 	.word	0x20000e44
 8003a70:	20000d6c 	.word	0x20000d6c

08003a74 <vTaskDelay>:
	{
 8003a74:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a76:	b940      	cbnz	r0, 8003a8a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003a78:	4b0e      	ldr	r3, [pc, #56]	; (8003ab4 <vTaskDelay+0x40>)
 8003a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <vTaskDelay+0x44>)
 8003a8c:	6819      	ldr	r1, [r3, #0]
 8003a8e:	b141      	cbz	r1, 8003aa2 <vTaskDelay+0x2e>
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	e7fe      	b.n	8003aa0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003aa2:	f7ff fed5 	bl	8003850 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003aa6:	f7ff fd81 	bl	80035ac <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003aaa:	f7ff ff6b 	bl	8003984 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	d0e2      	beq.n	8003a78 <vTaskDelay+0x4>
 8003ab2:	bd08      	pop	{r3, pc}
 8003ab4:	e000ed04 	.word	0xe000ed04
 8003ab8:	20000e04 	.word	0x20000e04

08003abc <prvIdleTask>:
{
 8003abc:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003abe:	4e17      	ldr	r6, [pc, #92]	; (8003b1c <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ac0:	4c17      	ldr	r4, [pc, #92]	; (8003b20 <prvIdleTask+0x64>)
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	b963      	cbnz	r3, 8003ae0 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ac6:	4b17      	ldr	r3, [pc, #92]	; (8003b24 <prvIdleTask+0x68>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d9f8      	bls.n	8003ac0 <prvIdleTask+0x4>
				taskYIELD();
 8003ace:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <prvIdleTask+0x6c>)
 8003ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	e7ef      	b.n	8003ac0 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8003ae0:	f7ff feb6 	bl	8003850 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003ae4:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8003ae6:	f7ff ff4d 	bl	8003984 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8003aea:	2d00      	cmp	r5, #0
 8003aec:	d0e9      	beq.n	8003ac2 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8003aee:	f7ff fb59 	bl	80031a4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003af2:	68f3      	ldr	r3, [r6, #12]
 8003af4:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003af6:	1d28      	adds	r0, r5, #4
 8003af8:	f7ff fae6 	bl	80030c8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003afc:	4a0b      	ldr	r2, [pc, #44]	; (8003b2c <prvIdleTask+0x70>)
 8003afe:	6813      	ldr	r3, [r2, #0]
 8003b00:	3b01      	subs	r3, #1
 8003b02:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8003b0a:	f7ff fb6d 	bl	80031e8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8003b0e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003b10:	f7ff fd02 	bl	8003518 <vPortFree>
			vPortFree( pxTCB );
 8003b14:	4628      	mov	r0, r5
 8003b16:	f7ff fcff 	bl	8003518 <vPortFree>
 8003b1a:	e7d2      	b.n	8003ac2 <prvIdleTask+0x6>
 8003b1c:	20000e70 	.word	0x20000e70
 8003b20:	20000dfc 	.word	0x20000dfc
 8003b24:	20000d6c 	.word	0x20000d6c
 8003b28:	e000ed04 	.word	0xe000ed04
 8003b2c:	20000df8 	.word	0x20000df8

08003b30 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b30:	4b17      	ldr	r3, [pc, #92]	; (8003b90 <vTaskSwitchContext+0x60>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	4b17      	ldr	r3, [pc, #92]	; (8003b94 <vTaskSwitchContext+0x64>)
{
 8003b36:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b38:	b112      	cbz	r2, 8003b40 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003b3a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003b40:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003b42:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <vTaskSwitchContext+0x68>)
 8003b44:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003b46:	fab3 f383 	clz	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f1c3 031f 	rsb	r3, r3, #31
 8003b50:	2214      	movs	r2, #20
 8003b52:	4912      	ldr	r1, [pc, #72]	; (8003b9c <vTaskSwitchContext+0x6c>)
 8003b54:	435a      	muls	r2, r3
 8003b56:	1888      	adds	r0, r1, r2
 8003b58:	588c      	ldr	r4, [r1, r2]
 8003b5a:	b944      	cbnz	r4, 8003b6e <vTaskSwitchContext+0x3e>
	__asm volatile
 8003b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	e7fe      	b.n	8003b6c <vTaskSwitchContext+0x3c>
 8003b6e:	6844      	ldr	r4, [r0, #4]
 8003b70:	3208      	adds	r2, #8
 8003b72:	6864      	ldr	r4, [r4, #4]
 8003b74:	6044      	str	r4, [r0, #4]
 8003b76:	440a      	add	r2, r1
 8003b78:	4294      	cmp	r4, r2
 8003b7a:	bf04      	itt	eq
 8003b7c:	6862      	ldreq	r2, [r4, #4]
 8003b7e:	6042      	streq	r2, [r0, #4]
 8003b80:	2214      	movs	r2, #20
 8003b82:	fb02 1303 	mla	r3, r2, r3, r1
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <vTaskSwitchContext+0x70>)
 8003b8c:	e7d6      	b.n	8003b3c <vTaskSwitchContext+0xc>
 8003b8e:	bf00      	nop
 8003b90:	20000e04 	.word	0x20000e04
 8003b94:	20000e88 	.word	0x20000e88
 8003b98:	20000e0c 	.word	0x20000e0c
 8003b9c:	20000d6c 	.word	0x20000d6c
 8003ba0:	20000d60 	.word	0x20000d60

08003ba4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <xTaskGetSchedulerState+0x18>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	b133      	cbz	r3, 8003bb8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003baa:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <xTaskGetSchedulerState+0x1c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8003bb0:	bf0c      	ite	eq
 8003bb2:	2002      	moveq	r0, #2
 8003bb4:	2000      	movne	r0, #0
 8003bb6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003bb8:	2001      	movs	r0, #1
	}
 8003bba:	4770      	bx	lr
 8003bbc:	20000e58 	.word	0x20000e58
 8003bc0:	20000e04 	.word	0x20000e04

08003bc4 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8003bc4:	b530      	push	{r4, r5, lr}
 8003bc6:	b099      	sub	sp, #100	; 0x64
	uint16_t msgLen = 0;
	uint8_t u8Buffer[80];
	uint32_t	u32Length=0;
 8003bc8:	ac18      	add	r4, sp, #96	; 0x60
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f844 3d54 	str.w	r3, [r4, #-84]!
//      }
//      msgLen = HAL_UART_Read(app_buf,msgLen);
//      HAL_UART_Write(app_buf,msgLen);
//
//    }
  	enuRetVal=tszUART_Read(UART_IF_DEV_1, u8Buffer, 20, &u32Length, 2000U);
 8003bd0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	2214      	movs	r2, #20
 8003bd8:	4623      	mov	r3, r4
 8003bda:	a904      	add	r1, sp, #16
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f7fc fffd 	bl	8000bdc <tszUART_Read>
  	if(enuRetVal == UART_IF_ERR_OK)
 8003be2:	4605      	mov	r5, r0
 8003be4:	b958      	cbnz	r0, 8003bfe <StartDefaultTask+0x3a>
  	{
  		tszUART_Write(CONSOLE_UART, (const uint8_t*)u8Buffer, strlen(u8Buffer), 500,UART_IF_SEND_WAY_DMA);
 8003be6:	a804      	add	r0, sp, #16
 8003be8:	f7fc faf2 	bl	80001d0 <strlen>
 8003bec:	2302      	movs	r3, #2
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003bf6:	a904      	add	r1, sp, #16
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	f7fd f84d 	bl	8000c98 <tszUART_Write>
  	}
 	 memset(u8Buffer,0,sizeof(u8Buffer));
 8003bfe:	2250      	movs	r2, #80	; 0x50
 8003c00:	2100      	movs	r1, #0
 8003c02:	a804      	add	r0, sp, #16
 8003c04:	f000 fd6b 	bl	80046de <memset>
//    UartReady = RESET;
//    if(HAL_UART_Receive_IT(&(stUartProperty[UART_IF_DEV_1].hUardHandle), (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK)
//    {
//      Error_Handler();
//    }
    osDelay(1);
 8003c08:	2001      	movs	r0, #1
 8003c0a:	f7ff fa1a 	bl	8003042 <osDelay>
  {
 8003c0e:	e7df      	b.n	8003bd0 <StartDefaultTask+0xc>

08003c10 <SystemClock_Config>:
{
 8003c10:	b570      	push	{r4, r5, r6, lr}
 8003c12:	b0b8      	sub	sp, #224	; 0xe0
  HAL_PWR_EnableBkUpAccess();
 8003c14:	f7fd fc1e 	bl	8001454 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003c18:	4a2e      	ldr	r2, [pc, #184]	; (8003cd4 <SystemClock_Config+0xc4>)
 8003c1a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003c1e:	f023 0318 	bic.w	r3, r3, #24
 8003c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
 8003c26:	2315      	movs	r3, #21
 8003c28:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c2e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003c30:	2301      	movs	r3, #1
 8003c32:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003c34:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003c36:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLN = 80;
 8003c38:	2250      	movs	r2, #80	; 0x50
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003c3a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8003c3c:	23b0      	movs	r3, #176	; 0xb0
 8003c3e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c40:	2603      	movs	r6, #3
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c42:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 80;
 8003c44:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8003c46:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003c48:	2207      	movs	r2, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c4a:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c4c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c4e:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003c50:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003c52:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8003c54:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c56:	f7fd fcfb 	bl	8001650 <HAL_RCC_OscConfig>
 8003c5a:	b100      	cbz	r0, 8003c5e <SystemClock_Config+0x4e>
 8003c5c:	e7fe      	b.n	8003c5c <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c5e:	250f      	movs	r5, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c60:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c62:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c64:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003c66:	4621      	mov	r1, r4
 8003c68:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c6a:	e88d 0060 	stmia.w	sp, {r5, r6}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003c6e:	f7fd ff21 	bl	8001ab4 <HAL_RCC_ClockConfig>
 8003c72:	b100      	cbz	r0, 8003c76 <SystemClock_Config+0x66>
 8003c74:	e7fe      	b.n	8003c74 <SystemClock_Config+0x64>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8003c76:	4b18      	ldr	r3, [pc, #96]	; (8003cd8 <SystemClock_Config+0xc8>)
 8003c78:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003c7e:	9024      	str	r0, [sp, #144]	; 0x90
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003c80:	9025      	str	r0, [sp, #148]	; 0x94
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003c82:	9026      	str	r0, [sp, #152]	; 0x98
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003c84:	9027      	str	r0, [sp, #156]	; 0x9c
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003c86:	9028      	str	r0, [sp, #160]	; 0xa0
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003c88:	9337      	str	r3, [sp, #220]	; 0xdc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c8a:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8003c8c:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8003c90:	9331      	str	r3, [sp, #196]	; 0xc4
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_MSI;
 8003c92:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c94:	f7fe f8f6 	bl	8001e84 <HAL_RCCEx_PeriphCLKConfig>
 8003c98:	b100      	cbz	r0, 8003c9c <SystemClock_Config+0x8c>
 8003c9a:	e7fe      	b.n	8003c9a <SystemClock_Config+0x8a>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003c9c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003ca0:	f7fd fbe8 	bl	8001474 <HAL_PWREx_ControlVoltageScaling>
 8003ca4:	4606      	mov	r6, r0
 8003ca6:	b100      	cbz	r0, 8003caa <SystemClock_Config+0x9a>
 8003ca8:	e7fe      	b.n	8003ca8 <SystemClock_Config+0x98>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003caa:	f7fd ffb9 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8003cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cb2:	fbb0 f0f3 	udiv	r0, r0, r3
 8003cb6:	f7fd f8f9 	bl	8000eac <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003cba:	4620      	mov	r0, r4
 8003cbc:	f7fd f90c 	bl	8000ed8 <HAL_SYSTICK_CLKSourceConfig>
  HAL_RCCEx_EnableMSIPLLMode();
 8003cc0:	f7fe fac8 	bl	8002254 <HAL_RCCEx_EnableMSIPLLMode>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003cc4:	4632      	mov	r2, r6
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ccc:	f7fd f8ae 	bl	8000e2c <HAL_NVIC_SetPriority>
}
 8003cd0:	b038      	add	sp, #224	; 0xe0
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	0006201f 	.word	0x0006201f

08003cdc <main>:
{
 8003cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ce0:	4c9b      	ldr	r4, [pc, #620]	; (8003f50 <main+0x274>)
{
 8003ce2:	b090      	sub	sp, #64	; 0x40
  HAL_Init();
 8003ce4:	f7fd f868 	bl	8000db8 <HAL_Init>
  SystemClock_Config();
 8003ce8:	f7ff ff92 	bl	8003c10 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003cee:	f043 0304 	orr.w	r3, r3, #4
 8003cf2:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003cf4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003cf6:	f003 0304 	and.w	r3, r3, #4
 8003cfa:	9305      	str	r3, [sp, #20]
 8003cfc:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003cfe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d04:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003d06:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0c:	9306      	str	r3, [sp, #24]
 8003d0e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d10:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003d18:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	9307      	str	r3, [sp, #28]
 8003d20:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d22:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003d24:	f043 0302 	orr.w	r3, r3, #2
 8003d28:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003d2a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	9308      	str	r3, [sp, #32]
 8003d32:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d34:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003d36:	f043 0308 	orr.w	r3, r3, #8
 8003d3a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003d3c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	9309      	str	r3, [sp, #36]	; 0x24
 8003d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d46:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d4c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003d4e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d54:	930a      	str	r3, [sp, #40]	; 0x28
 8003d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_PWREx_EnableVddIO2();
 8003d58:	f7fd fbc8 	bl	80014ec <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003d5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	64a3      	str	r3, [r4, #72]	; 0x48
 8003d64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	9303      	str	r3, [sp, #12]
 8003d6c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003d6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003d70:	f043 0302 	orr.w	r3, r3, #2
 8003d74:	64a3      	str	r3, [r4, #72]	; 0x48
 8003d76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003d78:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003d80:	9304      	str	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8003d82:	200c      	movs	r0, #12
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003d84:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8003d86:	f7fd f851 	bl	8000e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003d8a:	200c      	movs	r0, #12
 8003d8c:	f7fd f882 	bl	8000e94 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8003d90:	2200      	movs	r2, #0
 8003d92:	2105      	movs	r1, #5
 8003d94:	200d      	movs	r0, #13
 8003d96:	f7fd f849 	bl	8000e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003d9a:	200d      	movs	r0, #13
 8003d9c:	f7fd f87a 	bl	8000e94 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8003da0:	2200      	movs	r2, #0
 8003da2:	2105      	movs	r1, #5
 8003da4:	200e      	movs	r0, #14
 8003da6:	f7fd f841 	bl	8000e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003daa:	200e      	movs	r0, #14
 8003dac:	f7fd f872 	bl	8000e94 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8003db0:	2200      	movs	r2, #0
 8003db2:	2105      	movs	r1, #5
 8003db4:	200f      	movs	r0, #15
 8003db6:	f7fd f839 	bl	8000e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003dba:	200f      	movs	r0, #15
 8003dbc:	f7fd f86a 	bl	8000e94 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2105      	movs	r1, #5
 8003dc4:	2010      	movs	r0, #16
 8003dc6:	f7fd f831 	bl	8000e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003dca:	2010      	movs	r0, #16
 8003dcc:	f7fd f862 	bl	8000e94 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2105      	movs	r1, #5
 8003dd4:	2011      	movs	r0, #17
 8003dd6:	f7fd f829 	bl	8000e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003dda:	2011      	movs	r0, #17
 8003ddc:	f7fd f85a 	bl	8000e94 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8003de0:	2200      	movs	r2, #0
 8003de2:	2105      	movs	r1, #5
 8003de4:	2038      	movs	r0, #56	; 0x38
 8003de6:	f7fd f821 	bl	8000e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8003dea:	2038      	movs	r0, #56	; 0x38
 8003dec:	f7fd f852 	bl	8000e94 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 8003df0:	2200      	movs	r2, #0
 8003df2:	2105      	movs	r1, #5
 8003df4:	2039      	movs	r0, #57	; 0x39
 8003df6:	f7fd f819 	bl	8000e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8003dfa:	2039      	movs	r0, #57	; 0x39
 8003dfc:	f7fd f84a 	bl	8000e94 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 5, 0);
 8003e00:	2200      	movs	r2, #0
 8003e02:	2105      	movs	r1, #5
 8003e04:	203a      	movs	r0, #58	; 0x3a
 8003e06:	f7fd f811 	bl	8000e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8003e0a:	203a      	movs	r0, #58	; 0x3a
 8003e0c:	f7fd f842 	bl	8000e94 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 8003e10:	2200      	movs	r2, #0
 8003e12:	2105      	movs	r1, #5
 8003e14:	203c      	movs	r0, #60	; 0x3c
 8003e16:	f7fd f809 	bl	8000e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8003e1a:	203c      	movs	r0, #60	; 0x3c
 8003e1c:	f7fd f83a 	bl	8000e94 <HAL_NVIC_EnableIRQ>
  hrng.Instance = RNG;
 8003e20:	484c      	ldr	r0, [pc, #304]	; (8003f54 <main+0x278>)
 8003e22:	4b4d      	ldr	r3, [pc, #308]	; (8003f58 <main+0x27c>)
 8003e24:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003e26:	f7fe fa1d 	bl	8002264 <HAL_RNG_Init>
 8003e2a:	b100      	cbz	r0, 8003e2e <main+0x152>
 8003e2c:	e7fe      	b.n	8003e2c <main+0x150>
  hrtc.Instance = RTC;
 8003e2e:	4b4b      	ldr	r3, [pc, #300]	; (8003f5c <main+0x280>)
 8003e30:	4a4b      	ldr	r2, [pc, #300]	; (8003f60 <main+0x284>)
 8003e32:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = 127;
 8003e34:	227f      	movs	r2, #127	; 0x7f
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003e36:	6058      	str	r0, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003e38:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003e3a:	6118      	str	r0, [r3, #16]
  hrtc.Init.SynchPrediv = 255;
 8003e3c:	22ff      	movs	r2, #255	; 0xff
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003e3e:	6158      	str	r0, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003e40:	6198      	str	r0, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003e42:	61d8      	str	r0, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003e44:	4618      	mov	r0, r3
  hrtc.Init.SynchPrediv = 255;
 8003e46:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003e48:	f7fe fa55 	bl	80022f6 <HAL_RTC_Init>
 8003e4c:	b100      	cbz	r0, 8003e50 <main+0x174>
 8003e4e:	e7fe      	b.n	8003e4e <main+0x172>
  hspi1.Instance = SPI1;
 8003e50:	4b44      	ldr	r3, [pc, #272]	; (8003f64 <main+0x288>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e52:	4a45      	ldr	r2, [pc, #276]	; (8003f68 <main+0x28c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003e54:	6098      	str	r0, [r3, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e56:	f44f 7882 	mov.w	r8, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003e5a:	f44f 7740 	mov.w	r7, #768	; 0x300
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e5e:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e60:	6158      	str	r0, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e62:	f44f 7600 	mov.w	r6, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e66:	61d8      	str	r0, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e68:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e6a:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e6c:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003e6e:	2507      	movs	r5, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003e70:	6318      	str	r0, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003e72:	2408      	movs	r4, #8
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003e74:	4618      	mov	r0, r3
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e76:	e883 0104 	stmia.w	r3, {r2, r8}
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003e7a:	60df      	str	r7, [r3, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e7c:	619e      	str	r6, [r3, #24]
  hspi1.Init.CRCPolynomial = 7;
 8003e7e:	62dd      	str	r5, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003e80:	635c      	str	r4, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003e82:	f7fe fa8d 	bl	80023a0 <HAL_SPI_Init>
 8003e86:	b100      	cbz	r0, 8003e8a <main+0x1ae>
 8003e88:	e7fe      	b.n	8003e88 <main+0x1ac>
  hspi2.Instance = SPI2;
 8003e8a:	4b38      	ldr	r3, [pc, #224]	; (8003f6c <main+0x290>)
 8003e8c:	4a38      	ldr	r2, [pc, #224]	; (8003f70 <main+0x294>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003e8e:	6098      	str	r0, [r3, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e90:	6118      	str	r0, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e92:	6158      	str	r0, [r3, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e94:	61d8      	str	r0, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e96:	6218      	str	r0, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e98:	6258      	str	r0, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e9a:	6298      	str	r0, [r3, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003e9c:	6318      	str	r0, [r3, #48]	; 0x30
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003e9e:	4618      	mov	r0, r3
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003ea0:	e883 0104 	stmia.w	r3, {r2, r8}
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003ea4:	60df      	str	r7, [r3, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003ea6:	619e      	str	r6, [r3, #24]
  hspi2.Init.CRCPolynomial = 7;
 8003ea8:	62dd      	str	r5, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003eaa:	635c      	str	r4, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003eac:	f7fe fa78 	bl	80023a0 <HAL_SPI_Init>
 8003eb0:	b100      	cbz	r0, 8003eb4 <main+0x1d8>
 8003eb2:	e7fe      	b.n	8003eb2 <main+0x1d6>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003eb4:	4b2f      	ldr	r3, [pc, #188]	; (8003f74 <main+0x298>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003eb6:	2406      	movs	r4, #6
 8003eb8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003ebc:	e883 0014 	stmia.w	r3, {r2, r4}
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003ec0:	6158      	str	r0, [r3, #20]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003ec2:	2401      	movs	r4, #1
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003ec4:	61d8      	str	r0, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003ec6:	6218      	str	r0, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003ec8:	6258      	str	r0, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8003eca:	6298      	str	r0, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003ecc:	6318      	str	r0, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003ece:	62d8      	str	r0, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003ed0:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003ed2:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003ed4:	619c      	str	r4, [r3, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003ed6:	f7fd fa1b 	bl	8001310 <HAL_PCD_Init>
 8003eda:	b100      	cbz	r0, 8003ede <main+0x202>
 8003edc:	e7fe      	b.n	8003edc <main+0x200>
  huart1.Instance = USART1;
 8003ede:	4b26      	ldr	r3, [pc, #152]	; (8003f78 <main+0x29c>)
  huart1.Init.BaudRate = 115200;
 8003ee0:	4a26      	ldr	r2, [pc, #152]	; (8003f7c <main+0x2a0>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ee2:	60d8      	str	r0, [r3, #12]
  huart1.Init.BaudRate = 115200;
 8003ee4:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
 8003ee8:	e883 0024 	stmia.w	r3, {r2, r5}
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8003eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ef0:	609a      	str	r2, [r3, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ef2:	6118      	str	r0, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ef4:	220c      	movs	r2, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ef6:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ef8:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003efa:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003efc:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003efe:	4618      	mov	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f00:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f02:	f7fe ff15 	bl	8002d30 <HAL_UART_Init>
 8003f06:	4606      	mov	r6, r0
 8003f08:	b100      	cbz	r0, 8003f0c <main+0x230>
 8003f0a:	e7fe      	b.n	8003f0a <main+0x22e>
  tszUART_Init(UART_IF_DEV_1,115200,UART_IF_HWFLOWCTL_NONE,UART_IF_STOP_BITS_1,UART_IF_PARITY_NONE);
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	4602      	mov	r2, r0
 8003f10:	4629      	mov	r1, r5
 8003f12:	9000      	str	r0, [sp, #0]
 8003f14:	f7fc fdf0 	bl	8000af8 <tszUART_Init>
	Console_dbgPrintf(LOG_MODE_SYS, "Hello world\r\n");
 8003f18:	4620      	mov	r0, r4
 8003f1a:	4919      	ldr	r1, [pc, #100]	; (8003f80 <main+0x2a4>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003f1c:	4d19      	ldr	r5, [pc, #100]	; (8003f84 <main+0x2a8>)
	Console_dbgPrintf(LOG_MODE_SYS, "Hello world\r\n");
 8003f1e:	f7fc fba5 	bl	800066c <Console_dbgPrintf>
	 tszUART_Write(CONSOLE_UART, (const uint8_t*)"Hello world11\r\n", strlen("Hello world11\r\n"), 500,UART_IF_SEND_WAY_DMA);
 8003f22:	2302      	movs	r3, #2
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	220f      	movs	r2, #15
 8003f28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003f2c:	4916      	ldr	r1, [pc, #88]	; (8003f88 <main+0x2ac>)
 8003f2e:	4630      	mov	r0, r6
 8003f30:	f7fc feb2 	bl	8000c98 <tszUART_Write>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f36:	ac0b      	add	r4, sp, #44	; 0x2c
 8003f38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f3a:	682b      	ldr	r3, [r5, #0]
 8003f3c:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003f3e:	4631      	mov	r1, r6
 8003f40:	a80b      	add	r0, sp, #44	; 0x2c
 8003f42:	f7ff f866 	bl	8003012 <osThreadCreate>
 8003f46:	4b11      	ldr	r3, [pc, #68]	; (8003f8c <main+0x2b0>)
 8003f48:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003f4a:	f7ff f85d 	bl	8003008 <osKernelStart>
 8003f4e:	e7fe      	b.n	8003f4e <main+0x272>
 8003f50:	40021000 	.word	0x40021000
 8003f54:	200043a4 	.word	0x200043a4
 8003f58:	50060800 	.word	0x50060800
 8003f5c:	20004380 	.word	0x20004380
 8003f60:	40002800 	.word	0x40002800
 8003f64:	20004428 	.word	0x20004428
 8003f68:	40013000 	.word	0x40013000
 8003f6c:	20003c80 	.word	0x20003c80
 8003f70:	40003800 	.word	0x40003800
 8003f74:	20003da4 	.word	0x20003da4
 8003f78:	20004308 	.word	0x20004308
 8003f7c:	40013800 	.word	0x40013800
 8003f80:	08004fc4 	.word	0x08004fc4
 8003f84:	08004f74 	.word	0x08004f74
 8003f88:	08004fd2 	.word	0x08004fd2
 8003f8c:	20003c34 	.word	0x20003c34

08003f90 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003f90:	e7fe      	b.n	8003f90 <_Error_Handler>
	...

08003f94 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f94:	4b21      	ldr	r3, [pc, #132]	; (800401c <HAL_MspInit+0x88>)
{
 8003f96:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	661a      	str	r2, [r3, #96]	; 0x60
 8003fa0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003fa2:	f002 0201 	and.w	r2, r2, #1
 8003fa6:	9200      	str	r2, [sp, #0]
 8003fa8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003faa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003fb0:	659a      	str	r2, [r3, #88]	; 0x58
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fba:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fbc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fbe:	f7fc ff23 	bl	8000e08 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	f06f 000b 	mvn.w	r0, #11
 8003fca:	f7fc ff2f 	bl	8000e2c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003fce:	2200      	movs	r2, #0
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	f06f 000a 	mvn.w	r0, #10
 8003fd6:	f7fc ff29 	bl	8000e2c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003fda:	2200      	movs	r2, #0
 8003fdc:	4611      	mov	r1, r2
 8003fde:	f06f 0009 	mvn.w	r0, #9
 8003fe2:	f7fc ff23 	bl	8000e2c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	4611      	mov	r1, r2
 8003fea:	f06f 0004 	mvn.w	r0, #4
 8003fee:	f7fc ff1d 	bl	8000e2c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	f06f 0003 	mvn.w	r0, #3
 8003ffa:	f7fc ff17 	bl	8000e2c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ffe:	2200      	movs	r2, #0
 8004000:	210f      	movs	r1, #15
 8004002:	f06f 0001 	mvn.w	r0, #1
 8004006:	f7fc ff11 	bl	8000e2c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800400a:	2200      	movs	r2, #0
 800400c:	210f      	movs	r1, #15
 800400e:	f04f 30ff 	mov.w	r0, #4294967295
 8004012:	f7fc ff0b 	bl	8000e2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004016:	b003      	add	sp, #12
 8004018:	f85d fb04 	ldr.w	pc, [sp], #4
 800401c:	40021000 	.word	0x40021000

08004020 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{

  if(hrng->Instance==RNG)
 8004020:	6802      	ldr	r2, [r0, #0]
 8004022:	4b09      	ldr	r3, [pc, #36]	; (8004048 <HAL_RNG_MspInit+0x28>)
 8004024:	429a      	cmp	r2, r3
{
 8004026:	b082      	sub	sp, #8
  if(hrng->Instance==RNG)
 8004028:	d10c      	bne.n	8004044 <HAL_RNG_MspInit+0x24>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800402a:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800402e:	f5a3 337e 	sub.w	r3, r3, #260096	; 0x3f800
 8004032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004034:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004038:	64da      	str	r2, [r3, #76]	; 0x4c
 800403a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004040:	9301      	str	r3, [sp, #4]
 8004042:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004044:	b002      	add	sp, #8
 8004046:	4770      	bx	lr
 8004048:	50060800 	.word	0x50060800

0800404c <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 800404c:	6802      	ldr	r2, [r0, #0]
 800404e:	4b05      	ldr	r3, [pc, #20]	; (8004064 <HAL_RTC_MspInit+0x18>)
 8004050:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004052:	bf01      	itttt	eq
 8004054:	4a04      	ldreq	r2, [pc, #16]	; (8004068 <HAL_RTC_MspInit+0x1c>)
 8004056:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 800405a:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 800405e:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
 8004062:	4770      	bx	lr
 8004064:	40002800 	.word	0x40002800
 8004068:	40021000 	.word	0x40021000

0800406c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800406c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800406e:	6803      	ldr	r3, [r0, #0]
 8004070:	4a22      	ldr	r2, [pc, #136]	; (80040fc <HAL_SPI_MspInit+0x90>)
 8004072:	4293      	cmp	r3, r2
{
 8004074:	b089      	sub	sp, #36	; 0x24
  if(hspi->Instance==SPI1)
 8004076:	d11a      	bne.n	80040ae <HAL_SPI_MspInit+0x42>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004078:	4b21      	ldr	r3, [pc, #132]	; (8004100 <HAL_SPI_MspInit+0x94>)
 800407a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800407c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004080:	661a      	str	r2, [r3, #96]	; 0x60
 8004082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	9b01      	ldr	r3, [sp, #4]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800408c:	23e0      	movs	r3, #224	; 0xe0
 800408e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004090:	2302      	movs	r3, #2
 8004092:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004094:	2300      	movs	r3, #0
 8004096:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004098:	2303      	movs	r3, #3
 800409a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800409c:	2305      	movs	r3, #5
 800409e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a0:	a903      	add	r1, sp, #12
 80040a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040a6:	f7fd f857 	bl	8001158 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80040aa:	b009      	add	sp, #36	; 0x24
 80040ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hspi->Instance==SPI2)
 80040ae:	4a15      	ldr	r2, [pc, #84]	; (8004104 <HAL_SPI_MspInit+0x98>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d1fa      	bne.n	80040aa <HAL_SPI_MspInit+0x3e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80040b4:	4b12      	ldr	r3, [pc, #72]	; (8004100 <HAL_SPI_MspInit+0x94>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040b6:	4814      	ldr	r0, [pc, #80]	; (8004108 <HAL_SPI_MspInit+0x9c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80040b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040be:	659a      	str	r2, [r3, #88]	; 0x58
 80040c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c6:	9302      	str	r3, [sp, #8]
 80040c8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040ca:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040cc:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d0:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d2:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d4:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80040d6:	2405      	movs	r4, #5
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040da:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040dc:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040de:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80040e0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040e2:	f7fd f839 	bl	8001158 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80040e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ec:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ee:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80040f2:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040f4:	a903      	add	r1, sp, #12
 80040f6:	4805      	ldr	r0, [pc, #20]	; (800410c <HAL_SPI_MspInit+0xa0>)
 80040f8:	e7d5      	b.n	80040a6 <HAL_SPI_MspInit+0x3a>
 80040fa:	bf00      	nop
 80040fc:	40013000 	.word	0x40013000
 8004100:	40021000 	.word	0x40021000
 8004104:	40003800 	.word	0x40003800
 8004108:	48000800 	.word	0x48000800
 800410c:	48000400 	.word	0x48000400

08004110 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 8004114:	6803      	ldr	r3, [r0, #0]
 8004116:	4a86      	ldr	r2, [pc, #536]	; (8004330 <HAL_UART_MspInit+0x220>)
 8004118:	4293      	cmp	r3, r2
{
 800411a:	b08a      	sub	sp, #40	; 0x28
 800411c:	4604      	mov	r4, r0
  if(huart->Instance==UART4)
 800411e:	d158      	bne.n	80041d2 <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004120:	4b84      	ldr	r3, [pc, #528]	; (8004334 <HAL_UART_MspInit+0x224>)
 8004122:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004124:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004128:	659a      	str	r2, [r3, #88]	; 0x58
 800412a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004130:	9300      	str	r3, [sp, #0]
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004132:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004134:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004136:	2508      	movs	r5, #8
    __HAL_RCC_UART4_CLK_ENABLE();
 8004138:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800413a:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800413c:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800413e:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004142:	a905      	add	r1, sp, #20
 8004144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004148:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414a:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414c:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800414e:	f8cd 8020 	str.w	r8, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004152:	f7fd f801 	bl	8001158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004156:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800415a:	4877      	ldr	r0, [pc, #476]	; (8004338 <HAL_UART_MspInit+0x228>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800415c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800415e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004160:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004162:	9706      	str	r7, [sp, #24]

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8004164:	4d75      	ldr	r5, [pc, #468]	; (800433c <HAL_UART_MspInit+0x22c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004166:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004168:	f8cd 8020 	str.w	r8, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800416c:	f7fc fff4 	bl	8001158 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8004170:	4b73      	ldr	r3, [pc, #460]	; (8004340 <HAL_UART_MspInit+0x230>)
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004172:	60ae      	str	r6, [r5, #8]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8004174:	e885 0088 	stmia.w	r5, {r3, r7}
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004178:	4628      	mov	r0, r5
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800417a:	2380      	movs	r3, #128	; 0x80
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800417c:	60ee      	str	r6, [r5, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800417e:	612b      	str	r3, [r5, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004180:	616e      	str	r6, [r5, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004182:	61ae      	str	r6, [r5, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004184:	61ee      	str	r6, [r5, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004186:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004188:	f7fc feb2 	bl	8000ef0 <HAL_DMA_Init>
 800418c:	b120      	cbz	r0, 8004198 <HAL_UART_MspInit+0x88>
    {
      _Error_Handler(__FILE__, __LINE__);
 800418e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004192:	486c      	ldr	r0, [pc, #432]	; (8004344 <HAL_UART_MspInit+0x234>)
 8004194:	f7ff fefc 	bl	8003f90 <_Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004198:	4a6b      	ldr	r2, [pc, #428]	; (8004348 <HAL_UART_MspInit+0x238>)
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800419a:	66e5      	str	r5, [r4, #108]	; 0x6c
 800419c:	62ac      	str	r4, [r5, #40]	; 0x28
    hdma_uart4_tx.Instance = DMA2_Channel3;
 800419e:	4d6b      	ldr	r5, [pc, #428]	; (800434c <HAL_UART_MspInit+0x23c>)
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041a0:	2302      	movs	r3, #2
 80041a2:	f04f 0810 	mov.w	r8, #16
 80041a6:	e885 010c 	stmia.w	r5, {r2, r3, r8}
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80041aa:	4628      	mov	r0, r5
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041ac:	2300      	movs	r3, #0
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80041ae:	2280      	movs	r2, #128	; 0x80
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041b0:	60eb      	str	r3, [r5, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80041b2:	612a      	str	r2, [r5, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041b4:	616b      	str	r3, [r5, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041b6:	61ab      	str	r3, [r5, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80041b8:	61eb      	str	r3, [r5, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80041ba:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80041bc:	f7fc fe98 	bl	8000ef0 <HAL_DMA_Init>
 80041c0:	b120      	cbz	r0, 80041cc <HAL_UART_MspInit+0xbc>
    {
      _Error_Handler(__FILE__, __LINE__);
 80041c2:	f240 115b 	movw	r1, #347	; 0x15b
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
    {
      _Error_Handler(__FILE__, __LINE__);
 80041c6:	485f      	ldr	r0, [pc, #380]	; (8004344 <HAL_UART_MspInit+0x234>)
 80041c8:	f7ff fee2 	bl	8003f90 <_Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80041cc:	66a5      	str	r5, [r4, #104]	; 0x68
 80041ce:	62ac      	str	r4, [r5, #40]	; 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80041d0:	e0ab      	b.n	800432a <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==UART5)
 80041d2:	4a5f      	ldr	r2, [pc, #380]	; (8004350 <HAL_UART_MspInit+0x240>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d152      	bne.n	800427e <HAL_UART_MspInit+0x16e>
    __HAL_RCC_UART5_CLK_ENABLE();
 80041d8:	4b56      	ldr	r3, [pc, #344]	; (8004334 <HAL_UART_MspInit+0x224>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041da:	4857      	ldr	r0, [pc, #348]	; (8004338 <HAL_UART_MspInit+0x228>)
    __HAL_RCC_UART5_CLK_ENABLE();
 80041dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80041e2:	659a      	str	r2, [r3, #88]	; 0x58
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ec:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ee:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80041f0:	2508      	movs	r5, #8
    __HAL_RCC_UART5_CLK_ENABLE();
 80041f2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80041f4:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80041f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041fa:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041fe:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004200:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004202:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004204:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004206:	f8cd 8020 	str.w	r8, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800420a:	f7fc ffa5 	bl	8001158 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800420e:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004210:	4850      	ldr	r0, [pc, #320]	; (8004354 <HAL_UART_MspInit+0x244>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004212:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004214:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004216:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004218:	9706      	str	r7, [sp, #24]
    hdma_uart5_rx.Instance = DMA2_Channel2;
 800421a:	4d4f      	ldr	r5, [pc, #316]	; (8004358 <HAL_UART_MspInit+0x248>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421c:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800421e:	f8cd 8020 	str.w	r8, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004222:	f7fc ff99 	bl	8001158 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA2_Channel2;
 8004226:	4b4d      	ldr	r3, [pc, #308]	; (800435c <HAL_UART_MspInit+0x24c>)
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004228:	60ae      	str	r6, [r5, #8]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_2;
 800422a:	e885 0088 	stmia.w	r5, {r3, r7}
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800422e:	4628      	mov	r0, r5
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004230:	2380      	movs	r3, #128	; 0x80
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004232:	60ee      	str	r6, [r5, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004234:	612b      	str	r3, [r5, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004236:	616e      	str	r6, [r5, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004238:	61ae      	str	r6, [r5, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800423a:	61ee      	str	r6, [r5, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800423c:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800423e:	f7fc fe57 	bl	8000ef0 <HAL_DMA_Init>
 8004242:	b120      	cbz	r0, 800424e <HAL_UART_MspInit+0x13e>
      _Error_Handler(__FILE__, __LINE__);
 8004244:	f240 118b 	movw	r1, #395	; 0x18b
 8004248:	483e      	ldr	r0, [pc, #248]	; (8004344 <HAL_UART_MspInit+0x234>)
 800424a:	f7ff fea1 	bl	8003f90 <_Error_Handler>
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800424e:	4844      	ldr	r0, [pc, #272]	; (8004360 <HAL_UART_MspInit+0x250>)
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004250:	66e5      	str	r5, [r4, #108]	; 0x6c
 8004252:	62ac      	str	r4, [r5, #40]	; 0x28
    hdma_uart5_tx.Instance = DMA2_Channel1;
 8004254:	4d43      	ldr	r5, [pc, #268]	; (8004364 <HAL_UART_MspInit+0x254>)
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004256:	2302      	movs	r3, #2
 8004258:	2610      	movs	r6, #16
 800425a:	e885 0049 	stmia.w	r5, {r0, r3, r6}
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800425e:	2280      	movs	r2, #128	; 0x80
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004260:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8004262:	4628      	mov	r0, r5
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004264:	60eb      	str	r3, [r5, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004266:	612a      	str	r2, [r5, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004268:	616b      	str	r3, [r5, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800426a:	61ab      	str	r3, [r5, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800426c:	61eb      	str	r3, [r5, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800426e:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8004270:	f7fc fe3e 	bl	8000ef0 <HAL_DMA_Init>
 8004274:	2800      	cmp	r0, #0
 8004276:	d0a9      	beq.n	80041cc <HAL_UART_MspInit+0xbc>
      _Error_Handler(__FILE__, __LINE__);
 8004278:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800427c:	e7a3      	b.n	80041c6 <HAL_UART_MspInit+0xb6>
  else if(huart->Instance==USART1)
 800427e:	4a3a      	ldr	r2, [pc, #232]	; (8004368 <HAL_UART_MspInit+0x258>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d17d      	bne.n	8004380 <HAL_UART_MspInit+0x270>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004284:	4b2b      	ldr	r3, [pc, #172]	; (8004334 <HAL_UART_MspInit+0x224>)
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004286:	4839      	ldr	r0, [pc, #228]	; (800436c <HAL_UART_MspInit+0x25c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004288:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800428a:	4d39      	ldr	r5, [pc, #228]	; (8004370 <HAL_UART_MspInit+0x260>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800428c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004290:	661a      	str	r2, [r3, #96]	; 0x60
 8004292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004298:	9302      	str	r3, [sp, #8]
 800429a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800429c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80042a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a2:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a4:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a6:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a8:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80042aa:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042ac:	2307      	movs	r3, #7
 80042ae:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b0:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b2:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80042b4:	f7fc ff50 	bl	8001158 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80042b8:	4b2e      	ldr	r3, [pc, #184]	; (8004374 <HAL_UART_MspInit+0x264>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042ba:	60ae      	str	r6, [r5, #8]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80042bc:	e885 0088 	stmia.w	r5, {r3, r7}
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80042c0:	4628      	mov	r0, r5
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042c2:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042c4:	60ee      	str	r6, [r5, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042c6:	612b      	str	r3, [r5, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042c8:	616e      	str	r6, [r5, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_PDATAALIGN_BYTE;
 80042ca:	61ae      	str	r6, [r5, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80042cc:	61ee      	str	r6, [r5, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80042ce:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80042d0:	f7fc fe0e 	bl	8000ef0 <HAL_DMA_Init>
 80042d4:	b120      	cbz	r0, 80042e0 <HAL_UART_MspInit+0x1d0>
      _Error_Handler(__FILE__, __LINE__);
 80042d6:	f240 11c5 	movw	r1, #453	; 0x1c5
 80042da:	481a      	ldr	r0, [pc, #104]	; (8004344 <HAL_UART_MspInit+0x234>)
 80042dc:	f7ff fe58 	bl	8003f90 <_Error_Handler>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042e0:	4b25      	ldr	r3, [pc, #148]	; (8004378 <HAL_UART_MspInit+0x268>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80042e2:	66e5      	str	r5, [r4, #108]	; 0x6c
 80042e4:	62ac      	str	r4, [r5, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80042e6:	4d25      	ldr	r5, [pc, #148]	; (800437c <HAL_UART_MspInit+0x26c>)
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042e8:	f04f 0c02 	mov.w	ip, #2
 80042ec:	f04f 0e10 	mov.w	lr, #16
 80042f0:	e885 5008 	stmia.w	r5, {r3, ip, lr}
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80042f4:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042f6:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80042f8:	4628      	mov	r0, r5
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042fa:	60eb      	str	r3, [r5, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80042fc:	612a      	str	r2, [r5, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042fe:	616b      	str	r3, [r5, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004300:	61ab      	str	r3, [r5, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004302:	61eb      	str	r3, [r5, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004304:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004306:	f7fc fdf3 	bl	8000ef0 <HAL_DMA_Init>
 800430a:	b120      	cbz	r0, 8004316 <HAL_UART_MspInit+0x206>
      _Error_Handler(__FILE__, __LINE__);
 800430c:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8004310:	480c      	ldr	r0, [pc, #48]	; (8004344 <HAL_UART_MspInit+0x234>)
 8004312:	f7ff fe3d 	bl	8003f90 <_Error_Handler>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004316:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004318:	66a5      	str	r5, [r4, #104]	; 0x68
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800431a:	2200      	movs	r2, #0
 800431c:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800431e:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004320:	f7fc fd84 	bl	8000e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004324:	2025      	movs	r0, #37	; 0x25
 8004326:	f7fc fdb5 	bl	8000e94 <HAL_NVIC_EnableIRQ>
}
 800432a:	b00a      	add	sp, #40	; 0x28
 800432c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004330:	40004c00 	.word	0x40004c00
 8004334:	40021000 	.word	0x40021000
 8004338:	48000800 	.word	0x48000800
 800433c:	20003bec 	.word	0x20003bec
 8004340:	40020458 	.word	0x40020458
 8004344:	08004fee 	.word	0x08004fee
 8004348:	40020430 	.word	0x40020430
 800434c:	200045b0 	.word	0x200045b0
 8004350:	40005000 	.word	0x40005000
 8004354:	48000c00 	.word	0x48000c00
 8004358:	20004504 	.word	0x20004504
 800435c:	4002041c 	.word	0x4002041c
 8004360:	40020408 	.word	0x40020408
 8004364:	200045f8 	.word	0x200045f8
 8004368:	40013800 	.word	0x40013800
 800436c:	48001800 	.word	0x48001800
 8004370:	20004278 	.word	0x20004278
 8004374:	40020058 	.word	0x40020058
 8004378:	40020044 	.word	0x40020044
 800437c:	200041b8 	.word	0x200041b8
  else if(huart->Instance==USART2)
 8004380:	4a48      	ldr	r2, [pc, #288]	; (80044a4 <HAL_UART_MspInit+0x394>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d145      	bne.n	8004412 <HAL_UART_MspInit+0x302>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004386:	4b48      	ldr	r3, [pc, #288]	; (80044a8 <HAL_UART_MspInit+0x398>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004388:	4848      	ldr	r0, [pc, #288]	; (80044ac <HAL_UART_MspInit+0x39c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800438a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800438c:	4d48      	ldr	r5, [pc, #288]	; (80044b0 <HAL_UART_MspInit+0x3a0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800438e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004392:	659a      	str	r2, [r3, #88]	; 0x58
 8004394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	9303      	str	r3, [sp, #12]
 800439c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800439e:	2360      	movs	r3, #96	; 0x60
 80043a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043a2:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a4:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a6:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043a8:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043aa:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80043ac:	2307      	movs	r3, #7
 80043ae:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b0:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b2:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043b4:	f7fc fed0 	bl	8001158 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80043b8:	4b3e      	ldr	r3, [pc, #248]	; (80044b4 <HAL_UART_MspInit+0x3a4>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043ba:	60ae      	str	r6, [r5, #8]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80043bc:	e885 0088 	stmia.w	r5, {r3, r7}
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80043c0:	4628      	mov	r0, r5
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043c2:	2380      	movs	r3, #128	; 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043c4:	60ee      	str	r6, [r5, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043c6:	612b      	str	r3, [r5, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043c8:	616e      	str	r6, [r5, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043ca:	61ae      	str	r6, [r5, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80043cc:	61ee      	str	r6, [r5, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80043ce:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80043d0:	f7fc fd8e 	bl	8000ef0 <HAL_DMA_Init>
 80043d4:	b120      	cbz	r0, 80043e0 <HAL_UART_MspInit+0x2d0>
      _Error_Handler(__FILE__, __LINE__);
 80043d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043da:	4837      	ldr	r0, [pc, #220]	; (80044b8 <HAL_UART_MspInit+0x3a8>)
 80043dc:	f7ff fdd8 	bl	8003f90 <_Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80043e0:	66e5      	str	r5, [r4, #108]	; 0x6c
 80043e2:	62ac      	str	r4, [r5, #40]	; 0x28
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043e4:	4935      	ldr	r1, [pc, #212]	; (80044bc <HAL_UART_MspInit+0x3ac>)
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80043e6:	4d36      	ldr	r5, [pc, #216]	; (80044c0 <HAL_UART_MspInit+0x3b0>)
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043e8:	2202      	movs	r2, #2
 80043ea:	2310      	movs	r3, #16
 80043ec:	e885 000e 	stmia.w	r5, {r1, r2, r3}
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80043f0:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043f2:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043f4:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043f6:	60eb      	str	r3, [r5, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043f8:	612a      	str	r2, [r5, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043fa:	616b      	str	r3, [r5, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043fc:	61ab      	str	r3, [r5, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80043fe:	61eb      	str	r3, [r5, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004400:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004402:	f7fc fd75 	bl	8000ef0 <HAL_DMA_Init>
 8004406:	2800      	cmp	r0, #0
 8004408:	f43f aee0 	beq.w	80041cc <HAL_UART_MspInit+0xbc>
      _Error_Handler(__FILE__, __LINE__);
 800440c:	f240 2111 	movw	r1, #529	; 0x211
 8004410:	e6d9      	b.n	80041c6 <HAL_UART_MspInit+0xb6>
  else if(huart->Instance==USART3)
 8004412:	4a2c      	ldr	r2, [pc, #176]	; (80044c4 <HAL_UART_MspInit+0x3b4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d188      	bne.n	800432a <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004418:	4b23      	ldr	r3, [pc, #140]	; (80044a8 <HAL_UART_MspInit+0x398>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800441a:	482b      	ldr	r0, [pc, #172]	; (80044c8 <HAL_UART_MspInit+0x3b8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800441c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800441e:	4d2b      	ldr	r5, [pc, #172]	; (80044cc <HAL_UART_MspInit+0x3bc>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004420:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004424:	659a      	str	r2, [r3, #88]	; 0x58
 8004426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800442c:	9304      	str	r3, [sp, #16]
 800442e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004430:	2330      	movs	r3, #48	; 0x30
 8004432:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004434:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004436:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004438:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800443a:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800443c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800443e:	2307      	movs	r3, #7
 8004440:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004442:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004444:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004446:	f7fc fe87 	bl	8001158 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800444a:	4b21      	ldr	r3, [pc, #132]	; (80044d0 <HAL_UART_MspInit+0x3c0>)
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800444c:	60ae      	str	r6, [r5, #8]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 800444e:	e885 0088 	stmia.w	r5, {r3, r7}
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004452:	4628      	mov	r0, r5
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004454:	2380      	movs	r3, #128	; 0x80
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004456:	60ee      	str	r6, [r5, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004458:	612b      	str	r3, [r5, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800445a:	616e      	str	r6, [r5, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800445c:	61ae      	str	r6, [r5, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800445e:	61ee      	str	r6, [r5, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004460:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004462:	f7fc fd45 	bl	8000ef0 <HAL_DMA_Init>
 8004466:	b120      	cbz	r0, 8004472 <HAL_UART_MspInit+0x362>
      _Error_Handler(__FILE__, __LINE__);
 8004468:	f240 213a 	movw	r1, #570	; 0x23a
 800446c:	4812      	ldr	r0, [pc, #72]	; (80044b8 <HAL_UART_MspInit+0x3a8>)
 800446e:	f7ff fd8f 	bl	8003f90 <_Error_Handler>
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004472:	4b18      	ldr	r3, [pc, #96]	; (80044d4 <HAL_UART_MspInit+0x3c4>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004474:	66e5      	str	r5, [r4, #108]	; 0x6c
 8004476:	62ac      	str	r4, [r5, #40]	; 0x28
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8004478:	4d17      	ldr	r5, [pc, #92]	; (80044d8 <HAL_UART_MspInit+0x3c8>)
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800447a:	2602      	movs	r6, #2
 800447c:	2710      	movs	r7, #16
 800447e:	e885 00c8 	stmia.w	r5, {r3, r6, r7}
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004482:	2280      	movs	r2, #128	; 0x80
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004484:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004486:	4628      	mov	r0, r5
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004488:	60eb      	str	r3, [r5, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800448a:	612a      	str	r2, [r5, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800448c:	616b      	str	r3, [r5, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800448e:	61ab      	str	r3, [r5, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004490:	61eb      	str	r3, [r5, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004492:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004494:	f7fc fd2c 	bl	8000ef0 <HAL_DMA_Init>
 8004498:	2800      	cmp	r0, #0
 800449a:	f43f ae97 	beq.w	80041cc <HAL_UART_MspInit+0xbc>
      _Error_Handler(__FILE__, __LINE__);
 800449e:	f240 214b 	movw	r1, #587	; 0x24b
 80044a2:	e690      	b.n	80041c6 <HAL_UART_MspInit+0xb6>
 80044a4:	40004400 	.word	0x40004400
 80044a8:	40021000 	.word	0x40021000
 80044ac:	48000c00 	.word	0x48000c00
 80044b0:	20003c38 	.word	0x20003c38
 80044b4:	4002006c 	.word	0x4002006c
 80044b8:	08004fee 	.word	0x08004fee
 80044bc:	40020080 	.word	0x40020080
 80044c0:	200042c0 	.word	0x200042c0
 80044c4:	40004800 	.word	0x40004800
 80044c8:	48000800 	.word	0x48000800
 80044cc:	20003ce4 	.word	0x20003ce4
 80044d0:	40020030 	.word	0x40020030
 80044d4:	4002001c 	.word	0x4002001c
 80044d8:	20004170 	.word	0x20004170

080044dc <HAL_PCD_MspInit>:
  }

}

void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80044dc:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hpcd->Instance==USB_OTG_FS)
 80044de:	6803      	ldr	r3, [r0, #0]
 80044e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80044e4:	b088      	sub	sp, #32
  if(hpcd->Instance==USB_OTG_FS)
 80044e6:	d12b      	bne.n	8004540 <HAL_PCD_MspInit+0x64>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80044e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80044ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ee:	2302      	movs	r3, #2
 80044f0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f2:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80044f4:	4c15      	ldr	r4, [pc, #84]	; (800454c <HAL_PCD_MspInit+0x70>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044f8:	2303      	movs	r3, #3
 80044fa:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044fc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80044fe:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004504:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004506:	f7fc fe27 	bl	8001158 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800450a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800450c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004510:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004512:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004518:	9301      	str	r3, [sp, #4]
 800451a:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800451c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	d410      	bmi.n	8004544 <HAL_PCD_MspInit+0x68>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004522:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004528:	65a3      	str	r3, [r4, #88]	; 0x58
 800452a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800452c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004530:	9302      	str	r3, [sp, #8]
 8004532:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 8004534:	f7fc ffd2 	bl	80014dc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004538:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800453a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800453e:	65a3      	str	r3, [r4, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004540:	b008      	add	sp, #32
 8004542:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 8004544:	f7fc ffca 	bl	80014dc <HAL_PWREx_EnableVddUSB>
}
 8004548:	e7fa      	b.n	8004540 <HAL_PCD_MspInit+0x64>
 800454a:	bf00      	nop
 800454c:	40021000 	.word	0x40021000

08004550 <NMI_Handler>:
 8004550:	4770      	bx	lr

08004552 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004552:	e7fe      	b.n	8004552 <HardFault_Handler>

08004554 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004554:	e7fe      	b.n	8004554 <MemManage_Handler>

08004556 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8004556:	e7fe      	b.n	8004556 <BusFault_Handler>

08004558 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004558:	e7fe      	b.n	8004558 <UsageFault_Handler>

0800455a <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800455a:	4770      	bx	lr

0800455c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800455c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800455e:	f7fc fc37 	bl	8000dd0 <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004562:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 8004566:	f7fe bd74 	b.w	8003052 <osSystickHandler>
	...

0800456c <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800456c:	4801      	ldr	r0, [pc, #4]	; (8004574 <DMA1_Channel2_IRQHandler+0x8>)
 800456e:	f7fc bdaa 	b.w	80010c6 <HAL_DMA_IRQHandler>
 8004572:	bf00      	nop
 8004574:	20004170 	.word	0x20004170

08004578 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004578:	4801      	ldr	r0, [pc, #4]	; (8004580 <DMA1_Channel3_IRQHandler+0x8>)
 800457a:	f7fc bda4 	b.w	80010c6 <HAL_DMA_IRQHandler>
 800457e:	bf00      	nop
 8004580:	20003ce4 	.word	0x20003ce4

08004584 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004584:	4801      	ldr	r0, [pc, #4]	; (800458c <DMA1_Channel4_IRQHandler+0x8>)
 8004586:	f7fc bd9e 	b.w	80010c6 <HAL_DMA_IRQHandler>
 800458a:	bf00      	nop
 800458c:	200041b8 	.word	0x200041b8

08004590 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004590:	4801      	ldr	r0, [pc, #4]	; (8004598 <DMA1_Channel5_IRQHandler+0x8>)
 8004592:	f7fc bd98 	b.w	80010c6 <HAL_DMA_IRQHandler>
 8004596:	bf00      	nop
 8004598:	20004278 	.word	0x20004278

0800459c <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800459c:	4801      	ldr	r0, [pc, #4]	; (80045a4 <DMA1_Channel6_IRQHandler+0x8>)
 800459e:	f7fc bd92 	b.w	80010c6 <HAL_DMA_IRQHandler>
 80045a2:	bf00      	nop
 80045a4:	20003c38 	.word	0x20003c38

080045a8 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80045a8:	4801      	ldr	r0, [pc, #4]	; (80045b0 <DMA1_Channel7_IRQHandler+0x8>)
 80045aa:	f7fc bd8c 	b.w	80010c6 <HAL_DMA_IRQHandler>
 80045ae:	bf00      	nop
 80045b0:	200042c0 	.word	0x200042c0

080045b4 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80045b4:	4801      	ldr	r0, [pc, #4]	; (80045bc <DMA2_Channel1_IRQHandler+0x8>)
 80045b6:	f7fc bd86 	b.w	80010c6 <HAL_DMA_IRQHandler>
 80045ba:	bf00      	nop
 80045bc:	200045f8 	.word	0x200045f8

080045c0 <DMA2_Channel2_IRQHandler>:
void DMA2_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80045c0:	4801      	ldr	r0, [pc, #4]	; (80045c8 <DMA2_Channel2_IRQHandler+0x8>)
 80045c2:	f7fc bd80 	b.w	80010c6 <HAL_DMA_IRQHandler>
 80045c6:	bf00      	nop
 80045c8:	20004504 	.word	0x20004504

080045cc <DMA2_Channel3_IRQHandler>:
void DMA2_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80045cc:	4801      	ldr	r0, [pc, #4]	; (80045d4 <DMA2_Channel3_IRQHandler+0x8>)
 80045ce:	f7fc bd7a 	b.w	80010c6 <HAL_DMA_IRQHandler>
 80045d2:	bf00      	nop
 80045d4:	200045b0 	.word	0x200045b0

080045d8 <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80045d8:	4801      	ldr	r0, [pc, #4]	; (80045e0 <DMA2_Channel5_IRQHandler+0x8>)
 80045da:	f7fc bd74 	b.w	80010c6 <HAL_DMA_IRQHandler>
 80045de:	bf00      	nop
 80045e0:	20003bec 	.word	0x20003bec

080045e4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80045e4:	490f      	ldr	r1, [pc, #60]	; (8004624 <SystemInit+0x40>)
 80045e6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80045ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80045f2:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <SystemInit+0x44>)
 80045f4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80045f6:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80045f8:	f042 0201 	orr.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80045fe:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8004606:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800460a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800460c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004610:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004618:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800461a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800461c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004620:	608b      	str	r3, [r1, #8]
 8004622:	4770      	bx	lr
 8004624:	e000ed00 	.word	0xe000ed00
 8004628:	40021000 	.word	0x40021000

0800462c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800462c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004664 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004630:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004632:	e003      	b.n	800463c <LoopCopyDataInit>

08004634 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004634:	4b0c      	ldr	r3, [pc, #48]	; (8004668 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004636:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004638:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800463a:	3104      	adds	r1, #4

0800463c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800463c:	480b      	ldr	r0, [pc, #44]	; (800466c <LoopForever+0xa>)
	ldr	r3, =_edata
 800463e:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004640:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004642:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004644:	d3f6      	bcc.n	8004634 <CopyDataInit>
	ldr	r2, =_sbss
 8004646:	4a0b      	ldr	r2, [pc, #44]	; (8004674 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004648:	e002      	b.n	8004650 <LoopFillZerobss>

0800464a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800464a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800464c:	f842 3b04 	str.w	r3, [r2], #4

08004650 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004650:	4b09      	ldr	r3, [pc, #36]	; (8004678 <LoopForever+0x16>)
	cmp	r2, r3
 8004652:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004654:	d3f9      	bcc.n	800464a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004656:	f7ff ffc5 	bl	80045e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800465a:	f000 f811 	bl	8004680 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800465e:	f7ff fb3d 	bl	8003cdc <main>

08004662 <LoopForever>:

LoopForever:
    b LoopForever
 8004662:	e7fe      	b.n	8004662 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004664:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004668:	08005098 	.word	0x08005098
	ldr	r0, =_sdata
 800466c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004670:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 8004674:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 8004678:	20004644 	.word	0x20004644

0800467c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800467c:	e7fe      	b.n	800467c <ADC1_2_IRQHandler>
	...

08004680 <__libc_init_array>:
 8004680:	b570      	push	{r4, r5, r6, lr}
 8004682:	4e0d      	ldr	r6, [pc, #52]	; (80046b8 <__libc_init_array+0x38>)
 8004684:	4c0d      	ldr	r4, [pc, #52]	; (80046bc <__libc_init_array+0x3c>)
 8004686:	1ba4      	subs	r4, r4, r6
 8004688:	10a4      	asrs	r4, r4, #2
 800468a:	2500      	movs	r5, #0
 800468c:	42a5      	cmp	r5, r4
 800468e:	d109      	bne.n	80046a4 <__libc_init_array+0x24>
 8004690:	4e0b      	ldr	r6, [pc, #44]	; (80046c0 <__libc_init_array+0x40>)
 8004692:	4c0c      	ldr	r4, [pc, #48]	; (80046c4 <__libc_init_array+0x44>)
 8004694:	f000 fc62 	bl	8004f5c <_init>
 8004698:	1ba4      	subs	r4, r4, r6
 800469a:	10a4      	asrs	r4, r4, #2
 800469c:	2500      	movs	r5, #0
 800469e:	42a5      	cmp	r5, r4
 80046a0:	d105      	bne.n	80046ae <__libc_init_array+0x2e>
 80046a2:	bd70      	pop	{r4, r5, r6, pc}
 80046a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046a8:	4798      	blx	r3
 80046aa:	3501      	adds	r5, #1
 80046ac:	e7ee      	b.n	800468c <__libc_init_array+0xc>
 80046ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046b2:	4798      	blx	r3
 80046b4:	3501      	adds	r5, #1
 80046b6:	e7f2      	b.n	800469e <__libc_init_array+0x1e>
 80046b8:	08005090 	.word	0x08005090
 80046bc:	08005090 	.word	0x08005090
 80046c0:	08005090 	.word	0x08005090
 80046c4:	08005094 	.word	0x08005094

080046c8 <memcpy>:
 80046c8:	b510      	push	{r4, lr}
 80046ca:	1e43      	subs	r3, r0, #1
 80046cc:	440a      	add	r2, r1
 80046ce:	4291      	cmp	r1, r2
 80046d0:	d100      	bne.n	80046d4 <memcpy+0xc>
 80046d2:	bd10      	pop	{r4, pc}
 80046d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046dc:	e7f7      	b.n	80046ce <memcpy+0x6>

080046de <memset>:
 80046de:	4402      	add	r2, r0
 80046e0:	4603      	mov	r3, r0
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d100      	bne.n	80046e8 <memset+0xa>
 80046e6:	4770      	bx	lr
 80046e8:	f803 1b01 	strb.w	r1, [r3], #1
 80046ec:	e7f9      	b.n	80046e2 <memset+0x4>

080046ee <_vsniprintf_r>:
 80046ee:	b530      	push	{r4, r5, lr}
 80046f0:	1e14      	subs	r4, r2, #0
 80046f2:	4605      	mov	r5, r0
 80046f4:	b09b      	sub	sp, #108	; 0x6c
 80046f6:	4618      	mov	r0, r3
 80046f8:	da05      	bge.n	8004706 <_vsniprintf_r+0x18>
 80046fa:	238b      	movs	r3, #139	; 0x8b
 80046fc:	602b      	str	r3, [r5, #0]
 80046fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004702:	b01b      	add	sp, #108	; 0x6c
 8004704:	bd30      	pop	{r4, r5, pc}
 8004706:	f44f 7302 	mov.w	r3, #520	; 0x208
 800470a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800470e:	bf14      	ite	ne
 8004710:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004714:	4623      	moveq	r3, r4
 8004716:	9302      	str	r3, [sp, #8]
 8004718:	9305      	str	r3, [sp, #20]
 800471a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800471e:	9100      	str	r1, [sp, #0]
 8004720:	9104      	str	r1, [sp, #16]
 8004722:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004726:	4602      	mov	r2, r0
 8004728:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800472a:	4669      	mov	r1, sp
 800472c:	4628      	mov	r0, r5
 800472e:	f000 f875 	bl	800481c <_svfiprintf_r>
 8004732:	1c43      	adds	r3, r0, #1
 8004734:	bfbc      	itt	lt
 8004736:	238b      	movlt	r3, #139	; 0x8b
 8004738:	602b      	strlt	r3, [r5, #0]
 800473a:	2c00      	cmp	r4, #0
 800473c:	d0e1      	beq.n	8004702 <_vsniprintf_r+0x14>
 800473e:	9b00      	ldr	r3, [sp, #0]
 8004740:	2200      	movs	r2, #0
 8004742:	701a      	strb	r2, [r3, #0]
 8004744:	e7dd      	b.n	8004702 <_vsniprintf_r+0x14>
	...

08004748 <vsniprintf>:
 8004748:	b507      	push	{r0, r1, r2, lr}
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	4613      	mov	r3, r2
 800474e:	460a      	mov	r2, r1
 8004750:	4601      	mov	r1, r0
 8004752:	4803      	ldr	r0, [pc, #12]	; (8004760 <vsniprintf+0x18>)
 8004754:	6800      	ldr	r0, [r0, #0]
 8004756:	f7ff ffca 	bl	80046ee <_vsniprintf_r>
 800475a:	b003      	add	sp, #12
 800475c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004760:	20000008 	.word	0x20000008

08004764 <__ssputs_r>:
 8004764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004768:	688e      	ldr	r6, [r1, #8]
 800476a:	429e      	cmp	r6, r3
 800476c:	4682      	mov	sl, r0
 800476e:	460c      	mov	r4, r1
 8004770:	4691      	mov	r9, r2
 8004772:	4698      	mov	r8, r3
 8004774:	d835      	bhi.n	80047e2 <__ssputs_r+0x7e>
 8004776:	898a      	ldrh	r2, [r1, #12]
 8004778:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800477c:	d031      	beq.n	80047e2 <__ssputs_r+0x7e>
 800477e:	6825      	ldr	r5, [r4, #0]
 8004780:	6909      	ldr	r1, [r1, #16]
 8004782:	1a6f      	subs	r7, r5, r1
 8004784:	6965      	ldr	r5, [r4, #20]
 8004786:	2302      	movs	r3, #2
 8004788:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800478c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004790:	f108 0301 	add.w	r3, r8, #1
 8004794:	443b      	add	r3, r7
 8004796:	429d      	cmp	r5, r3
 8004798:	bf38      	it	cc
 800479a:	461d      	movcc	r5, r3
 800479c:	0553      	lsls	r3, r2, #21
 800479e:	d531      	bpl.n	8004804 <__ssputs_r+0xa0>
 80047a0:	4629      	mov	r1, r5
 80047a2:	f000 fb2d 	bl	8004e00 <_malloc_r>
 80047a6:	4606      	mov	r6, r0
 80047a8:	b950      	cbnz	r0, 80047c0 <__ssputs_r+0x5c>
 80047aa:	230c      	movs	r3, #12
 80047ac:	f8ca 3000 	str.w	r3, [sl]
 80047b0:	89a3      	ldrh	r3, [r4, #12]
 80047b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047b6:	81a3      	strh	r3, [r4, #12]
 80047b8:	f04f 30ff 	mov.w	r0, #4294967295
 80047bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047c0:	463a      	mov	r2, r7
 80047c2:	6921      	ldr	r1, [r4, #16]
 80047c4:	f7ff ff80 	bl	80046c8 <memcpy>
 80047c8:	89a3      	ldrh	r3, [r4, #12]
 80047ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d2:	81a3      	strh	r3, [r4, #12]
 80047d4:	6126      	str	r6, [r4, #16]
 80047d6:	6165      	str	r5, [r4, #20]
 80047d8:	443e      	add	r6, r7
 80047da:	1bed      	subs	r5, r5, r7
 80047dc:	6026      	str	r6, [r4, #0]
 80047de:	60a5      	str	r5, [r4, #8]
 80047e0:	4646      	mov	r6, r8
 80047e2:	4546      	cmp	r6, r8
 80047e4:	bf28      	it	cs
 80047e6:	4646      	movcs	r6, r8
 80047e8:	4632      	mov	r2, r6
 80047ea:	4649      	mov	r1, r9
 80047ec:	6820      	ldr	r0, [r4, #0]
 80047ee:	f000 fa9f 	bl	8004d30 <memmove>
 80047f2:	68a3      	ldr	r3, [r4, #8]
 80047f4:	1b9b      	subs	r3, r3, r6
 80047f6:	60a3      	str	r3, [r4, #8]
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	441e      	add	r6, r3
 80047fc:	6026      	str	r6, [r4, #0]
 80047fe:	2000      	movs	r0, #0
 8004800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004804:	462a      	mov	r2, r5
 8004806:	f000 fb59 	bl	8004ebc <_realloc_r>
 800480a:	4606      	mov	r6, r0
 800480c:	2800      	cmp	r0, #0
 800480e:	d1e1      	bne.n	80047d4 <__ssputs_r+0x70>
 8004810:	6921      	ldr	r1, [r4, #16]
 8004812:	4650      	mov	r0, sl
 8004814:	f000 faa6 	bl	8004d64 <_free_r>
 8004818:	e7c7      	b.n	80047aa <__ssputs_r+0x46>
	...

0800481c <_svfiprintf_r>:
 800481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004820:	b09d      	sub	sp, #116	; 0x74
 8004822:	4680      	mov	r8, r0
 8004824:	9303      	str	r3, [sp, #12]
 8004826:	898b      	ldrh	r3, [r1, #12]
 8004828:	061c      	lsls	r4, r3, #24
 800482a:	460d      	mov	r5, r1
 800482c:	4616      	mov	r6, r2
 800482e:	d50f      	bpl.n	8004850 <_svfiprintf_r+0x34>
 8004830:	690b      	ldr	r3, [r1, #16]
 8004832:	b96b      	cbnz	r3, 8004850 <_svfiprintf_r+0x34>
 8004834:	2140      	movs	r1, #64	; 0x40
 8004836:	f000 fae3 	bl	8004e00 <_malloc_r>
 800483a:	6028      	str	r0, [r5, #0]
 800483c:	6128      	str	r0, [r5, #16]
 800483e:	b928      	cbnz	r0, 800484c <_svfiprintf_r+0x30>
 8004840:	230c      	movs	r3, #12
 8004842:	f8c8 3000 	str.w	r3, [r8]
 8004846:	f04f 30ff 	mov.w	r0, #4294967295
 800484a:	e0c5      	b.n	80049d8 <_svfiprintf_r+0x1bc>
 800484c:	2340      	movs	r3, #64	; 0x40
 800484e:	616b      	str	r3, [r5, #20]
 8004850:	2300      	movs	r3, #0
 8004852:	9309      	str	r3, [sp, #36]	; 0x24
 8004854:	2320      	movs	r3, #32
 8004856:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800485a:	2330      	movs	r3, #48	; 0x30
 800485c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004860:	f04f 0b01 	mov.w	fp, #1
 8004864:	4637      	mov	r7, r6
 8004866:	463c      	mov	r4, r7
 8004868:	f814 3b01 	ldrb.w	r3, [r4], #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d13c      	bne.n	80048ea <_svfiprintf_r+0xce>
 8004870:	ebb7 0a06 	subs.w	sl, r7, r6
 8004874:	d00b      	beq.n	800488e <_svfiprintf_r+0x72>
 8004876:	4653      	mov	r3, sl
 8004878:	4632      	mov	r2, r6
 800487a:	4629      	mov	r1, r5
 800487c:	4640      	mov	r0, r8
 800487e:	f7ff ff71 	bl	8004764 <__ssputs_r>
 8004882:	3001      	adds	r0, #1
 8004884:	f000 80a3 	beq.w	80049ce <_svfiprintf_r+0x1b2>
 8004888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800488a:	4453      	add	r3, sl
 800488c:	9309      	str	r3, [sp, #36]	; 0x24
 800488e:	783b      	ldrb	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 809c 	beq.w	80049ce <_svfiprintf_r+0x1b2>
 8004896:	2300      	movs	r3, #0
 8004898:	f04f 32ff 	mov.w	r2, #4294967295
 800489c:	9304      	str	r3, [sp, #16]
 800489e:	9307      	str	r3, [sp, #28]
 80048a0:	9205      	str	r2, [sp, #20]
 80048a2:	9306      	str	r3, [sp, #24]
 80048a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048a8:	931a      	str	r3, [sp, #104]	; 0x68
 80048aa:	2205      	movs	r2, #5
 80048ac:	7821      	ldrb	r1, [r4, #0]
 80048ae:	4850      	ldr	r0, [pc, #320]	; (80049f0 <_svfiprintf_r+0x1d4>)
 80048b0:	f7fb fc96 	bl	80001e0 <memchr>
 80048b4:	1c67      	adds	r7, r4, #1
 80048b6:	9b04      	ldr	r3, [sp, #16]
 80048b8:	b9d8      	cbnz	r0, 80048f2 <_svfiprintf_r+0xd6>
 80048ba:	06d9      	lsls	r1, r3, #27
 80048bc:	bf44      	itt	mi
 80048be:	2220      	movmi	r2, #32
 80048c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048c4:	071a      	lsls	r2, r3, #28
 80048c6:	bf44      	itt	mi
 80048c8:	222b      	movmi	r2, #43	; 0x2b
 80048ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048ce:	7822      	ldrb	r2, [r4, #0]
 80048d0:	2a2a      	cmp	r2, #42	; 0x2a
 80048d2:	d016      	beq.n	8004902 <_svfiprintf_r+0xe6>
 80048d4:	9a07      	ldr	r2, [sp, #28]
 80048d6:	2100      	movs	r1, #0
 80048d8:	200a      	movs	r0, #10
 80048da:	4627      	mov	r7, r4
 80048dc:	3401      	adds	r4, #1
 80048de:	783b      	ldrb	r3, [r7, #0]
 80048e0:	3b30      	subs	r3, #48	; 0x30
 80048e2:	2b09      	cmp	r3, #9
 80048e4:	d951      	bls.n	800498a <_svfiprintf_r+0x16e>
 80048e6:	b1c9      	cbz	r1, 800491c <_svfiprintf_r+0x100>
 80048e8:	e011      	b.n	800490e <_svfiprintf_r+0xf2>
 80048ea:	2b25      	cmp	r3, #37	; 0x25
 80048ec:	d0c0      	beq.n	8004870 <_svfiprintf_r+0x54>
 80048ee:	4627      	mov	r7, r4
 80048f0:	e7b9      	b.n	8004866 <_svfiprintf_r+0x4a>
 80048f2:	4a3f      	ldr	r2, [pc, #252]	; (80049f0 <_svfiprintf_r+0x1d4>)
 80048f4:	1a80      	subs	r0, r0, r2
 80048f6:	fa0b f000 	lsl.w	r0, fp, r0
 80048fa:	4318      	orrs	r0, r3
 80048fc:	9004      	str	r0, [sp, #16]
 80048fe:	463c      	mov	r4, r7
 8004900:	e7d3      	b.n	80048aa <_svfiprintf_r+0x8e>
 8004902:	9a03      	ldr	r2, [sp, #12]
 8004904:	1d11      	adds	r1, r2, #4
 8004906:	6812      	ldr	r2, [r2, #0]
 8004908:	9103      	str	r1, [sp, #12]
 800490a:	2a00      	cmp	r2, #0
 800490c:	db01      	blt.n	8004912 <_svfiprintf_r+0xf6>
 800490e:	9207      	str	r2, [sp, #28]
 8004910:	e004      	b.n	800491c <_svfiprintf_r+0x100>
 8004912:	4252      	negs	r2, r2
 8004914:	f043 0302 	orr.w	r3, r3, #2
 8004918:	9207      	str	r2, [sp, #28]
 800491a:	9304      	str	r3, [sp, #16]
 800491c:	783b      	ldrb	r3, [r7, #0]
 800491e:	2b2e      	cmp	r3, #46	; 0x2e
 8004920:	d10e      	bne.n	8004940 <_svfiprintf_r+0x124>
 8004922:	787b      	ldrb	r3, [r7, #1]
 8004924:	2b2a      	cmp	r3, #42	; 0x2a
 8004926:	f107 0101 	add.w	r1, r7, #1
 800492a:	d132      	bne.n	8004992 <_svfiprintf_r+0x176>
 800492c:	9b03      	ldr	r3, [sp, #12]
 800492e:	1d1a      	adds	r2, r3, #4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	9203      	str	r2, [sp, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	bfb8      	it	lt
 8004938:	f04f 33ff 	movlt.w	r3, #4294967295
 800493c:	3702      	adds	r7, #2
 800493e:	9305      	str	r3, [sp, #20]
 8004940:	4c2c      	ldr	r4, [pc, #176]	; (80049f4 <_svfiprintf_r+0x1d8>)
 8004942:	7839      	ldrb	r1, [r7, #0]
 8004944:	2203      	movs	r2, #3
 8004946:	4620      	mov	r0, r4
 8004948:	f7fb fc4a 	bl	80001e0 <memchr>
 800494c:	b138      	cbz	r0, 800495e <_svfiprintf_r+0x142>
 800494e:	2340      	movs	r3, #64	; 0x40
 8004950:	1b00      	subs	r0, r0, r4
 8004952:	fa03 f000 	lsl.w	r0, r3, r0
 8004956:	9b04      	ldr	r3, [sp, #16]
 8004958:	4303      	orrs	r3, r0
 800495a:	9304      	str	r3, [sp, #16]
 800495c:	3701      	adds	r7, #1
 800495e:	7839      	ldrb	r1, [r7, #0]
 8004960:	4825      	ldr	r0, [pc, #148]	; (80049f8 <_svfiprintf_r+0x1dc>)
 8004962:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004966:	2206      	movs	r2, #6
 8004968:	1c7e      	adds	r6, r7, #1
 800496a:	f7fb fc39 	bl	80001e0 <memchr>
 800496e:	2800      	cmp	r0, #0
 8004970:	d035      	beq.n	80049de <_svfiprintf_r+0x1c2>
 8004972:	4b22      	ldr	r3, [pc, #136]	; (80049fc <_svfiprintf_r+0x1e0>)
 8004974:	b9fb      	cbnz	r3, 80049b6 <_svfiprintf_r+0x19a>
 8004976:	9b03      	ldr	r3, [sp, #12]
 8004978:	3307      	adds	r3, #7
 800497a:	f023 0307 	bic.w	r3, r3, #7
 800497e:	3308      	adds	r3, #8
 8004980:	9303      	str	r3, [sp, #12]
 8004982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004984:	444b      	add	r3, r9
 8004986:	9309      	str	r3, [sp, #36]	; 0x24
 8004988:	e76c      	b.n	8004864 <_svfiprintf_r+0x48>
 800498a:	fb00 3202 	mla	r2, r0, r2, r3
 800498e:	2101      	movs	r1, #1
 8004990:	e7a3      	b.n	80048da <_svfiprintf_r+0xbe>
 8004992:	2300      	movs	r3, #0
 8004994:	9305      	str	r3, [sp, #20]
 8004996:	4618      	mov	r0, r3
 8004998:	240a      	movs	r4, #10
 800499a:	460f      	mov	r7, r1
 800499c:	3101      	adds	r1, #1
 800499e:	783a      	ldrb	r2, [r7, #0]
 80049a0:	3a30      	subs	r2, #48	; 0x30
 80049a2:	2a09      	cmp	r2, #9
 80049a4:	d903      	bls.n	80049ae <_svfiprintf_r+0x192>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0ca      	beq.n	8004940 <_svfiprintf_r+0x124>
 80049aa:	9005      	str	r0, [sp, #20]
 80049ac:	e7c8      	b.n	8004940 <_svfiprintf_r+0x124>
 80049ae:	fb04 2000 	mla	r0, r4, r0, r2
 80049b2:	2301      	movs	r3, #1
 80049b4:	e7f1      	b.n	800499a <_svfiprintf_r+0x17e>
 80049b6:	ab03      	add	r3, sp, #12
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	462a      	mov	r2, r5
 80049bc:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <_svfiprintf_r+0x1e4>)
 80049be:	a904      	add	r1, sp, #16
 80049c0:	4640      	mov	r0, r8
 80049c2:	f3af 8000 	nop.w
 80049c6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80049ca:	4681      	mov	r9, r0
 80049cc:	d1d9      	bne.n	8004982 <_svfiprintf_r+0x166>
 80049ce:	89ab      	ldrh	r3, [r5, #12]
 80049d0:	065b      	lsls	r3, r3, #25
 80049d2:	f53f af38 	bmi.w	8004846 <_svfiprintf_r+0x2a>
 80049d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049d8:	b01d      	add	sp, #116	; 0x74
 80049da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049de:	ab03      	add	r3, sp, #12
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	462a      	mov	r2, r5
 80049e4:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <_svfiprintf_r+0x1e4>)
 80049e6:	a904      	add	r1, sp, #16
 80049e8:	4640      	mov	r0, r8
 80049ea:	f000 f881 	bl	8004af0 <_printf_i>
 80049ee:	e7ea      	b.n	80049c6 <_svfiprintf_r+0x1aa>
 80049f0:	08005054 	.word	0x08005054
 80049f4:	0800505a 	.word	0x0800505a
 80049f8:	0800505e 	.word	0x0800505e
 80049fc:	00000000 	.word	0x00000000
 8004a00:	08004765 	.word	0x08004765

08004a04 <_printf_common>:
 8004a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a08:	4691      	mov	r9, r2
 8004a0a:	461f      	mov	r7, r3
 8004a0c:	688a      	ldr	r2, [r1, #8]
 8004a0e:	690b      	ldr	r3, [r1, #16]
 8004a10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a14:	4293      	cmp	r3, r2
 8004a16:	bfb8      	it	lt
 8004a18:	4613      	movlt	r3, r2
 8004a1a:	f8c9 3000 	str.w	r3, [r9]
 8004a1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a22:	4606      	mov	r6, r0
 8004a24:	460c      	mov	r4, r1
 8004a26:	b112      	cbz	r2, 8004a2e <_printf_common+0x2a>
 8004a28:	3301      	adds	r3, #1
 8004a2a:	f8c9 3000 	str.w	r3, [r9]
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	0699      	lsls	r1, r3, #26
 8004a32:	bf42      	ittt	mi
 8004a34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a38:	3302      	addmi	r3, #2
 8004a3a:	f8c9 3000 	strmi.w	r3, [r9]
 8004a3e:	6825      	ldr	r5, [r4, #0]
 8004a40:	f015 0506 	ands.w	r5, r5, #6
 8004a44:	d107      	bne.n	8004a56 <_printf_common+0x52>
 8004a46:	f104 0a19 	add.w	sl, r4, #25
 8004a4a:	68e3      	ldr	r3, [r4, #12]
 8004a4c:	f8d9 2000 	ldr.w	r2, [r9]
 8004a50:	1a9b      	subs	r3, r3, r2
 8004a52:	429d      	cmp	r5, r3
 8004a54:	db29      	blt.n	8004aaa <_printf_common+0xa6>
 8004a56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a5a:	6822      	ldr	r2, [r4, #0]
 8004a5c:	3300      	adds	r3, #0
 8004a5e:	bf18      	it	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	0692      	lsls	r2, r2, #26
 8004a64:	d42e      	bmi.n	8004ac4 <_printf_common+0xc0>
 8004a66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a6a:	4639      	mov	r1, r7
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	47c0      	blx	r8
 8004a70:	3001      	adds	r0, #1
 8004a72:	d021      	beq.n	8004ab8 <_printf_common+0xb4>
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	68e5      	ldr	r5, [r4, #12]
 8004a78:	f8d9 2000 	ldr.w	r2, [r9]
 8004a7c:	f003 0306 	and.w	r3, r3, #6
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	bf08      	it	eq
 8004a84:	1aad      	subeq	r5, r5, r2
 8004a86:	68a3      	ldr	r3, [r4, #8]
 8004a88:	6922      	ldr	r2, [r4, #16]
 8004a8a:	bf0c      	ite	eq
 8004a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a90:	2500      	movne	r5, #0
 8004a92:	4293      	cmp	r3, r2
 8004a94:	bfc4      	itt	gt
 8004a96:	1a9b      	subgt	r3, r3, r2
 8004a98:	18ed      	addgt	r5, r5, r3
 8004a9a:	f04f 0900 	mov.w	r9, #0
 8004a9e:	341a      	adds	r4, #26
 8004aa0:	454d      	cmp	r5, r9
 8004aa2:	d11b      	bne.n	8004adc <_printf_common+0xd8>
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aaa:	2301      	movs	r3, #1
 8004aac:	4652      	mov	r2, sl
 8004aae:	4639      	mov	r1, r7
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	47c0      	blx	r8
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	d103      	bne.n	8004ac0 <_printf_common+0xbc>
 8004ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8004abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac0:	3501      	adds	r5, #1
 8004ac2:	e7c2      	b.n	8004a4a <_printf_common+0x46>
 8004ac4:	18e1      	adds	r1, r4, r3
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	2030      	movs	r0, #48	; 0x30
 8004aca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ace:	4422      	add	r2, r4
 8004ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ad4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ad8:	3302      	adds	r3, #2
 8004ada:	e7c4      	b.n	8004a66 <_printf_common+0x62>
 8004adc:	2301      	movs	r3, #1
 8004ade:	4622      	mov	r2, r4
 8004ae0:	4639      	mov	r1, r7
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	47c0      	blx	r8
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	d0e6      	beq.n	8004ab8 <_printf_common+0xb4>
 8004aea:	f109 0901 	add.w	r9, r9, #1
 8004aee:	e7d7      	b.n	8004aa0 <_printf_common+0x9c>

08004af0 <_printf_i>:
 8004af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004af4:	4617      	mov	r7, r2
 8004af6:	7e0a      	ldrb	r2, [r1, #24]
 8004af8:	b085      	sub	sp, #20
 8004afa:	2a6e      	cmp	r2, #110	; 0x6e
 8004afc:	4698      	mov	r8, r3
 8004afe:	4606      	mov	r6, r0
 8004b00:	460c      	mov	r4, r1
 8004b02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b04:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004b08:	f000 80bc 	beq.w	8004c84 <_printf_i+0x194>
 8004b0c:	d81a      	bhi.n	8004b44 <_printf_i+0x54>
 8004b0e:	2a63      	cmp	r2, #99	; 0x63
 8004b10:	d02e      	beq.n	8004b70 <_printf_i+0x80>
 8004b12:	d80a      	bhi.n	8004b2a <_printf_i+0x3a>
 8004b14:	2a00      	cmp	r2, #0
 8004b16:	f000 80c8 	beq.w	8004caa <_printf_i+0x1ba>
 8004b1a:	2a58      	cmp	r2, #88	; 0x58
 8004b1c:	f000 808a 	beq.w	8004c34 <_printf_i+0x144>
 8004b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b24:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004b28:	e02a      	b.n	8004b80 <_printf_i+0x90>
 8004b2a:	2a64      	cmp	r2, #100	; 0x64
 8004b2c:	d001      	beq.n	8004b32 <_printf_i+0x42>
 8004b2e:	2a69      	cmp	r2, #105	; 0x69
 8004b30:	d1f6      	bne.n	8004b20 <_printf_i+0x30>
 8004b32:	6821      	ldr	r1, [r4, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004b3a:	d023      	beq.n	8004b84 <_printf_i+0x94>
 8004b3c:	1d11      	adds	r1, r2, #4
 8004b3e:	6019      	str	r1, [r3, #0]
 8004b40:	6813      	ldr	r3, [r2, #0]
 8004b42:	e027      	b.n	8004b94 <_printf_i+0xa4>
 8004b44:	2a73      	cmp	r2, #115	; 0x73
 8004b46:	f000 80b4 	beq.w	8004cb2 <_printf_i+0x1c2>
 8004b4a:	d808      	bhi.n	8004b5e <_printf_i+0x6e>
 8004b4c:	2a6f      	cmp	r2, #111	; 0x6f
 8004b4e:	d02a      	beq.n	8004ba6 <_printf_i+0xb6>
 8004b50:	2a70      	cmp	r2, #112	; 0x70
 8004b52:	d1e5      	bne.n	8004b20 <_printf_i+0x30>
 8004b54:	680a      	ldr	r2, [r1, #0]
 8004b56:	f042 0220 	orr.w	r2, r2, #32
 8004b5a:	600a      	str	r2, [r1, #0]
 8004b5c:	e003      	b.n	8004b66 <_printf_i+0x76>
 8004b5e:	2a75      	cmp	r2, #117	; 0x75
 8004b60:	d021      	beq.n	8004ba6 <_printf_i+0xb6>
 8004b62:	2a78      	cmp	r2, #120	; 0x78
 8004b64:	d1dc      	bne.n	8004b20 <_printf_i+0x30>
 8004b66:	2278      	movs	r2, #120	; 0x78
 8004b68:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004b6c:	496e      	ldr	r1, [pc, #440]	; (8004d28 <_printf_i+0x238>)
 8004b6e:	e064      	b.n	8004c3a <_printf_i+0x14a>
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004b76:	1d11      	adds	r1, r2, #4
 8004b78:	6019      	str	r1, [r3, #0]
 8004b7a:	6813      	ldr	r3, [r2, #0]
 8004b7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b80:	2301      	movs	r3, #1
 8004b82:	e0a3      	b.n	8004ccc <_printf_i+0x1dc>
 8004b84:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004b88:	f102 0104 	add.w	r1, r2, #4
 8004b8c:	6019      	str	r1, [r3, #0]
 8004b8e:	d0d7      	beq.n	8004b40 <_printf_i+0x50>
 8004b90:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	da03      	bge.n	8004ba0 <_printf_i+0xb0>
 8004b98:	222d      	movs	r2, #45	; 0x2d
 8004b9a:	425b      	negs	r3, r3
 8004b9c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ba0:	4962      	ldr	r1, [pc, #392]	; (8004d2c <_printf_i+0x23c>)
 8004ba2:	220a      	movs	r2, #10
 8004ba4:	e017      	b.n	8004bd6 <_printf_i+0xe6>
 8004ba6:	6820      	ldr	r0, [r4, #0]
 8004ba8:	6819      	ldr	r1, [r3, #0]
 8004baa:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004bae:	d003      	beq.n	8004bb8 <_printf_i+0xc8>
 8004bb0:	1d08      	adds	r0, r1, #4
 8004bb2:	6018      	str	r0, [r3, #0]
 8004bb4:	680b      	ldr	r3, [r1, #0]
 8004bb6:	e006      	b.n	8004bc6 <_printf_i+0xd6>
 8004bb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bbc:	f101 0004 	add.w	r0, r1, #4
 8004bc0:	6018      	str	r0, [r3, #0]
 8004bc2:	d0f7      	beq.n	8004bb4 <_printf_i+0xc4>
 8004bc4:	880b      	ldrh	r3, [r1, #0]
 8004bc6:	4959      	ldr	r1, [pc, #356]	; (8004d2c <_printf_i+0x23c>)
 8004bc8:	2a6f      	cmp	r2, #111	; 0x6f
 8004bca:	bf14      	ite	ne
 8004bcc:	220a      	movne	r2, #10
 8004bce:	2208      	moveq	r2, #8
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004bd6:	6865      	ldr	r5, [r4, #4]
 8004bd8:	60a5      	str	r5, [r4, #8]
 8004bda:	2d00      	cmp	r5, #0
 8004bdc:	f2c0 809c 	blt.w	8004d18 <_printf_i+0x228>
 8004be0:	6820      	ldr	r0, [r4, #0]
 8004be2:	f020 0004 	bic.w	r0, r0, #4
 8004be6:	6020      	str	r0, [r4, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d13f      	bne.n	8004c6c <_printf_i+0x17c>
 8004bec:	2d00      	cmp	r5, #0
 8004bee:	f040 8095 	bne.w	8004d1c <_printf_i+0x22c>
 8004bf2:	4675      	mov	r5, lr
 8004bf4:	2a08      	cmp	r2, #8
 8004bf6:	d10b      	bne.n	8004c10 <_printf_i+0x120>
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	07da      	lsls	r2, r3, #31
 8004bfc:	d508      	bpl.n	8004c10 <_printf_i+0x120>
 8004bfe:	6923      	ldr	r3, [r4, #16]
 8004c00:	6862      	ldr	r2, [r4, #4]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	bfde      	ittt	le
 8004c06:	2330      	movle	r3, #48	; 0x30
 8004c08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c10:	ebae 0305 	sub.w	r3, lr, r5
 8004c14:	6123      	str	r3, [r4, #16]
 8004c16:	f8cd 8000 	str.w	r8, [sp]
 8004c1a:	463b      	mov	r3, r7
 8004c1c:	aa03      	add	r2, sp, #12
 8004c1e:	4621      	mov	r1, r4
 8004c20:	4630      	mov	r0, r6
 8004c22:	f7ff feef 	bl	8004a04 <_printf_common>
 8004c26:	3001      	adds	r0, #1
 8004c28:	d155      	bne.n	8004cd6 <_printf_i+0x1e6>
 8004c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2e:	b005      	add	sp, #20
 8004c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c34:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004c38:	493c      	ldr	r1, [pc, #240]	; (8004d2c <_printf_i+0x23c>)
 8004c3a:	6822      	ldr	r2, [r4, #0]
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004c42:	f100 0504 	add.w	r5, r0, #4
 8004c46:	601d      	str	r5, [r3, #0]
 8004c48:	d001      	beq.n	8004c4e <_printf_i+0x15e>
 8004c4a:	6803      	ldr	r3, [r0, #0]
 8004c4c:	e002      	b.n	8004c54 <_printf_i+0x164>
 8004c4e:	0655      	lsls	r5, r2, #25
 8004c50:	d5fb      	bpl.n	8004c4a <_printf_i+0x15a>
 8004c52:	8803      	ldrh	r3, [r0, #0]
 8004c54:	07d0      	lsls	r0, r2, #31
 8004c56:	bf44      	itt	mi
 8004c58:	f042 0220 	orrmi.w	r2, r2, #32
 8004c5c:	6022      	strmi	r2, [r4, #0]
 8004c5e:	b91b      	cbnz	r3, 8004c68 <_printf_i+0x178>
 8004c60:	6822      	ldr	r2, [r4, #0]
 8004c62:	f022 0220 	bic.w	r2, r2, #32
 8004c66:	6022      	str	r2, [r4, #0]
 8004c68:	2210      	movs	r2, #16
 8004c6a:	e7b1      	b.n	8004bd0 <_printf_i+0xe0>
 8004c6c:	4675      	mov	r5, lr
 8004c6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c72:	fb02 3310 	mls	r3, r2, r0, r3
 8004c76:	5ccb      	ldrb	r3, [r1, r3]
 8004c78:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d1f5      	bne.n	8004c6e <_printf_i+0x17e>
 8004c82:	e7b7      	b.n	8004bf4 <_printf_i+0x104>
 8004c84:	6808      	ldr	r0, [r1, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	6949      	ldr	r1, [r1, #20]
 8004c8a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004c8e:	d004      	beq.n	8004c9a <_printf_i+0x1aa>
 8004c90:	1d10      	adds	r0, r2, #4
 8004c92:	6018      	str	r0, [r3, #0]
 8004c94:	6813      	ldr	r3, [r2, #0]
 8004c96:	6019      	str	r1, [r3, #0]
 8004c98:	e007      	b.n	8004caa <_printf_i+0x1ba>
 8004c9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c9e:	f102 0004 	add.w	r0, r2, #4
 8004ca2:	6018      	str	r0, [r3, #0]
 8004ca4:	6813      	ldr	r3, [r2, #0]
 8004ca6:	d0f6      	beq.n	8004c96 <_printf_i+0x1a6>
 8004ca8:	8019      	strh	r1, [r3, #0]
 8004caa:	2300      	movs	r3, #0
 8004cac:	6123      	str	r3, [r4, #16]
 8004cae:	4675      	mov	r5, lr
 8004cb0:	e7b1      	b.n	8004c16 <_printf_i+0x126>
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	1d11      	adds	r1, r2, #4
 8004cb6:	6019      	str	r1, [r3, #0]
 8004cb8:	6815      	ldr	r5, [r2, #0]
 8004cba:	6862      	ldr	r2, [r4, #4]
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f7fb fa8e 	bl	80001e0 <memchr>
 8004cc4:	b108      	cbz	r0, 8004cca <_printf_i+0x1da>
 8004cc6:	1b40      	subs	r0, r0, r5
 8004cc8:	6060      	str	r0, [r4, #4]
 8004cca:	6863      	ldr	r3, [r4, #4]
 8004ccc:	6123      	str	r3, [r4, #16]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cd4:	e79f      	b.n	8004c16 <_printf_i+0x126>
 8004cd6:	6923      	ldr	r3, [r4, #16]
 8004cd8:	462a      	mov	r2, r5
 8004cda:	4639      	mov	r1, r7
 8004cdc:	4630      	mov	r0, r6
 8004cde:	47c0      	blx	r8
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	d0a2      	beq.n	8004c2a <_printf_i+0x13a>
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	079b      	lsls	r3, r3, #30
 8004ce8:	d507      	bpl.n	8004cfa <_printf_i+0x20a>
 8004cea:	2500      	movs	r5, #0
 8004cec:	f104 0919 	add.w	r9, r4, #25
 8004cf0:	68e3      	ldr	r3, [r4, #12]
 8004cf2:	9a03      	ldr	r2, [sp, #12]
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	429d      	cmp	r5, r3
 8004cf8:	db05      	blt.n	8004d06 <_printf_i+0x216>
 8004cfa:	68e0      	ldr	r0, [r4, #12]
 8004cfc:	9b03      	ldr	r3, [sp, #12]
 8004cfe:	4298      	cmp	r0, r3
 8004d00:	bfb8      	it	lt
 8004d02:	4618      	movlt	r0, r3
 8004d04:	e793      	b.n	8004c2e <_printf_i+0x13e>
 8004d06:	2301      	movs	r3, #1
 8004d08:	464a      	mov	r2, r9
 8004d0a:	4639      	mov	r1, r7
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	47c0      	blx	r8
 8004d10:	3001      	adds	r0, #1
 8004d12:	d08a      	beq.n	8004c2a <_printf_i+0x13a>
 8004d14:	3501      	adds	r5, #1
 8004d16:	e7eb      	b.n	8004cf0 <_printf_i+0x200>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1a7      	bne.n	8004c6c <_printf_i+0x17c>
 8004d1c:	780b      	ldrb	r3, [r1, #0]
 8004d1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d26:	e765      	b.n	8004bf4 <_printf_i+0x104>
 8004d28:	08005076 	.word	0x08005076
 8004d2c:	08005065 	.word	0x08005065

08004d30 <memmove>:
 8004d30:	4288      	cmp	r0, r1
 8004d32:	b510      	push	{r4, lr}
 8004d34:	eb01 0302 	add.w	r3, r1, r2
 8004d38:	d803      	bhi.n	8004d42 <memmove+0x12>
 8004d3a:	1e42      	subs	r2, r0, #1
 8004d3c:	4299      	cmp	r1, r3
 8004d3e:	d10c      	bne.n	8004d5a <memmove+0x2a>
 8004d40:	bd10      	pop	{r4, pc}
 8004d42:	4298      	cmp	r0, r3
 8004d44:	d2f9      	bcs.n	8004d3a <memmove+0xa>
 8004d46:	1881      	adds	r1, r0, r2
 8004d48:	1ad2      	subs	r2, r2, r3
 8004d4a:	42d3      	cmn	r3, r2
 8004d4c:	d100      	bne.n	8004d50 <memmove+0x20>
 8004d4e:	bd10      	pop	{r4, pc}
 8004d50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d54:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004d58:	e7f7      	b.n	8004d4a <memmove+0x1a>
 8004d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d5e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004d62:	e7eb      	b.n	8004d3c <memmove+0xc>

08004d64 <_free_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	4605      	mov	r5, r0
 8004d68:	2900      	cmp	r1, #0
 8004d6a:	d045      	beq.n	8004df8 <_free_r+0x94>
 8004d6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d70:	1f0c      	subs	r4, r1, #4
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	bfb8      	it	lt
 8004d76:	18e4      	addlt	r4, r4, r3
 8004d78:	f000 f8d6 	bl	8004f28 <__malloc_lock>
 8004d7c:	4a1f      	ldr	r2, [pc, #124]	; (8004dfc <_free_r+0x98>)
 8004d7e:	6813      	ldr	r3, [r2, #0]
 8004d80:	4610      	mov	r0, r2
 8004d82:	b933      	cbnz	r3, 8004d92 <_free_r+0x2e>
 8004d84:	6063      	str	r3, [r4, #4]
 8004d86:	6014      	str	r4, [r2, #0]
 8004d88:	4628      	mov	r0, r5
 8004d8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d8e:	f000 b8cc 	b.w	8004f2a <__malloc_unlock>
 8004d92:	42a3      	cmp	r3, r4
 8004d94:	d90c      	bls.n	8004db0 <_free_r+0x4c>
 8004d96:	6821      	ldr	r1, [r4, #0]
 8004d98:	1862      	adds	r2, r4, r1
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	bf04      	itt	eq
 8004d9e:	681a      	ldreq	r2, [r3, #0]
 8004da0:	685b      	ldreq	r3, [r3, #4]
 8004da2:	6063      	str	r3, [r4, #4]
 8004da4:	bf04      	itt	eq
 8004da6:	1852      	addeq	r2, r2, r1
 8004da8:	6022      	streq	r2, [r4, #0]
 8004daa:	6004      	str	r4, [r0, #0]
 8004dac:	e7ec      	b.n	8004d88 <_free_r+0x24>
 8004dae:	4613      	mov	r3, r2
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	b10a      	cbz	r2, 8004db8 <_free_r+0x54>
 8004db4:	42a2      	cmp	r2, r4
 8004db6:	d9fa      	bls.n	8004dae <_free_r+0x4a>
 8004db8:	6819      	ldr	r1, [r3, #0]
 8004dba:	1858      	adds	r0, r3, r1
 8004dbc:	42a0      	cmp	r0, r4
 8004dbe:	d10b      	bne.n	8004dd8 <_free_r+0x74>
 8004dc0:	6820      	ldr	r0, [r4, #0]
 8004dc2:	4401      	add	r1, r0
 8004dc4:	1858      	adds	r0, r3, r1
 8004dc6:	4282      	cmp	r2, r0
 8004dc8:	6019      	str	r1, [r3, #0]
 8004dca:	d1dd      	bne.n	8004d88 <_free_r+0x24>
 8004dcc:	6810      	ldr	r0, [r2, #0]
 8004dce:	6852      	ldr	r2, [r2, #4]
 8004dd0:	605a      	str	r2, [r3, #4]
 8004dd2:	4401      	add	r1, r0
 8004dd4:	6019      	str	r1, [r3, #0]
 8004dd6:	e7d7      	b.n	8004d88 <_free_r+0x24>
 8004dd8:	d902      	bls.n	8004de0 <_free_r+0x7c>
 8004dda:	230c      	movs	r3, #12
 8004ddc:	602b      	str	r3, [r5, #0]
 8004dde:	e7d3      	b.n	8004d88 <_free_r+0x24>
 8004de0:	6820      	ldr	r0, [r4, #0]
 8004de2:	1821      	adds	r1, r4, r0
 8004de4:	428a      	cmp	r2, r1
 8004de6:	bf04      	itt	eq
 8004de8:	6811      	ldreq	r1, [r2, #0]
 8004dea:	6852      	ldreq	r2, [r2, #4]
 8004dec:	6062      	str	r2, [r4, #4]
 8004dee:	bf04      	itt	eq
 8004df0:	1809      	addeq	r1, r1, r0
 8004df2:	6021      	streq	r1, [r4, #0]
 8004df4:	605c      	str	r4, [r3, #4]
 8004df6:	e7c7      	b.n	8004d88 <_free_r+0x24>
 8004df8:	bd38      	pop	{r3, r4, r5, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20000e8c 	.word	0x20000e8c

08004e00 <_malloc_r>:
 8004e00:	b570      	push	{r4, r5, r6, lr}
 8004e02:	1ccd      	adds	r5, r1, #3
 8004e04:	f025 0503 	bic.w	r5, r5, #3
 8004e08:	3508      	adds	r5, #8
 8004e0a:	2d0c      	cmp	r5, #12
 8004e0c:	bf38      	it	cc
 8004e0e:	250c      	movcc	r5, #12
 8004e10:	2d00      	cmp	r5, #0
 8004e12:	4606      	mov	r6, r0
 8004e14:	db01      	blt.n	8004e1a <_malloc_r+0x1a>
 8004e16:	42a9      	cmp	r1, r5
 8004e18:	d903      	bls.n	8004e22 <_malloc_r+0x22>
 8004e1a:	230c      	movs	r3, #12
 8004e1c:	6033      	str	r3, [r6, #0]
 8004e1e:	2000      	movs	r0, #0
 8004e20:	bd70      	pop	{r4, r5, r6, pc}
 8004e22:	f000 f881 	bl	8004f28 <__malloc_lock>
 8004e26:	4a23      	ldr	r2, [pc, #140]	; (8004eb4 <_malloc_r+0xb4>)
 8004e28:	6814      	ldr	r4, [r2, #0]
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	b991      	cbnz	r1, 8004e54 <_malloc_r+0x54>
 8004e2e:	4c22      	ldr	r4, [pc, #136]	; (8004eb8 <_malloc_r+0xb8>)
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	b91b      	cbnz	r3, 8004e3c <_malloc_r+0x3c>
 8004e34:	4630      	mov	r0, r6
 8004e36:	f000 f867 	bl	8004f08 <_sbrk_r>
 8004e3a:	6020      	str	r0, [r4, #0]
 8004e3c:	4629      	mov	r1, r5
 8004e3e:	4630      	mov	r0, r6
 8004e40:	f000 f862 	bl	8004f08 <_sbrk_r>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d126      	bne.n	8004e96 <_malloc_r+0x96>
 8004e48:	230c      	movs	r3, #12
 8004e4a:	6033      	str	r3, [r6, #0]
 8004e4c:	4630      	mov	r0, r6
 8004e4e:	f000 f86c 	bl	8004f2a <__malloc_unlock>
 8004e52:	e7e4      	b.n	8004e1e <_malloc_r+0x1e>
 8004e54:	680b      	ldr	r3, [r1, #0]
 8004e56:	1b5b      	subs	r3, r3, r5
 8004e58:	d41a      	bmi.n	8004e90 <_malloc_r+0x90>
 8004e5a:	2b0b      	cmp	r3, #11
 8004e5c:	d90f      	bls.n	8004e7e <_malloc_r+0x7e>
 8004e5e:	600b      	str	r3, [r1, #0]
 8004e60:	50cd      	str	r5, [r1, r3]
 8004e62:	18cc      	adds	r4, r1, r3
 8004e64:	4630      	mov	r0, r6
 8004e66:	f000 f860 	bl	8004f2a <__malloc_unlock>
 8004e6a:	f104 000b 	add.w	r0, r4, #11
 8004e6e:	1d23      	adds	r3, r4, #4
 8004e70:	f020 0007 	bic.w	r0, r0, #7
 8004e74:	1ac3      	subs	r3, r0, r3
 8004e76:	d01b      	beq.n	8004eb0 <_malloc_r+0xb0>
 8004e78:	425a      	negs	r2, r3
 8004e7a:	50e2      	str	r2, [r4, r3]
 8004e7c:	bd70      	pop	{r4, r5, r6, pc}
 8004e7e:	428c      	cmp	r4, r1
 8004e80:	bf0d      	iteet	eq
 8004e82:	6863      	ldreq	r3, [r4, #4]
 8004e84:	684b      	ldrne	r3, [r1, #4]
 8004e86:	6063      	strne	r3, [r4, #4]
 8004e88:	6013      	streq	r3, [r2, #0]
 8004e8a:	bf18      	it	ne
 8004e8c:	460c      	movne	r4, r1
 8004e8e:	e7e9      	b.n	8004e64 <_malloc_r+0x64>
 8004e90:	460c      	mov	r4, r1
 8004e92:	6849      	ldr	r1, [r1, #4]
 8004e94:	e7ca      	b.n	8004e2c <_malloc_r+0x2c>
 8004e96:	1cc4      	adds	r4, r0, #3
 8004e98:	f024 0403 	bic.w	r4, r4, #3
 8004e9c:	42a0      	cmp	r0, r4
 8004e9e:	d005      	beq.n	8004eac <_malloc_r+0xac>
 8004ea0:	1a21      	subs	r1, r4, r0
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	f000 f830 	bl	8004f08 <_sbrk_r>
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	d0cd      	beq.n	8004e48 <_malloc_r+0x48>
 8004eac:	6025      	str	r5, [r4, #0]
 8004eae:	e7d9      	b.n	8004e64 <_malloc_r+0x64>
 8004eb0:	bd70      	pop	{r4, r5, r6, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20000e8c 	.word	0x20000e8c
 8004eb8:	20000e90 	.word	0x20000e90

08004ebc <_realloc_r>:
 8004ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ebe:	4607      	mov	r7, r0
 8004ec0:	4614      	mov	r4, r2
 8004ec2:	460e      	mov	r6, r1
 8004ec4:	b921      	cbnz	r1, 8004ed0 <_realloc_r+0x14>
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ecc:	f7ff bf98 	b.w	8004e00 <_malloc_r>
 8004ed0:	b922      	cbnz	r2, 8004edc <_realloc_r+0x20>
 8004ed2:	f7ff ff47 	bl	8004d64 <_free_r>
 8004ed6:	4625      	mov	r5, r4
 8004ed8:	4628      	mov	r0, r5
 8004eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004edc:	f000 f826 	bl	8004f2c <_malloc_usable_size_r>
 8004ee0:	4284      	cmp	r4, r0
 8004ee2:	d90f      	bls.n	8004f04 <_realloc_r+0x48>
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	f7ff ff8a 	bl	8004e00 <_malloc_r>
 8004eec:	4605      	mov	r5, r0
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d0f2      	beq.n	8004ed8 <_realloc_r+0x1c>
 8004ef2:	4631      	mov	r1, r6
 8004ef4:	4622      	mov	r2, r4
 8004ef6:	f7ff fbe7 	bl	80046c8 <memcpy>
 8004efa:	4631      	mov	r1, r6
 8004efc:	4638      	mov	r0, r7
 8004efe:	f7ff ff31 	bl	8004d64 <_free_r>
 8004f02:	e7e9      	b.n	8004ed8 <_realloc_r+0x1c>
 8004f04:	4635      	mov	r5, r6
 8004f06:	e7e7      	b.n	8004ed8 <_realloc_r+0x1c>

08004f08 <_sbrk_r>:
 8004f08:	b538      	push	{r3, r4, r5, lr}
 8004f0a:	4c06      	ldr	r4, [pc, #24]	; (8004f24 <_sbrk_r+0x1c>)
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	4605      	mov	r5, r0
 8004f10:	4608      	mov	r0, r1
 8004f12:	6023      	str	r3, [r4, #0]
 8004f14:	f000 f814 	bl	8004f40 <_sbrk>
 8004f18:	1c43      	adds	r3, r0, #1
 8004f1a:	d102      	bne.n	8004f22 <_sbrk_r+0x1a>
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	b103      	cbz	r3, 8004f22 <_sbrk_r+0x1a>
 8004f20:	602b      	str	r3, [r5, #0]
 8004f22:	bd38      	pop	{r3, r4, r5, pc}
 8004f24:	20004640 	.word	0x20004640

08004f28 <__malloc_lock>:
 8004f28:	4770      	bx	lr

08004f2a <__malloc_unlock>:
 8004f2a:	4770      	bx	lr

08004f2c <_malloc_usable_size_r>:
 8004f2c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004f30:	2800      	cmp	r0, #0
 8004f32:	f1a0 0004 	sub.w	r0, r0, #4
 8004f36:	bfbc      	itt	lt
 8004f38:	580b      	ldrlt	r3, [r1, r0]
 8004f3a:	18c0      	addlt	r0, r0, r3
 8004f3c:	4770      	bx	lr
	...

08004f40 <_sbrk>:
 8004f40:	4b04      	ldr	r3, [pc, #16]	; (8004f54 <_sbrk+0x14>)
 8004f42:	6819      	ldr	r1, [r3, #0]
 8004f44:	4602      	mov	r2, r0
 8004f46:	b909      	cbnz	r1, 8004f4c <_sbrk+0xc>
 8004f48:	4903      	ldr	r1, [pc, #12]	; (8004f58 <_sbrk+0x18>)
 8004f4a:	6019      	str	r1, [r3, #0]
 8004f4c:	6818      	ldr	r0, [r3, #0]
 8004f4e:	4402      	add	r2, r0
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	4770      	bx	lr
 8004f54:	20000e94 	.word	0x20000e94
 8004f58:	20004644 	.word	0x20004644

08004f5c <_init>:
 8004f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5e:	bf00      	nop
 8004f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f62:	bc08      	pop	{r3}
 8004f64:	469e      	mov	lr, r3
 8004f66:	4770      	bx	lr

08004f68 <_fini>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	bf00      	nop
 8004f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6e:	bc08      	pop	{r3}
 8004f70:	469e      	mov	lr, r3
 8004f72:	4770      	bx	lr
